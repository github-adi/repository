<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Pluggable Renderers</title>

<link href="C:\Program Files\Notepad++\styles.css" rel="stylesheet" type="text/css" />

<script>
	// currently, the renderers don't work with the createjs namespace, so we'll bypass it.
	var createjs = this;
</script>
<script src="C:\Program Files\Notepad++\easeljsNEXTmin.js"></script>

<script src="C:\Program Files\Notepad++\renderer.js"></script>
<script src="C:\Program Files\Notepad++\rendererNullMtx.js"></script>
<script src="C:\Program Files\Notepad++\Renderer2D.js"></script>
<script src="C:\Program Files\Notepad++\Renderer2DMtx.js"></script>
<script src="C:\Program Files\Notepad++\RendererDOMStr.js"></script>
<script src="C:\Program Files\Notepad++\RendererDOMMtxStr.js"></script>
<script src="C:\Program Files\Notepad++\RendererDOMMtx.js"></script>
<script src="C:\Program Files\Notepad++\RendererSVGMtxStr.js"></script>
<script src="C:\Program Files\Notepad++\RendererSVGStr.js"></script>
<script src="C:\Program Files\Notepad++\RendererSVGMtx.js"></script>
<script src="C:\Program Files\Notepad++\glMatrix095min.js"></script>
<script src="C:\Program Files\Notepad++\RendererWebGL.js"></script>

<script>
var rendererName;
var rendererClass;
var rotate = true;
var scale = true;
var useAlpha = true;
var numParticles = 1000;

var renderer;
var root;

var w=1000;
var h=600;
var fpsDiv;

function init() {
	rendererName = document.getElementById("renderer").value;
	rendererClass = window[rendererName];
	
	numParticles = parseInt(document.getElementById("numParticles").value);
	rotate = !!document.getElementById("rotate").checked;
	scale = !!document.getElementById("scale").checked;
	useAlpha = !!document.getElementById("useAlpha").checked;
	
	var target = document.getElementById("target");
	fpsDiv = document.getElementById("fps");
	fpsDiv.style.pixelWidth = w+"px";

	root = new Container();
	renderer = new rendererClass(root);
	target.parentNode.replaceChild(renderer.getSurface(w,h),target);

	// start the tick and point it at the window so we can do some work before updating the stage:
	Ticker.setFPS(100);
	Ticker.addListener(window);
}


function tick() {
	// loop through all of the active particles on stage:
	var l = root.getNumChildren();
	for (var i=l-1; i>=0; i--) {
		var particle = root.getChildAt(i);

		// apply gravity and friction
		particle.vY += 2;
		particle.vX *= 0.98;

		// update position, scale, and alpha:
		particle.x += particle.vX;
		particle.y += particle.vY;

		//remove particles that are off screen or not invisble
		if (particle.alpha <= 0 || particle.y > h) {
			root.removeChildAt(i);
			l--;
		}
	}
	
	if (l<numParticles) { addParticles(numParticles-l,w>>1,h, 60); }

	document.getElementById("fps").innerText = rendererName + ": "+Math.round(Ticker.getMeasuredFPS())+" fps";
	
	// draw the updates to stage
	renderer.update();
}

function addParticles(count, x, y, speed) {
	//create the specified number of particles
	for (var i=0; i<count; i++) {
		// create a new particle, and cache it so it can be used with renderers:
		var particle = new Shape();
		particle.graphics.beginFill(Graphics.getHSL(Math.random()*360,100,50)).drawRect(-6,-6,12,12)
						 .beginFill(Graphics.getHSL(Math.random()*360,100,50)).drawRect(-3,-3,6,6);
		particle.cache(-6,-6,12,12); // only cached shapes can be used.

		// set display properties:
		particle.x = x;
		particle.y = y;
		
		if (rotate) { particle.rotation = Math.random()*360; }
		if (scale) { particle.scaleX = particle.scaleY = Math.random()+0.5; }
		if (useAlpha) { particle.alpha = Math.random()*0.8+0.2; }

		// set up velocities:
		var a = Math.PI/2*Math.random()-Math.PI*0.75;
		var v = Math.random()*speed;
		particle.vX = Math.cos(a)*v;
		particle.vY = Math.sin(a)*v;

		// add to the display list:
		root.addChild(particle);
	}
}

</script>
</head>

<body>
	<div class="description">
	<input type="button" id="reload" value="reload" onclick="window.location.reload()"/>
	|
	<span id="fps">
	<select id="renderer">
		<option label="null renderer">RendererNullMtx</option>
		<optgroup label="Context2D">
			<option label="transforms">Renderer2D</option>
			<option label="matrix">Renderer2DMtx</option>
		</optgroup>
		<optgroup label="HTML DOM">
			<option label="string transforms">RendererDOMStr</option>
			<option label="string matrix">RendererDOMMtxStr</option>
			<option label="element matrix">RendererDOMMtx</option>
		</optgroup>
		<optgroup label="SVG">
			<option label="string transforms">RendererSVGStr</option>
			<option label="string matrix">RendererSVGMtxStr</option>
			<option label="element matrix">RendererSVGMtx</option>
		</optgroup>
		<option label="WebGL">RendererWebGL</option>
	</select>
	Particles: 
	<input type="text" id="numParticles" value="1000" maxlength="5" size="4"/>
	<input type="checkbox" id="useAlpha" checked="checked"/>
	<label for="useAlpha">alpha</label>
	<input type="checkbox" id="rotate"/>
	<label for="rotate">rotate</label>
	<input type="checkbox" id="scale"/>
	<label for="scale">scale</label>
		
	
	<input type="button" value="run" onclick="init()">
	</span>
	</div>
	<div id="target">
		This example shows using .cache() to create dynamic content that can be rendered by the renderers.
		<br><br>
		This is only supported by Canvas 2D, WebGL, and the DOM element renderers.
		<br><br>
		It runs fairly slowly, because of all the tiny unique textures being generated each frame.
		<br><br>
		In a production scenario, you would want to generate and cache dynamic content once, ideally combining it using SpriteSheetBuilder.
		<br><br>
		Safari 6 also exhibits a heisenbug, where only a limited number of particles will display unless you open the dev console.
	</div>
</body>
</html>
