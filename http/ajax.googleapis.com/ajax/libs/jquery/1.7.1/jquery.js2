-My build of DIGITAL Command Language:
-Muhammad Adi Nugroho,S.Adm.Neg.:
-Via My Notepad++ (HTML Editor):
http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.js
-Via jslint:
JSLint
Read the instructions.
Enjoy The Good Parts.
Source

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
1560
1561
1562
1563
1564
1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1636
1637
1638
1639
1640
1641
1642
1643
1644
1645
1646
1647
1648
1649
1650
1651
1652
1653
1654
1655
1656
1657
1658
1659
1660
1661
1662
1663
1664
1665
1666
1667
1668
1669
1670
1671
1672
1673
1674
1675
1676
1677
1678
1679
1680
1681
1682
1683
1684
1685
1686
1687
1688
1689
1690
1691
1692
1693
1694
1695
1696
1697
1698
1699
1700
1701
1702
1703
1704
1705
1706
1707
1708
1709
1710
1711
1712
1713
1714
1715
1716
1717
1718
1719
1720
1721
1722
1723
1724
1725
1726
1727
1728
1729
1730
1731
1732
1733
1734
1735
1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747
1748
1749
1750
1751
1752
1753
1754
1755
1756
1757
1758
1759
1760
1761
1762
1763
1764
1765
1766
1767
1768
1769
1770
1771
1772
1773
1774
1775
1776
1777
1778
1779
1780
1781
1782
1783
1784
1785
1786
1787
1788
1789
1790
1791
1792
1793
1794
1795
1796
1797
1798
1799
1800
1801
1802
1803
1804
1805
1806
1807
1808
1809
1810
1811
1812
1813
1814
1815
1816
1817
1818
1819
1820
1821
1822
1823
1824
1825
1826
1827
1828
1829
1830
1831
1832
1833
1834
1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1880
1881
1882
1883
1884
1885
1886
1887
1888
1889
1890
1891
1892
1893
1894
1895
1896
1897
1898
1899
1900
1901
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911
1912
1913
1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
1928
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1959
1960
1961
1962
1963
1964
1965
1966
1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
1981
1982
1983
1984
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2069
2070
2071
2072
2073
2074
2075
2076
2077
2078
2079
2080
2081
2082
2083
2084
2085
2086
2087
2088
2089
2090
2091
2092
2093
2094
2095
2096
2097
2098
2099
2100
2101
2102
2103
2104
2105
2106
2107
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122
2123
2124
2125
2126
2127
2128
2129
2130
2131
2132
2133
2134
2135
2136
2137
2138
2139
2140
2141
2142
2143
2144
2145
2146
2147
2148
2149
2150
2151
2152
2153
2154
2155
2156
2157
2158
2159
2160
2161
2162
2163
2164
2165
2166
2167
2168
2169
2170
2171
2172
2173
2174
2175
2176
2177
2178
2179
2180
2181
2182
2183
2184
2185
2186
2187
2188
2189
2190
2191
2192
2193
2194
2195
2196
2197
2198
2199
2200
2201
2202
2203
2204
2205
2206
2207
2208
2209
2210
2211
2212
2213
2214
2215
2216
2217
2218
2219
2220
2221
2222
2223
2224
2225
2226
2227
2228
2229
2230
2231
2232
2233
2234
2235
2236
2237
2238
2239
2240
2241
2242
2243
2244
2245
2246
2247
2248
2249
2250
2251
2252
2253
2254
2255
2256
2257
2258
2259
2260
2261
2262
2263
2264
2265
2266
2267
2268
2269
2270
2271
2272
2273
2274
2275
2276
2277
2278
2279
2280
2281
2282
2283
2284
2285
2286
2287
2288
2289
2290
2291
2292
2293
2294
2295
2296
2297
2298
2299
2300
2301
2302
2303
2304
2305
2306
2307
2308
2309
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2331
2332
2333
2334
2335
2336
2337
2338
2339
2340
2341
2342
2343
2344
2345
2346
2347
2348
2349
2350
2351
2352
2353
2354
2355
2356
2357
2358
2359
2360
2361
2362
2363
2364
2365
2366
2367
2368
2369
2370
2371
2372
2373
2374
2375
2376
2377
2378
2379
2380
2381
2382
2383
2384
2385
2386
2387
2388
2389
2390
2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2406
2407
2408
2409
2410
2411
2412
2413
2414
2415
2416
2417
2418
2419
2420
2421
2422
2423
2424
2425
2426
2427
2428
2429
2430
2431
2432
2433
2434
2435
2436
2437
2438
2439
2440
2441
2442
2443
2444
2445
2446
2447
2448
2449
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462
2463
2464
2465
2466
2467
2468
2469
2470
2471
2472
2473
2474
2475
2476
2477
2478
2479
2480
2481
2482
2483
2484
2485
2486
2487
2488
2489
2490
2491
2492
2493
2494
2495
2496
2497
2498
2499
2500
2501
2502
2503
2504
2505
2506
2507
2508
2509
2510
2511
2512
2513
2514
2515
2516
2517
2518
2519
2520
2521
2522
2523
2524
2525
2526
2527
2528
2529
2530
2531
2532
2533
2534
2535
2536
2537
2538
2539
2540
2541
2542
2543
2544
2545
2546
2547
2548
2549
2550
2551
2552
2553
2554
2555
2556
2557
2558
2559
2560
2561
2562
2563
2564
2565
2566
2567
2568
2569
2570
2571
2572
2573
2574
2575
2576
2577
2578
2579
2580
2581
2582
2583
2584
2585
2586
2587
2588
2589
2590
2591
2592
2593
2594
2595
2596
2597
2598
2599
2600
2601
2602
2603
2604
2605
2606
2607
2608
2609
2610
2611
2612
2613
2614
2615
2616
2617
2618
2619
2620
2621
2622
2623
2624
2625
2626
2627
2628
2629
2630
2631
2632
2633
2634
2635
2636
2637
2638
2639
2640
2641
2642
2643
2644
2645
2646
2647
2648
2649
2650
2651
2652
2653
2654
2655
2656
2657
2658
2659
2660
2661
2662
2663
2664
2665
2666
2667
2668
2669
2670
2671
2672
2673
2674
2675
2676
2677
2678
2679
2680
2681
2682
2683
2684
2685
2686
2687
2688
2689
2690
2691
2692
2693
2694
2695
2696
2697
2698
2699
2700
2701
2702
2703
2704
2705
2706
2707
2708
2709
2710
2711
2712
2713
2714
2715
2716
2717
2718
2719
2720
2721
2722
2723
2724
2725
2726
2727
2728
2729
2730
2731
2732
2733
2734
2735
2736
2737
2738
2739
2740
2741
2742
2743
2744
2745
2746
2747
2748
2749
2750
2751
2752
2753
2754
2755
2756
2757
2758
2759
2760
2761
2762
2763
2764
2765
2766
2767
2768
2769
2770
2771
2772
2773
2774
2775
2776
2777
2778
2779
2780
2781
2782
2783
2784
2785
2786
2787
2788
2789
2790
2791
2792
2793
2794
2795
2796
2797
2798
2799
2800
2801
2802
2803
2804
2805
2806
2807
2808
2809
2810
2811
2812
2813
2814
2815
2816
2817
2818
2819
2820
2821
2822
2823
2824
2825
2826
2827
2828
2829
2830
2831
2832
2833
2834
2835
2836
2837
2838
2839
2840
2841
2842
2843
2844
2845
2846
2847
2848
2849
2850
2851
2852
2853
2854
2855
2856
2857
2858
2859
2860
2861
2862
2863
2864
2865
2866
2867
2868
2869
2870
2871
2872
2873
2874
2875
2876
2877
2878
2879
2880
2881
2882
2883
2884
2885
2886
2887
2888
2889
2890
2891
2892
2893
2894
2895
2896
2897
2898
2899
2900
2901
2902
2903
2904
2905
2906
2907
2908
2909
2910
2911
2912
2913
2914
2915
2916
2917
2918
2919
2920
2921
2922
2923
2924
2925
2926
2927
2928
2929
2930
2931
2932
2933
2934
2935
2936
2937
2938
2939
2940
2941
2942
2943
2944
2945
2946
2947
2948
2949
2950
2951
2952
2953
2954
2955
2956
2957
2958
2959
2960
2961
2962
2963
2964
2965
2966
2967
2968
2969
2970
2971
2972
2973
2974
2975
2976
2977
2978
2979
2980
2981
2982
2983
2984
2985
2986
2987
2988
2989
2990
2991
2992
2993
2994
2995
2996
2997
2998
2999
3000
3001
3002
3003
3004
3005
3006
3007
3008
3009
3010
3011
3012
3013
3014
3015
3016
3017
3018
3019
3020
3021
3022
3023
3024
3025
3026
3027
3028
3029
3030
3031
3032
3033
3034
3035
3036
3037
3038
3039
3040
3041
3042
3043
3044
3045
3046
3047
3048
3049
3050
3051
3052
3053
3054
3055
3056
3057
3058
3059
3060
3061
3062
3063
3064
3065
3066
3067
3068
3069
3070
3071
3072
3073
3074
3075
3076
3077
3078
3079
3080
3081
3082
3083
3084
3085
3086
3087
3088
3089
3090
3091
3092
3093
3094
3095
3096
3097
3098
3099
3100
3101
3102
3103
3104
3105
3106
3107
3108
3109
3110
3111
3112
3113
3114
3115
3116
3117
3118
3119
3120
3121
3122
3123
3124
3125
3126
3127
3128
3129
3130
3131
3132
3133
3134
3135
3136
3137
3138
3139
3140
3141
3142
3143
3144
3145
3146
3147
3148
3149
3150
3151
3152
3153
3154
3155
3156
3157
3158
3159
3160
3161
3162
3163
3164
3165
3166
3167
3168
3169
3170
3171
3172
3173
3174
3175
3176
3177
3178
3179
3180
3181
3182
3183
3184
3185
3186
3187
3188
3189
3190
3191
3192
3193
3194
3195
3196
3197
3198
3199
3200
3201
3202
3203
3204
3205
3206
3207
3208
3209
3210
3211
3212
3213
3214
3215
3216
3217
3218
3219
3220
3221
3222
3223
3224
3225
3226
3227
3228
3229
3230
3231
3232
3233
3234
3235
3236
3237
3238
3239
3240
3241
3242
3243
3244
3245
3246
3247
3248
3249
3250
3251
3252
3253
3254
3255
3256
3257
3258
3259
3260
3261
3262
3263
3264
3265
3266
3267
3268
3269
3270
3271
3272
3273
3274
3275
3276
3277
3278
3279
3280
3281
3282
3283
3284
3285
3286
3287
3288
3289
3290
3291
3292
3293
3294
3295
3296
3297
3298
3299
3300
3301
3302
3303
3304
3305
3306
3307
3308
3309
3310
3311
3312
3313
3314
3315
3316
3317
3318
3319
3320
3321
3322
3323
3324
3325
3326
3327
3328
3329
3330
3331
3332
3333
3334
3335
3336
3337
3338
3339
3340
3341
3342
3343
3344
3345
3346
3347
3348
3349
3350
3351
3352
3353
3354
3355
3356
3357
3358
3359
3360
3361
3362
3363
3364
3365
3366
3367
3368
3369
3370
3371
3372
3373
3374
3375
3376
3377
3378
3379
3380
3381
3382
3383
3384
3385
3386
3387
3388
3389
3390
3391
3392
3393
3394
3395
3396
3397
3398
3399
3400
3401
3402
3403
3404
3405
3406
3407
3408
3409
3410
3411
3412
3413
3414
3415
3416
3417
3418
3419
3420
3421
3422
3423
3424
3425
3426
3427
3428
3429
3430
3431
3432
3433
3434
3435
3436
3437
3438
3439
3440
3441
3442
3443
3444
3445
3446
3447
3448
3449
3450
3451
3452
3453
3454
3455
3456
3457
3458
3459
3460
3461
3462
3463
3464
3465
3466
3467
3468
3469
3470
3471
3472
3473
3474
3475
3476
3477
3478
3479
3480
3481
3482
3483
3484
3485
3486
3487
3488
3489
3490
3491
3492
3493
3494
3495
3496
3497
3498
3499
3500
3501
3502
3503
3504
3505
3506
3507
3508
3509
3510
3511
3512
3513
3514
3515
3516
3517
3518
3519
3520
3521
3522
3523
3524
3525
3526
3527
3528
3529
3530
3531
3532
3533
3534
3535
3536
3537
3538
3539
3540
3541
3542
3543
3544
3545
3546
3547
3548
3549
3550
3551
3552
3553
3554
3555
3556
3557
3558
3559
3560
3561
3562
3563
3564
3565
3566
3567
3568
3569
3570
3571
3572
3573
3574
3575
3576
3577
3578
3579
3580
3581
3582
3583
3584
3585
3586
3587
3588
3589
3590
3591
3592
3593
3594
3595
3596
3597
3598
3599
3600
3601
3602
3603
3604
3605
3606
3607
3608
3609
3610
3611
3612
3613
3614
3615
3616
3617
3618
3619
3620
3621
3622
3623
3624
3625
3626
3627
3628
3629
3630
3631
3632
3633
3634
3635
3636
3637
3638
3639
3640
3641
3642
3643
3644
3645
3646
3647
3648
3649
3650
3651
3652
3653
3654
3655
3656
3657
3658
3659
3660
3661
3662
3663
3664
3665
3666
3667
3668
3669
3670
3671
3672
3673
3674
3675
3676
3677
3678
3679
3680
3681
3682
3683
3684
3685
3686
3687
3688
3689
3690
3691
3692
3693
3694
3695
3696
3697
3698
3699
3700
3701
3702
3703
3704
3705
3706
3707
3708
3709
3710
3711
3712
3713
3714
3715
3716
3717
3718
3719
3720
3721
3722
3723
3724
3725
3726
3727
3728
3729
3730
3731
3732
3733
3734
3735
3736
3737
3738
3739
3740
3741
3742
3743
3744
3745
3746
3747
3748
3749
3750
3751
3752
3753
3754
3755
3756
3757
3758
3759
3760
3761
3762
3763
3764
3765
3766
3767
3768
3769
3770
3771
3772
3773
3774
3775
3776
3777
3778
3779
3780
3781
3782
3783
3784
3785
3786
3787
3788
3789
3790
3791
3792
3793
3794
3795
3796
3797
3798
3799
3800
3801
3802
3803
3804
3805
3806
3807
3808
3809
3810
3811
3812
3813
3814
3815
3816
3817
3818
3819
3820
3821
3822
3823
3824
3825
3826
3827
3828
3829
3830
3831
3832
3833
3834
3835
3836
3837
3838
3839
3840
3841
3842
3843
3844
3845
3846
3847
3848
3849
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864
3865
3866
3867
3868
3869
3870
3871
3872
3873
3874
3875
3876
3877
3878
3879
3880
3881
3882
3883
3884
3885
3886
3887
3888
3889
3890
3891
3892
3893
3894
3895
3896
3897
3898
3899
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
3925
3926
3927
3928
3929
3930
3931
3932
3933
3934
3935
3936
3937
3938
3939
3940
3941
3942
3943
3944
3945
3946
3947
3948
3949
3950
3951
3952
3953
3954
3955
3956
3957
3958
3959
3960
3961
3962
3963
3964
3965
3966
3967
3968
3969
3970
3971
3972
3973
3974
3975
3976
3977
3978
3979
3980
3981
3982
3983
3984
3985
3986
3987
3988
3989
3990
3991
3992
3993
3994
3995
3996
3997
3998
3999
4000
4001
4002
4003
4004
4005
4006
4007
4008
4009
4010
4011
4012
4013
4014
4015
4016
4017
4018
4019
4020
4021
4022
4023
4024
4025
4026
4027
4028
4029
4030
4031
4032
4033
4034
4035
4036
4037
4038
4039
4040
4041
4042
4043
4044
4045
4046
4047
4048
4049
4050
4051
4052
4053
4054
4055
4056
4057
4058
4059
4060
4061
4062
4063
4064
4065
4066
4067
4068
4069
4070
4071
4072
4073
4074
4075
4076
4077
4078
4079
4080
4081
4082
4083
4084
4085
4086
4087
4088
4089
4090
4091
4092
4093
4094
4095
4096
4097
4098
4099
4100
4101
4102
4103
4104
4105
4106
4107
4108
4109
4110
4111
4112
4113
4114
4115
4116
4117
4118
4119
4120
4121
4122
4123
4124
4125
4126
4127
4128
4129
4130
4131
4132
4133
4134
4135
4136
4137
4138
4139
4140
4141
4142
4143
4144
4145
4146
4147
4148
4149
4150
4151
4152
4153
4154
4155
4156
4157
4158
4159
4160
4161
4162
4163
4164
4165
4166
4167
4168
4169
4170
4171
4172
4173
4174
4175
4176
4177
4178
4179
4180
4181
4182
4183
4184
4185
4186
4187
4188
4189
4190
4191
4192
4193
4194
4195
4196
4197
4198
4199
4200
4201
4202
4203
4204
4205
4206
4207
4208
4209
4210
4211
4212
4213
4214
4215
4216
4217
4218
4219
4220
4221
4222
4223
4224
4225
4226
4227
4228
4229
4230
4231
4232
4233
4234
4235
4236
4237
4238
4239
4240
4241
4242
4243
4244
4245
4246
4247
4248
4249
4250
4251
4252
4253
4254
4255
4256
4257
4258
4259
4260
4261
4262
4263
4264
4265
4266
4267
4268
4269
4270
4271
4272
4273
4274
4275
4276
4277
4278
4279
4280
4281
4282
4283
4284
4285
4286
4287
4288
4289
4290
4291
4292
4293
4294
4295
4296
4297
4298
4299
4300
4301
4302
4303
4304
4305
4306
4307
4308
4309
4310
4311
4312
4313
4314
4315
4316
4317
4318
4319
4320
4321
4322
4323
4324
4325
4326
4327
4328
4329
4330
4331
4332
4333
4334
4335
4336
4337
4338
4339
4340
4341
4342
4343
4344
4345
4346
4347
4348
4349
4350
4351
4352
4353
4354
4355
4356
4357
4358
4359
4360
4361
4362
4363
4364
4365
4366
4367
4368
4369
4370
4371
4372
4373
4374
4375
4376
4377
4378
4379
4380
4381
4382
4383
4384
4385
4386
4387
4388
4389
4390
4391
4392
4393
4394
4395
4396
4397
4398
4399
4400
4401
4402
4403
4404
4405
4406
4407
4408
4409
4410
4411
4412
4413
4414
4415
4416
4417
4418
4419
4420
4421
4422
4423
4424
4425
4426
4427
4428
4429
4430
4431
4432
4433
4434
4435
4436
4437
4438
4439
4440
4441
4442
4443
4444
4445
4446
4447
4448
4449
4450
4451
4452
4453
4454
4455
4456
4457
4458
4459
4460
4461
4462
4463
4464
4465
4466
4467
4468
4469
4470
4471
4472
4473
4474
4475
4476
4477
4478
4479
4480
4481
4482
4483
4484
4485
4486
4487
4488
4489
4490
4491
4492
4493
4494
4495
4496
4497
4498
4499
4500
4501
4502
4503
4504
4505
4506
4507
4508
4509
4510
4511
4512
4513
4514
4515
4516
4517
4518
4519
4520
4521
4522
4523
4524
4525
4526
4527
4528
4529
4530
4531
4532
4533
4534
4535
4536
4537
4538
4539
4540
4541
4542
4543
4544
4545
4546
4547
4548
4549
4550
4551
4552
4553
4554
4555
4556
4557
4558
4559
4560
4561
4562
4563
4564
4565
4566
4567
4568
4569
4570
4571
4572
4573
4574
4575
4576
4577
4578
4579
4580
4581
4582
4583
4584
4585
4586
4587
4588
4589
4590
4591
4592
4593
4594
4595
4596
4597
4598
4599
4600
4601
4602
4603
4604
4605
4606
4607
4608
4609
4610
4611
4612
4613
4614
4615
4616
4617
4618
4619
4620
4621
4622
4623
4624
4625
4626
4627
4628
4629
4630
4631
4632
4633
4634
4635
4636
4637
4638
4639
4640
4641
4642
4643
4644
4645
4646
4647
4648
4649
4650
4651
4652
4653
4654
4655
4656
4657
4658
4659
4660
4661
4662
4663
4664
4665
4666
4667
4668
4669
4670
4671
4672
4673
4674
4675
4676
4677
4678
4679
4680
4681
4682
4683
4684
4685
4686
4687
4688
4689
4690
4691
4692
4693
4694
4695
4696
4697
4698
4699
4700
4701
4702
4703
4704
4705
4706
4707
4708
4709
4710
4711
4712
4713
4714
4715
4716
4717
4718
4719
4720
4721
4722
4723
4724
4725
4726
4727
4728
4729
4730
4731
4732
4733
4734
4735
4736
4737
4738
4739
4740
4741
4742
4743
4744
4745
4746
4747
4748
4749
4750
4751
4752
4753
4754
4755
4756
4757
4758
4759
4760
4761
4762
4763
4764
4765
4766
4767
4768
4769
4770
4771
4772
4773
4774
4775
4776
4777
4778
4779
4780
4781
4782
4783
4784
4785
4786
4787
4788
4789
4790
4791
4792
4793
4794
4795
4796
4797
4798
4799
4800
4801
4802
4803
4804
4805
4806
4807
4808
4809
4810
4811
4812
4813
4814
4815
4816
4817
4818
4819
4820
4821
4822
4823
4824
4825
4826
4827
4828
4829
4830
4831
4832
4833
4834
4835
4836
4837
4838
4839
4840
4841
4842
4843
4844
4845
4846
4847
4848
4849
4850
4851
4852
4853
4854
4855
4856
4857
4858
4859
4860
4861
4862
4863
4864
4865
4866
4867
4868
4869
4870
4871
4872
4873
4874
4875
4876
4877
4878
4879
4880
4881
4882
4883
4884
4885
4886
4887
4888
4889
4890
4891
4892
4893
4894
4895
4896
4897
4898
4899
4900
4901
4902
4903
4904
4905
4906
4907
4908
4909
4910
4911
4912
4913
4914
4915
4916
4917
4918
4919
4920
4921
4922
4923
4924
4925
4926
4927
4928
4929
4930
4931
4932
4933
4934
4935
4936
4937
4938
4939
4940
4941
4942
4943
4944
4945
4946
4947
4948
4949
4950
4951
4952
4953
4954
4955
4956
4957
4958
4959
4960
4961
4962
4963
4964
4965
4966
4967
4968
4969
4970
4971
4972
4973
4974
4975
4976
4977
4978
4979
4980
4981
4982
4983
4984
4985
4986
4987
4988
4989
4990
4991
4992
4993
4994
4995
4996
4997
4998
4999
5000
5001
5002
5003
5004
5005
5006
5007
5008
5009
5010
5011
5012
5013
5014
5015
5016
5017
5018
5019
5020
5021
5022
5023
5024
5025
5026
5027
5028
5029
5030
5031
5032
5033
5034
5035
5036
5037
5038
5039
5040
5041
5042
5043
5044
5045
5046
5047
5048
5049
5050
5051
5052
5053
5054
5055
5056
5057
5058
5059
5060
5061
5062
5063
5064
5065
5066
5067
5068
5069
5070
5071
5072
5073
5074
5075
5076
5077
5078
5079
5080
5081
5082
5083
5084
5085
5086
5087
5088
5089
5090
5091
5092
5093
5094
5095
5096
5097
5098
5099
5100
5101
5102
5103
5104
5105
5106
5107
5108
5109
5110
5111
5112
5113
5114
5115
5116
5117
5118
5119
5120
5121
5122
5123
5124
5125
5126
5127
5128
5129
5130
5131
5132
5133
5134
5135
5136
5137
5138
5139
5140
5141
5142
5143
5144
5145
5146
5147
5148
5149
5150
5151
5152
5153
5154
5155
5156
5157
5158
5159
5160
5161
5162
5163
5164
5165
5166
5167
5168
5169
5170
5171
5172
5173
5174
5175
5176
5177
5178
5179
5180
5181
5182
5183
5184
5185
5186
5187
5188
5189
5190
5191
5192
5193
5194
5195
5196
5197
5198
5199
5200
5201
5202
5203
5204
5205
5206
5207
5208
5209
5210
5211
5212
5213
5214
5215
5216
5217
5218
5219
5220
5221
5222
5223
5224
5225
5226
5227
5228
5229
5230
5231
5232
5233
5234
5235
5236
5237
5238
5239
5240
5241
5242
5243
5244
5245
5246
5247
5248
5249
5250
5251
5252
5253
5254
5255
5256
5257
5258
5259
5260
5261
5262
5263
5264
5265
5266
5267
5268
5269
5270
5271
5272
5273
5274
5275
5276
5277
5278
5279
5280
5281
5282
5283
5284
5285
5286
5287
5288
5289
5290
5291
5292
5293
5294
5295
5296
5297
5298
5299
5300
5301
5302
5303
5304
5305
5306
5307
5308
5309
5310
5311
5312
5313
5314
5315
5316
5317
5318
5319
5320
5321
5322
5323
5324
5325
5326
5327
5328
5329
5330
5331
5332
5333
5334
5335
5336
5337
5338
5339
5340
5341
5342
5343
5344
5345
5346
5347
5348
5349
5350
5351
5352
5353
5354
5355
5356
5357
5358
5359
5360
5361
5362
5363
5364
5365
5366
5367
5368
5369
5370
5371
5372
5373
5374
5375
5376
5377
5378
5379
5380
5381
5382
5383
5384
5385
5386
5387
5388
5389
5390
5391
5392
5393
5394
5395
5396
5397
5398
5399
5400
5401
5402
5403
5404
5405
5406
5407
5408
5409
5410
5411
5412
5413
5414
5415
5416
5417
5418
5419
5420
5421
5422
5423
5424
5425
5426
5427
5428
5429
5430
5431
5432
5433
5434
5435
5436
5437
5438
5439
5440
5441
5442
5443
5444
5445
5446
5447
5448
5449
5450
5451
5452
5453
5454
5455
5456
5457
5458
5459
5460
5461
5462
5463
5464
5465
5466
5467
5468
5469
5470
5471
5472
5473
5474
5475
5476
5477
5478
5479
5480
5481
5482
5483
5484
5485
5486
5487
5488
5489
5490
5491
5492
5493
5494
5495
5496
5497
5498
5499
5500
5501
5502
5503
5504
5505
5506
5507
5508
5509
5510
5511
5512
5513
5514
5515
5516
5517
5518
5519
5520
5521
5522
5523
5524
5525
5526
5527
5528
5529
5530
5531
5532
5533
5534
5535
5536
5537
5538
5539
5540
5541
5542
5543
5544
5545
5546
5547
5548
5549
5550
5551
5552
5553
5554
5555
5556
5557
5558
5559
5560
5561
5562
5563
5564
5565
5566
5567
5568
5569
5570
5571
5572
5573
5574
5575
5576
5577
5578
5579
5580
5581
5582
5583
5584
5585
5586
5587
5588
5589
5590
5591
5592
5593
5594
5595
5596
5597
5598
5599
5600
5601
5602
5603
5604
5605
5606
5607
5608
5609
5610
5611
5612
5613
5614
5615
5616
5617
5618
5619
5620
5621
5622
5623
5624
5625
5626
5627
5628
5629
5630
5631
5632
5633
5634
5635
5636
5637
5638
5639
5640
5641
5642
5643
5644
5645
5646
5647
5648
5649
5650
5651
5652
5653
5654
5655
5656
5657
5658
5659
5660
5661
5662
5663
5664
5665
5666
5667
5668
5669
5670
5671
5672
5673
5674
5675
5676
5677
5678
5679
5680
5681
5682
5683
5684
5685
5686
5687
5688
5689
5690
5691
5692
5693
5694
5695
5696
5697
5698
5699
5700
5701
5702
5703
5704
5705
5706
5707
5708
5709
5710
5711
5712
5713
5714
5715
5716
5717
5718
5719
5720
5721
5722
5723
5724
5725
5726
5727
5728
5729
5730
5731
5732
5733
5734
5735
5736
5737
5738
5739
5740
5741
5742
5743
5744
5745
5746
5747
5748
5749
5750
5751
5752
5753
5754
5755
5756
5757
5758
5759
5760
5761
5762
5763
5764
5765
5766
5767
5768
5769
5770
5771
5772
5773
5774
5775
5776
5777
5778
5779
5780
5781
5782
5783
5784
5785
5786
5787
5788
5789
5790
5791
5792
5793
5794
5795
5796
5797
5798
5799
5800
5801
5802
5803
5804
5805
5806
5807
5808
5809
5810
5811
5812
5813
5814
5815
5816
5817
5818
5819
5820
5821
5822
5823
5824
5825
5826
5827
5828
5829
5830
5831
5832
5833
5834
5835
5836
5837
5838
5839
5840
5841
5842
5843
5844
5845
5846
5847
5848
5849
5850
5851
5852
5853
5854
5855
5856
5857
5858
5859
5860
5861
5862
5863
5864
5865
5866
5867
5868
5869
5870
5871
5872
5873
5874
5875
5876
5877
5878
5879
5880
5881
5882
5883
5884
5885
5886
5887
5888
5889
5890
5891
5892
5893
5894
5895
5896
5897
5898
5899
5900
5901
5902
5903
5904
5905
5906
5907
5908
5909
5910
5911
5912
5913
5914
5915
5916
5917
5918
5919
5920
5921
5922
5923
5924
5925
5926
5927
5928
5929
5930
5931
5932
5933
5934
5935
5936
5937
5938
5939
5940
5941
5942
5943
5944
5945
5946
5947
5948
5949
5950
5951
5952
5953
5954
5955
5956
5957
5958
5959
5960
5961
5962
5963
5964
5965
5966
5967
5968
5969
5970
5971
5972
5973
5974
5975
5976
5977
5978
5979
5980
5981
5982
5983
5984
5985
5986
5987
5988
5989
5990
5991
5992
5993
5994
5995
5996
5997
5998
5999
6000
6001
6002
6003
6004
6005
6006
6007
6008
6009
6010
6011
6012
6013
6014
6015
6016
6017
6018
6019
6020
6021
6022
6023
6024
6025
6026
6027
6028
6029
6030
6031
6032
6033
6034
6035
6036
6037
6038
6039
6040
6041
6042
6043
6044
6045
6046
6047
6048
6049
6050
6051
6052
6053
6054
6055
6056
6057
6058
6059
6060
6061
6062
6063
6064
6065
6066
6067
6068
6069
6070
6071
6072
6073
6074
6075
6076
6077
6078
6079
6080
6081
6082
6083
6084
6085
6086
6087
6088
6089
6090
6091
6092
6093
6094
6095
6096
6097
6098
6099
6100
6101
6102
6103
6104
6105
6106
6107
6108
6109
6110
6111
6112
6113
6114
6115
6116
6117
6118
6119
6120
6121
6122
6123
6124
6125
6126
6127
6128
6129
6130
6131
6132
6133
6134
6135
6136
6137
6138
6139
6140
6141
6142
6143
6144
6145
6146
6147
6148
6149
6150
6151
6152
6153
6154
6155
6156
6157
6158
6159
6160
6161
6162
6163
6164
6165
6166
6167
6168
6169
6170
6171
6172
6173
6174
6175
6176
6177
6178
6179
6180
6181
6182
6183
6184
6185
6186
6187
6188
6189
6190
6191
6192
6193
6194
6195
6196
6197
6198
6199
6200
6201
6202
6203
6204
6205
6206
6207
6208
6209
6210
6211
6212
6213
6214
6215
6216
6217
6218
6219
6220
6221
6222
6223
6224
6225
6226
6227
6228
6229
6230
6231
6232
6233
6234
6235
6236
6237
6238
6239
6240
6241
6242
6243
6244
6245
6246
6247
6248
6249
6250
6251
6252
6253
6254
6255
6256
6257
6258
6259
6260
6261
6262
6263
6264
6265
6266
6267
6268
6269
6270
6271
6272
6273
6274
6275
6276
6277
6278
6279
6280
6281
6282
6283
6284
6285
6286
6287
6288
6289
6290
6291
6292
6293
6294
6295
6296
6297
6298
6299
6300
6301
6302
6303
6304
6305
6306
6307
6308
6309
6310
6311
6312
6313
6314
6315
6316
6317
6318
6319
6320
6321
6322
6323
6324
6325
6326
6327
6328
6329
6330
6331
6332
6333
6334
6335
6336
6337
6338
6339
6340
6341
6342
6343
6344
6345
6346
6347
6348
6349
6350
6351
6352
6353
6354
6355
6356
6357
6358
6359
6360
6361
6362
6363
6364
6365
6366
6367
6368
6369
6370
6371
6372
6373
6374
6375
6376
6377
6378
6379
6380
6381
6382
6383
6384
6385
6386
6387
6388
6389
6390
6391
6392
6393
6394
6395
6396
6397
6398
6399
6400
6401
6402
6403
6404
6405
6406
6407
6408
6409
6410
6411
6412
6413
6414
6415
6416
6417
6418
6419
6420
6421
6422
6423
6424
6425
6426
6427
6428
6429
6430
6431
6432
6433
6434
6435
6436
6437
6438
6439
6440
6441
6442
6443
6444
6445
6446
6447
6448
6449
6450
6451
6452
6453
6454
6455
6456
6457
6458
6459
6460
6461
6462
6463
6464
6465
6466
6467
6468
6469
6470
6471
6472
6473
6474
6475
6476
6477
6478
6479
6480
6481
6482
6483
6484
6485
6486
6487
6488
6489
6490
6491
6492
6493
6494
6495
6496
6497
6498
6499
6500
6501
6502
6503
6504
6505
6506
6507
6508
6509
6510
6511
6512
6513
6514
6515
6516
6517
6518
6519
6520
6521
6522
6523
6524
6525
6526
6527
6528
6529
6530
6531
6532
6533
6534
6535
6536
6537
6538
6539
6540
6541
6542
6543
6544
6545
6546
6547
6548
6549
6550
6551
6552
6553
6554
6555
6556
6557
6558
6559
6560
6561
6562
6563
6564
6565
6566
6567
6568
6569
6570
6571
6572
6573
6574
6575
6576
6577
6578
6579
6580
6581
6582
6583
6584
6585
6586
6587
6588
6589
6590
6591
6592
6593
6594
6595
6596
6597
6598
6599
6600
6601
6602
6603
6604
6605
6606
6607
6608
6609
6610
6611
6612
6613
6614
6615
6616
6617
6618
6619
6620
6621
6622
6623
6624
6625
6626
6627
6628
6629
6630
6631
6632
6633
6634
6635
6636
6637
6638
6639
6640
6641
6642
6643
6644
6645
6646
6647
6648
6649
6650
6651
6652
6653
6654
6655
6656
6657
6658
6659
6660
6661
6662
6663
6664
6665
6666
6667
6668
6669
6670
6671
6672
6673
6674
6675
6676
6677
6678
6679
6680
6681
6682
6683
6684
6685
6686
6687
6688
6689
6690
6691
6692
6693
6694
6695
6696
6697
6698
6699
6700
6701
6702
6703
6704
6705
6706
6707
6708
6709
6710
6711
6712
6713
6714
6715
6716
6717
6718
6719
6720
6721
6722
6723
6724
6725
6726
6727
6728
6729
6730
6731
6732
6733
6734
6735
6736
6737
6738
6739
6740
6741
6742
6743
6744
6745
6746
6747
6748
6749
6750
6751
6752
6753
6754
6755
6756
6757
6758
6759
6760
6761
6762
6763
6764
6765
6766
6767
6768
6769
6770
6771
6772
6773
6774
6775
6776
6777
6778
6779
6780
6781
6782
6783
6784
6785
6786
6787
6788
6789
6790
6791
6792
6793
6794
6795
6796
6797
6798
6799
6800
6801
6802
6803
6804
6805
6806
6807
6808
6809
6810
6811
6812
6813
6814
6815
6816
6817
6818
6819
6820
6821
6822
6823
6824
6825
6826
6827
6828
6829
6830
6831
6832
6833
6834
6835
6836
6837
6838
6839
6840
6841
6842
6843
6844
6845
6846
6847
6848
6849
6850
6851
6852
6853
6854
6855
6856
6857
6858
6859
6860
6861
6862
6863
6864
6865
6866
6867
6868
6869
6870
6871
6872
6873
6874
6875
6876
6877
6878
6879
6880
6881
6882
6883
6884
6885
6886
6887
6888
6889
6890
6891
6892
6893
6894
6895
6896
6897
6898
6899
6900
6901
6902
6903
6904
6905
6906
6907
6908
6909
6910
6911
6912
6913
6914
6915
6916
6917
6918
6919
6920
6921
6922
6923
6924
6925
6926
6927
6928
6929
6930
6931
6932
6933
6934
6935
6936
6937
6938
6939
6940
6941
6942
6943
6944
6945
6946
6947
6948
6949
6950
6951
6952
6953
6954
6955
6956
6957
6958
6959
6960
6961
6962
6963
6964
6965
6966
6967
6968
6969
6970
6971
6972
6973
6974
6975
6976
6977
6978
6979
6980
6981
6982
6983
6984
6985
6986
6987
6988
6989
6990
6991
6992
6993
6994
6995
6996
6997
6998
6999
7000
7001
7002
7003
7004
7005
7006
7007
7008
7009
7010
7011
7012
7013
7014
7015
7016
7017
7018
7019
7020
7021
7022
7023
7024
7025
7026
7027
7028
7029
7030
7031
7032
7033
7034
7035
7036
7037
7038
7039
7040
7041
7042
7043
7044
7045
7046
7047
7048
7049
7050
7051
7052
7053
7054
7055
7056
7057
7058
7059
7060
7061
7062
7063
7064
7065
7066
7067
7068
7069
7070
7071
7072
7073
7074
7075
7076
7077
7078
7079
7080
7081
7082
7083
7084
7085
7086
7087
7088
7089
7090
7091
7092
7093
7094
7095
7096
7097
7098
7099
7100
7101
7102
7103
7104
7105
7106
7107
7108
7109
7110
7111
7112
7113
7114
7115
7116
7117
7118
7119
7120
7121
7122
7123
7124
7125
7126
7127
7128
7129
7130
7131
7132
7133
7134
7135
7136
7137
7138
7139
7140
7141
7142
7143
7144
7145
7146
7147
7148
7149
7150
7151
7152
7153
7154
7155
7156
7157
7158
7159
7160
7161
7162
7163
7164
7165
7166
7167
7168
7169
7170
7171
7172
7173
7174
7175
7176
7177
7178
7179
7180
7181
7182
7183
7184
7185
7186
7187
7188
7189
7190
7191
7192
7193
7194
7195
7196
7197
7198
7199
7200
7201
7202
7203
7204
7205
7206
7207
7208
7209
7210
7211
7212
7213
7214
7215
7216
7217
7218
7219
7220
7221
7222
7223
7224
7225
7226
7227
7228
7229
7230
7231
7232
7233
7234
7235
7236
7237
7238
7239
7240
7241
7242
7243
7244
7245
7246
7247
7248
7249
7250
7251
7252
7253
7254
7255
7256
7257
7258
7259
7260
7261
7262
7263
7264
7265
7266
7267
7268
7269
7270
7271
7272
7273
7274
7275
7276
7277
7278
7279
7280
7281
7282
7283
7284
7285
7286
7287
7288
7289
7290
7291
7292
7293
7294
7295
7296
7297
7298
7299
7300
7301
7302
7303
7304
7305
7306
7307
7308
7309
7310
7311
7312
7313
7314
7315
7316
7317
7318
7319
7320
7321
7322
7323
7324
7325
7326
7327
7328
7329
7330
7331
7332
7333
7334
7335
7336
7337
7338
7339
7340
7341
7342
7343
7344
7345
7346
7347
7348
7349
7350
7351
7352
7353
7354
7355
7356
7357
7358
7359
7360
7361
7362
7363
7364
7365
7366
7367
7368
7369
7370
7371
7372
7373
7374
7375
7376
7377
7378
7379
7380
7381
7382
7383
7384
7385
7386
7387
7388
7389
7390
7391
7392
7393
7394
7395
7396
7397
7398
7399
7400
7401
7402
7403
7404
7405
7406
7407
7408
7409
7410
7411
7412
7413
7414
7415
7416
7417
7418
7419
7420
7421
7422
7423
7424
7425
7426
7427
7428
7429
7430
7431
7432
7433
7434
7435
7436
7437
7438
7439
7440
7441
7442
7443
7444
7445
7446
7447
7448
7449
7450
7451
7452
7453
7454
7455
7456
7457
7458
7459
7460
7461
7462
7463
7464
7465
7466
7467
7468
7469
7470
7471
7472
7473
7474
7475
7476
7477
7478
7479
7480
7481
7482
7483
7484
7485
7486
7487
7488
7489
7490
7491
7492
7493
7494
7495
7496
7497
7498
7499
7500
7501
7502
7503
7504
7505
7506
7507
7508
7509
7510
7511
7512
7513
7514
7515
7516
7517
7518
7519
7520
7521
7522
7523
7524
7525
7526
7527
7528
7529
7530
7531
7532
7533
7534
7535
7536
7537
7538
7539
7540
7541
7542
7543
7544
7545
7546
7547
7548
7549
7550
7551
7552
7553
7554
7555
7556
7557
7558
7559
7560
7561
7562
7563
7564
7565
7566
7567
7568
7569
7570
7571
7572
7573
7574
7575
7576
7577
7578
7579
7580
7581
7582
7583
7584
7585
7586
7587
7588
7589
7590
7591
7592
7593
7594
7595
7596
7597
7598
7599
7600
7601
7602
7603
7604
7605
7606
7607
7608
7609
7610
7611
7612
7613
7614
7615
7616
7617
7618
7619
7620
7621
7622
7623
7624
7625
7626
7627
7628
7629
7630
7631
7632
7633
7634
7635
7636
7637
7638
7639
7640
7641
7642
7643
7644
7645
7646
7647
7648
7649
7650
7651
7652
7653
7654
7655
7656
7657
7658
7659
7660
7661
7662
7663
7664
7665
7666
7667
7668
7669
7670
7671
7672
7673
7674
7675
7676
7677
7678
7679
7680
7681
7682
7683
7684
7685
7686
7687
7688
7689
7690
7691
7692
7693
7694
7695
7696
7697
7698
7699
7700
7701
7702
7703
7704
7705
7706
7707
7708
7709
7710
7711
7712
7713
7714
7715
7716
7717
7718
7719
7720
7721
7722
7723
7724
7725
7726
7727
7728
7729
7730
7731
7732
7733
7734
7735
7736
7737
7738
7739
7740
7741
7742
7743
7744
7745
7746
7747
7748
7749
7750
7751
7752
7753
7754
7755
7756
7757
7758
7759
7760
7761
7762
7763
7764
7765
7766
7767
7768
7769
7770
7771
7772
7773
7774
7775
7776
7777
7778
7779
7780
7781
7782
7783
7784
7785
7786
7787
7788
7789
7790
7791
7792
7793
7794
7795
7796
7797
7798
7799
7800
7801
7802
7803
7804
7805
7806
7807
7808
7809
7810
7811
7812
7813
7814
7815
7816
7817
7818
7819
7820
7821
7822
7823
7824
7825
7826
7827
7828
7829
7830
7831
7832
7833
7834
7835
7836
7837
7838
7839
7840
7841
7842
7843
7844
7845
7846
7847
7848
7849
7850
7851
7852
7853
7854
7855
7856
7857
7858
7859
7860
7861
7862
7863
7864
7865
7866
7867
7868
7869
7870
7871
7872
7873
7874
7875
7876
7877
7878
7879
7880
7881
7882
7883
7884
7885
7886
7887
7888
7889
7890
7891
7892
7893
7894
7895
7896
7897
7898
7899
7900
7901
7902
7903
7904
7905
7906
7907
7908
7909
7910
7911
7912
7913
7914
7915
7916
7917
7918
7919
7920
7921
7922
7923
7924
7925
7926
7927
7928
7929
7930
7931
7932
7933
7934
7935
7936
7937
7938
7939
7940
7941
7942
7943
7944
7945
7946
7947
7948
7949
7950
7951
7952
7953
7954
7955
7956
7957
7958
7959
7960
7961
7962
7963
7964
7965
7966
7967
7968
7969
7970
7971
7972
7973
7974
7975
7976
7977
7978
7979
7980
7981
7982
7983
7984
7985
7986
7987
7988
7989
7990
7991
7992
7993
7994
7995
7996
7997
7998
7999
8000
8001
8002
8003
8004
8005
8006
8007
8008
8009
8010
8011
8012
8013
8014
8015
8016
8017
8018
8019
8020
8021
8022
8023
8024
8025
8026
8027
8028
8029
8030
8031
8032
8033
8034
8035
8036
8037
8038
8039
8040
8041
8042
8043
8044
8045
8046
8047
8048
8049
8050
8051
8052
8053
8054
8055
8056
8057
8058
8059
8060
8061
8062
8063
8064
8065
8066
8067
8068
8069
8070
8071
8072
8073
8074
8075
8076
8077
8078
8079
8080
8081
8082
8083
8084
8085
8086
8087
8088
8089
8090
8091
8092
8093
8094
8095
8096
8097
8098
8099
8100
8101
8102
8103
8104
8105
8106
8107
8108
8109
8110
8111
8112
8113
8114
8115
8116
8117
8118
8119
8120
8121
8122
8123
8124
8125
8126
8127
8128
8129
8130
8131
8132
8133
8134
8135
8136
8137
8138
8139
8140
8141
8142
8143
8144
8145
8146
8147
8148
8149
8150
8151
8152
8153
8154
8155
8156
8157
8158
8159
8160
8161
8162
8163
8164
8165
8166
8167
8168
8169
8170
8171
8172
8173
8174
8175
8176
8177
8178
8179
8180
8181
8182
8183
8184
8185
8186
8187
8188
8189
8190
8191
8192
8193
8194
8195
8196
8197
8198
8199
8200
8201
8202
8203
8204
8205
8206
8207
8208
8209
8210
8211
8212
8213
8214
8215
8216
8217
8218
8219
8220
8221
8222
8223
8224
8225
8226
8227
8228
8229
8230
8231
8232
8233
8234
8235
8236
8237
8238
8239
8240
8241
8242
8243
8244
8245
8246
8247
8248
8249
8250
8251
8252
8253
8254
8255
8256
8257
8258
8259
8260
8261
8262
8263
8264
8265
8266
8267
8268
8269
8270
8271
8272
8273
8274
8275
8276
8277
8278
8279
8280
8281
8282
8283
8284
8285
8286
8287
8288
8289
8290
8291
8292
8293
8294
8295
8296
8297
8298
8299
8300
8301
8302
8303
8304
8305
8306
8307
8308
8309
8310
8311
8312
8313
8314
8315
8316
8317
8318
8319
8320
8321
8322
8323
8324
8325
8326
8327
8328
8329
8330
8331
8332
8333
8334
8335
8336
8337
8338
8339
8340
8341
8342
8343
8344
8345
8346
8347
8348
8349
8350
8351
8352
8353
8354
8355
8356
8357
8358
8359
8360
8361
8362
8363
8364
8365
8366
8367
8368
8369
8370
8371
8372
8373
8374
8375
8376
8377
8378
8379
8380
8381
8382
8383
8384
8385
8386
8387
8388
8389
8390
8391
8392
8393
8394
8395
8396
8397
8398
8399
8400
8401
8402
8403
8404
8405
8406
8407
8408
8409
8410
8411
8412
8413
8414
8415
8416
8417
8418
8419
8420
8421
8422
8423
8424
8425
8426
8427
8428
8429
8430
8431
8432
8433
8434
8435
8436
8437
8438
8439
8440
8441
8442
8443
8444
8445
8446
8447
8448
8449
8450
8451
8452
8453
8454
8455
8456
8457
8458
8459
8460
8461
8462
8463
8464
8465
8466
8467
8468
8469
8470
8471
8472
8473
8474
8475
8476
8477
8478
8479
8480
8481
8482
8483
8484
8485
8486
8487
8488
8489
8490
8491
8492
8493
8494
8495
8496
8497
8498
8499
8500
8501
8502
8503
8504
8505
8506
8507
8508
8509
8510
8511
8512
8513
8514
8515
8516
8517
8518
8519
8520
8521
8522
8523
8524
8525
8526
8527
8528
8529
8530
8531
8532
8533
8534
8535
8536
8537
8538
8539
8540
8541
8542
8543
8544
8545
8546
8547
8548
8549
8550
8551
8552
8553
8554
8555
8556
8557
8558
8559
8560
8561
8562
8563
8564
8565
8566
8567
8568
8569
8570
8571
8572
8573
8574
8575
8576
8577
8578
8579
8580
8581
8582
8583
8584
8585
8586
8587
8588
8589
8590
8591
8592
8593
8594
8595
8596
8597
8598
8599
8600
8601
8602
8603
8604
8605
8606
8607
8608
8609
8610
8611
8612
8613
8614
8615
8616
8617
8618
8619
8620
8621
8622
8623
8624
8625
8626
8627
8628
8629
8630
8631
8632
8633
8634
8635
8636
8637
8638
8639
8640
8641
8642
8643
8644
8645
8646
8647
8648
8649
8650
8651
8652
8653
8654
8655
8656
8657
8658
8659
8660
8661
8662
8663
8664
8665
8666
8667
8668
8669
8670
8671
8672
8673
8674
8675
8676
8677
8678
8679
8680
8681
8682
8683
8684
8685
8686
8687
8688
8689
8690
8691
8692
8693
8694
8695
8696
8697
8698
8699
8700
8701
8702
8703
8704
8705
8706
8707
8708
8709
8710
8711
8712
8713
8714
8715
8716
8717
8718
8719
8720
8721
8722
8723
8724
8725
8726
8727
8728
8729
8730
8731
8732
8733
8734
8735
8736
8737
8738
8739
8740
8741
8742
8743
8744
8745
8746
8747
8748
8749
8750
8751
8752
8753
8754
8755
8756
8757
8758
8759
8760
8761
8762
8763
8764
8765
8766
8767
8768
8769
8770
8771
8772
8773
8774
8775
8776
8777
8778
8779
8780
8781
8782
8783
8784
8785
8786
8787
8788
8789
8790
8791
8792
8793
8794
8795
8796
8797
8798
8799
8800
8801
8802
8803
8804
8805
8806
8807
8808
8809
8810
8811
8812
8813
8814
8815
8816
8817
8818
8819
8820
8821
8822
8823
8824
8825
8826
8827
8828
8829
8830
8831
8832
8833
8834
8835
8836
8837
8838
8839
8840
8841
8842
8843
8844
8845
8846
8847
8848
8849
8850
8851
8852
8853
8854
8855
8856
8857
8858
8859
8860
8861
8862
8863
8864
8865
8866
8867
8868
8869
8870
8871
8872
8873
8874
8875
8876
8877
8878
8879
8880
8881
8882
8883
8884
8885
8886
8887
8888
8889
8890
8891
8892
8893
8894
8895
8896
8897
8898
8899
8900
8901
8902
8903
8904
8905
8906
8907
8908
8909
8910
8911
8912
8913
8914
8915
8916
8917
8918
8919
8920
8921
8922
8923
8924
8925
8926
8927
8928
8929
8930
8931
8932
8933
8934
8935
8936
8937
8938
8939
8940
8941
8942
8943
8944
8945
8946
8947
8948
8949
8950
8951
8952
8953
8954
8955
8956
8957
8958
8959
8960
8961
8962
8963
8964
8965
8966
8967
8968
8969
8970
8971
8972
8973
8974
8975
8976
8977
8978
8979
8980
8981
8982
8983
8984
8985
8986
8987
8988
8989
8990
8991
8992
8993
8994
8995
8996
8997
8998
8999
9000
9001
9002
9003
9004
9005
9006
9007
9008
9009
9010
9011
9012
9013
9014
9015
9016
9017
9018
9019
9020
9021
9022
9023
9024
9025
9026
9027
9028
9029
9030
9031
9032
9033
9034
9035
9036
9037
9038
9039
9040
9041
9042
9043
9044
9045
9046
9047
9048
9049
9050
9051
9052
9053
9054
9055
9056
9057
9058
9059
9060
9061
9062
9063
9064
9065
9066
9067
9068
9069
9070
9071
9072
9073
9074
9075
9076
9077
9078
9079
9080
9081
9082
9083
9084
9085
9086
9087
9088
9089
9090
9091
9092
9093
9094
9095
9096
9097
9098
9099
9100
9101
9102
9103
9104
9105
9106
9107
9108
9109
9110
9111
9112
9113
9114
9115
9116
9117
9118
9119
9120
9121
9122
9123
9124
9125
9126
9127
9128
9129
9130
9131
9132
9133
9134
9135
9136
9137
9138
9139
9140
9141
9142
9143
9144
9145
9146
9147
9148
9149
9150
9151
9152
9153
9154
9155
9156
9157
9158
9159
9160
9161
9162
9163
9164
9165
9166
9167
9168
9169
9170
9171
9172
9173
9174
9175
9176
9177
9178
9179
9180
9181
9182
9183
9184
9185
9186
9187
9188
9189
9190
9191
9192
9193
9194
9195
9196
9197
9198
9199
9200
9201
9202
9203
9204
9205
9206
9207
9208
9209
9210
9211
9212
9213
9214
9215
9216
9217
9218
9219
9220
9221
9222
9223
9224
9225
9226
9227
9228
9229
9230
9231
9232
9233
9234
9235
9236
9237
9238
9239
9240
9241
9242
9243
9244
9245
9246
9247
9248
9249
9250
9251
9252
9253
9254
9255
9256
9257
9258
9259
9260
9261
9262
9263
9264
9265
9266
9267
9268
9269
9270
9271
9272


/*
 * Downloaded from http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.js, 2012-02-04 23:26
 */

/*!
 * jQuery JavaScript Library v1.7.1
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Mon Nov 21 21:11:03 2011 -0500
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.1",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	// A crude way of determining if an object is a window
	isWindow: function( obj ) {
		return obj && typeof obj === "object" && "setInterval" in obj;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, key, value, exec, fn, pass ) {
		var length = elems.length;

		// Setting many attributes
		if ( typeof key === "object" ) {
			for ( var k in key ) {
				jQuery.access( elems, k, key[k], exec, fn, value );
			}
			return elems;
		}

		// Setting one attribute
		if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = !pass && exec && jQuery.isFunction(value);

			for ( var i = 0; i < length; i++ ) {
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
			}

			return elems;
		}

		// Getting an attribute
		return length ? fn( elems[0], key ) : undefined;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!memory;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		marginDiv,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");
	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	div.innerHTML = "";

	// Check if div with explicit width and no margin-right incorrectly
	// gets computed margin-right based on width of container. For more
	// info see bug #3333
	// Fails in WebKit before Feb 2011 nightlies
	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	if ( window.getComputedStyle ) {
		marginDiv = document.createElement( "div" );
		marginDiv.style.width = "0";
		marginDiv.style.marginRight = "0";
		div.style.width = "2px";
		div.appendChild( marginDiv );
		support.reliableMarginRight =
			( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
	}

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = marginDiv = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			conMarginTop, ptlm, vb, style, html,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
		vb = "visibility:hidden;border:0;";
		style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
		html = "<div " + style + "><div></div></div>" +
			"<table " + style + " cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Figure out if the W3C box model works as expected
		div.innerHTML = "";
		div.style.width = div.style.paddingLeft = "1px";
		jQuery.boxModel = support.boxModel = div.offsetWidth === 2;

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 2 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "";
			div.innerHTML = "<div style='width:4px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 2 );
		}

		div.style.cssText = ptlm + vb;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		body.removeChild( container );
		div  = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, attr, name,
			data = null;

		if ( typeof key === "undefined" ) {
			if ( this.length ) {
				data = jQuery.data( this[0] );

				if ( this[0].nodeType === 1 && !jQuery._data( this[0], "parsedAttrs" ) ) {
					attr = this[0].attributes;
					for ( var i = 0, l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( this[0], name, data[ name ] );
						}
					}
					jQuery._data( this[0], "parsedAttrs", true );
				}
			}

			return data;

		} else if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split(".");
		parts[1] = parts[1] ? "." + parts[1] : "";

		if ( value === undefined ) {
			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

			// Try to fetch any internally stored data first
			if ( data === undefined && this.length ) {
				data = jQuery.data( this[0], key );
				data = dataAttr( this[0], key, data );
			}

			return data === undefined && parts[1] ?
				this.data( parts[0] ) :
				data;

		} else {
			return this.each(function() {
				var self = jQuery( this ),
					args = [ parts[0], value ];

				self.triggerHandler( "setData" + parts[1] + "!", args );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + parts[1] + "!", args );
			});
		}
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? parseFloat( data ) :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
		}

		if ( data === undefined ) {
			return jQuery.queue( this[0], type );
		}
		return this.each(function() {
			var queue = jQuery.queue( this, type, data );

			if ( type === "fx" && queue[0] !== "inprogress" ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise();
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.attr );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.prop );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.nodeName.toLowerCase() ] || jQuery.valHooks[ elem.type ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.nodeName.toLowerCase() ] || jQuery.valHooks[ this.type ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;

					// See #9699 for explanation of this approach (setting first, then removal)
					jQuery.attr( elem, name, "" );
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( rboolean.test( name ) && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /\bhover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Determine handlers that should run if there are delegated events
		// Avoid disabled elements in IE (#6911) and non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !event.target.disabled && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
				selMatch = {};
				matches = [];
				jqcur[0] = cur;
				for ( i = 0; i < delegateCount; i++ ) {
					handleObj = handlers[ i ];
					sel = handleObj.selector;

					if ( selMatch[ sel ] === undefined ) {
						selMatch[ sel ] = (
							handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
						);
					}
					if ( selMatch[ sel ] ) {
						matches.push( handleObj );
					}
				}
				if ( matches.length ) {
					handlerQueue.push({ elem: cur, matches: matches });
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						// If form was submitted by the user, bubble the event up the tree
						if ( this.parentNode && !event.isTrigger ) {
							jQuery.event.simulate( "submit", this.parentNode, event, true );
						}
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on.call( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace? handleObj.type + "." + handleObj.namespace : handleObj.type,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;
	
	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];
		
			parts.push( m[1] );
		
			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}
				
				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];
		
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},
	
	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},
		
		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			
			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					if ( type === "first" ) { 
						return true; 
					}

					node = elem;

				case "last":
					while ( (node = node.nextSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}
					
					doneName = match[0];
					parent = elem.parentNode;
	
					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;
						
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 

						parent[ expando ] = doneName;
					}
					
					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},
		
		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}
	
		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
				
				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );
					
					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}
				
				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );
						
					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}
							
						} else {
							return makeArray( [], extra );
						}
					}
					
					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}
		
			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );
	
		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try { 
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}
	
	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;
			
			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833) 
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.POS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && ( 
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ? 
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];
		
		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( elem.parentNode.firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( text ) {
		if ( jQuery.isFunction(text) ) {
			return this.each(function(i) {
				var self = jQuery( this );

				self.text( text.call(this, i, self.text()) );
			});
		}

		if ( typeof text !== "object" && text !== undefined ) {
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
		}

		return jQuery.text( this );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		if ( value === undefined ) {
			return this[0] && this[0].nodeType === 1 ?
				this[0].innerHTML.replace(rinlinejQuery, "") :
				null;

		// See if we can take a shortcut and just use innerHTML
		} else if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {

			value = value.replace(rxhtmlTag, "<$1></$2>");

			try {
				for ( var i = 0, l = this.length; i < l; i++ ) {
					// Remove element nodes and prevent memory leaks
					if ( this[i].nodeType === 1 ) {
						jQuery.cleanData( this[i].getElementsByTagName("*") );
						this[i].innerHTML = value;
					}
				}

			// If using innerHTML throws an exception, use the fallback method
			} catch(e) {
				this.empty().append( value );
			}

		} else if ( jQuery.isFunction( value ) ) {
			this.each(function(i){
				var self = jQuery( this );

				self.html( value.call(this, i, self.html()) );
			});

		} else {
			this.empty().append( value );
		}

		return this;
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, evalScript );
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? "." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ type ][ i ].data );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || !rnoshimcache.test( "<" + elem.nodeName ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType;

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		var ret = [], j;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div");

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );

				} else {
					if ( ret[i].nodeType === 1 ) {
						var jsTags = jQuery.grep( ret[i].getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( ret[i] );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});

function evalScript( i, elem ) {
	if ( elem.src ) {
		jQuery.ajax({
			url: elem.src,
			async: false,
			dataType: "script"
		});
	} else {
		jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
	}

	if ( elem.parentNode ) {
		elem.parentNode.removeChild( elem );
	}
}




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnumpx = /^-?\d+(?:px)?$/i,
	rnum = /^-?\d/,
	rrelNum = /^([\-+])=([\-+.\de]+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssWidth = [ "Left", "Right" ],
	cssHeight = [ "Top", "Bottom" ],
	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	// Setting 'undefined' is a no-op
	if ( arguments.length === 2 && value === undefined ) {
		return this;
	}

	return jQuery.access( this, name, value, true, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	});
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity", "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {};

		// Remember the old values, and insert the new ones
		for ( var name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	}
});

// DEPRECATED, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

jQuery.each(["height", "width"], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			var val;

			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWH( elem, name, extra );
				} else {
					jQuery.swap( elem, cssShow, function() {
						val = getWH( elem, name, extra );
					});
				}

				return val;
			}
		},

		set: function( elem, value ) {
			if ( rnumpx.test( value ) ) {
				// ignore negative width and height values #1599
				value = parseFloat( value );

				if ( value >= 0 ) {
					return value + "px";
				}

			} else {
				return value;
			}
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				var ret;
				jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						ret = curCSS( elem, "margin-right", "marginRight" );
					} else {
						ret = elem.style.marginRight;
					}
				});
				return ret;
			}
		};
	}
});

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret === null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ( ret || 0 );
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWH( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		which = name === "width" ? cssWidth : cssHeight,
		i = 0,
		len = which.length;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i++ ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ] || 0;
	}
	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i++ ) {
			val += parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
			}
		}
	}

	return val + "px";
}

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefiler, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && obj != null && typeof obj === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = s.contentType === "application/x-www-form-urlencoded" &&
		( typeof s.data === "string" );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}
									responses.text = xhr.responseText;

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( display === "" && jQuery.css(elem, "display") === "none" ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			for ( p in prop ) {

				// property name normalization
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				val = prop[ name ];

				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p, n, firstNum, diff ) {
			return firstNum + diff * p;
		},
		swing: function( p, n, firstNum, diff ) {
			return ( ( -Math.cos( p*Math.PI ) / 2 ) + 0.5 ) * diff + firstNum;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( self.options.hide && jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				jQuery._data( self.elem, "fxshow" + self.prop, self.start );
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Adds width/height step functions
// Do not set anything below 0
jQuery.each([ "width", "height" ], function( i, prop ) {
	jQuery.fx.step[ prop ] = function( fx ) {
		jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
	};
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( document.compatMode === "CSS1Compat" ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	jQuery.fn.offset = function( options ) {
		var elem = this[0], box;

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		var doc = elem.ownerDocument,
			docElem = doc.documentElement;

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow(doc),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	jQuery.fn.offset = function( options ) {
		var elem = this[0];

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			doc = elem.ownerDocument,
			docElem = doc.documentElement,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( ["Left", "Top"], function( i, name ) {
	var method = "scroll" + name;

	jQuery.fn[ method ] = function( val ) {
		var elem, win;

		if ( val === undefined ) {
			elem = this[ 0 ];

			if ( !elem ) {
				return null;
			}

			win = getWindow( elem );

			// Return the scroll offset
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
				jQuery.support.boxModel && win.document.documentElement[ method ] ||
					win.document.body[ method ] :
				elem[ method ];
		}

		// Set the scroll offset
		return this.each(function() {
			win = getWindow( this );

			if ( win ) {
				win.scrollTo(
					!i ? val : jQuery( win ).scrollLeft(),
					 i ? val : jQuery( win ).scrollTop()
				);

			} else {
				this[ method ] = val;
			}
		});
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each([ "Height", "Width" ], function( i, name ) {

	var type = name.toLowerCase();

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( size ) {
		// Get window width or height
		var elem = this[0];
		if ( !elem ) {
			return size == null ? null : this;
		}

		if ( jQuery.isFunction( size ) ) {
			return this.each(function( i ) {
				var self = jQuery( this );
				self[ type ]( size.call( this, i, self[ type ]() ) );
			});
		}

		if ( jQuery.isWindow( elem ) ) {
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
			var docElemProp = elem.document.documentElement[ "client" + name ],
				body = elem.document.body;
			return elem.document.compatMode === "CSS1Compat" && docElemProp ||
				body && body[ "client" + name ] || docElemProp;

		// Get document width or height
		} else if ( elem.nodeType === 9 ) {
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
			return Math.max(
				elem.documentElement["client" + name],
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
				elem.body["offset" + name], elem.documentElement["offset" + name]
			);

		// Get or set width or height on the element
		} else if ( size === undefined ) {
			var orig = jQuery.css( elem, type ),
				ret = parseFloat( orig );

			return jQuery.isNumeric( ret ) ? ret : orig;

		// Set the width or height on the element (default to pixels if value is unitless)
		} else {
			return this.css( type, typeof size === "string" ? size : size + "px" );
		}
	};

});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );

JSLintclear
Warnings
JSLint was unable to finish.
19.19Reserved name 'undefined'.
(function( window, undefined ) {
22.30Expected ';' and instead saw ','.
var document = window.document,
23.1Use spaces, not tabs.
	navigator = window.navigator,
23.29Expected ';' and instead saw ','.
	navigator = window.navigator,
24.1Use spaces, not tabs.
	location = window.location;
28.4Redefinition of 'jQuery' from line 25.
var jQuery = function( selector, context ) {
29.1Use spaces, not tabs.
		// The jQuery object is actually just the init constructor 'enhanced'
30.1Use spaces, not tabs.
		return new jQuery.fn.init( selector, context, rootjQuery );
31.1Use spaces, not tabs.
	},
31.2Expected ';' and instead saw ','.
	},
33.1Use spaces, not tabs.
	// Map over jQuery in case of overwrite
34.1Use spaces, not tabs.
	_jQuery = window.jQuery,
34.24Expected ';' and instead saw ','.
	_jQuery = window.jQuery,
36.1Use spaces, not tabs.
	// Map over the $ in case of overwrite
37.1Use spaces, not tabs.
	_$ = window.$,
37.13Bad property name '$'.
	_$ = window.$,
37.14Expected ';' and instead saw ','.
	_$ = window.$,
39.1Use spaces, not tabs.
	// A central reference to the root jQuery(document)
40.1Use spaces, not tabs.
	rootjQuery,
40.11Expected ';' and instead saw ','.
	rootjQuery,
42.1Use spaces, not tabs.
	// A simple way to check for HTML strings or ID strings
43.1Use spaces, not tabs.
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
44.1Use spaces, not tabs.
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
44.55Expected ';' and instead saw ','.
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
46.1Use spaces, not tabs.
	// Check if a string has a non-whitespace character in it
47.1Use spaces, not tabs.
	rnotwhite = /\S/,
47.17Expected ';' and instead saw ','.
	rnotwhite = /\S/,
49.1Use spaces, not tabs.
	// Used for trimming whitespace
50.1Use spaces, not tabs.
	trimLeft = /^\s+/,
50.18Expected ';' and instead saw ','.
	trimLeft = /^\s+/,
51.1Use spaces, not tabs.
	trimRight = /\s+$/,
51.19Expected ';' and instead saw ','.
	trimRight = /\s+$/,
53.1Use spaces, not tabs.
	// Match a standalone tag
54.1Use spaces, not tabs.
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
54.37Unexpected '1' after '\'.
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
54.42Expected ';' and instead saw ','.
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
56.1Use spaces, not tabs.
	// JSON RegExp
57.1Use spaces, not tabs.
	rvalidchars = /^[\],:{}\s]*$/,
57.30Expected ';' and instead saw ','.
	rvalidchars = /^[\],:{}\s]*$/,
58.1Use spaces, not tabs.
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
58.53Expected ';' and instead saw ','.
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
59.1Use spaces, not tabs.
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
59.82Expected ';' and instead saw ','.
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
60.1Use spaces, not tabs.
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
60.38Expected ';' and instead saw ','.
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
62.1Use spaces, not tabs.
	// Useragent RegExp
63.1Use spaces, not tabs.
	rwebkit = /(webkit)[ \/]([\w.]+)/,
63.22Expected '\' before ' '.
	rwebkit = /(webkit)[ \/]([\w.]+)/,
63.34Expected ';' and instead saw ','.
	rwebkit = /(webkit)[ \/]([\w.]+)/,
64.1Use spaces, not tabs.
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
64.34Expected '\' before ' '.
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
64.46Expected ';' and instead saw ','.
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
65.1Use spaces, not tabs.
	rmsie = /(msie) ([\w.]+)/,
65.17Expected '\' before ' '.
	rmsie = /(msie) ([\w.]+)/,
65.26Expected ';' and instead saw ','.
	rmsie = /(msie) ([\w.]+)/,
66.1Use spaces, not tabs.
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
66.29Expected '\' before ' '.
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
66.43Expected ';' and instead saw ','.
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
68.1Use spaces, not tabs.
	// Matches dashed string for camelizing
69.1Use spaces, not tabs.
	rdashAlpha = /-([a-z]|[0-9])/ig,
69.32Expected ';' and instead saw ','.
	rdashAlpha = /-([a-z]|[0-9])/ig,
70.1Use spaces, not tabs.
	rmsPrefix = /^-ms-/,
70.20Expected ';' and instead saw ','.
	rmsPrefix = /^-ms-/,
72.1Use spaces, not tabs.
	// Used by jQuery.camelCase as callback to replace()
73.1Use spaces, not tabs.
	fcamelCase = function( all, letter ) {
74.1Use spaces, not tabs.
		return ( letter + "" ).toUpperCase();
74.24Unexpected '.'.
		return ( letter + "" ).toUpperCase();
75.1Use spaces, not tabs.
	},
75.2Expected ';' and instead saw ','.
	},
77.1Use spaces, not tabs.
	// Keep a UserAgent string for use with jQuery.browser
78.1Use spaces, not tabs.
	userAgent = navigator.userAgent,
78.32Expected ';' and instead saw ','.
	userAgent = navigator.userAgent,
80.1Use spaces, not tabs.
	// For matching the engine and version of the browser
81.1Use spaces, not tabs.
	browserMatch,
81.13Expected ';' and instead saw ','.
	browserMatch,
83.1Use spaces, not tabs.
	// The deferred used on DOM ready
84.1Use spaces, not tabs.
	readyList,
84.10Expected ';' and instead saw ','.
	readyList,
86.1Use spaces, not tabs.
	// The ready event handler
87.1Use spaces, not tabs.
	DOMContentLoaded,
87.17Expected ';' and instead saw ','.
	DOMContentLoaded,
89.1Use spaces, not tabs.
	// Save a reference to some core methods
90.1Use spaces, not tabs.
	toString = Object.prototype.toString,
90.37Expected ';' and instead saw ','.
	toString = Object.prototype.toString,
91.1Use spaces, not tabs.
	hasOwn = Object.prototype.hasOwnProperty,
91.41Expected ';' and instead saw ','.
	hasOwn = Object.prototype.hasOwnProperty,
92.1Use spaces, not tabs.
	push = Array.prototype.push,
92.28Expected ';' and instead saw ','.
	push = Array.prototype.push,
93.1Use spaces, not tabs.
	slice = Array.prototype.slice,
93.30Expected ';' and instead saw ','.
	slice = Array.prototype.slice,
94.1Use spaces, not tabs.
	trim = String.prototype.trim,
94.29Expected ';' and instead saw ','.
	trim = String.prototype.trim,
95.1Use spaces, not tabs.
	indexOf = Array.prototype.indexOf,
95.34Expected ';' and instead saw ','.
	indexOf = Array.prototype.indexOf,
97.1Use spaces, not tabs.
	// [[Class]] -> type pairs
98.1Use spaces, not tabs.
	class2type = {};
100.29Unexpected '='.
jQuery.fn = jQuery.prototype = {
101.1Use spaces, not tabs.
	constructor: jQuery,
102.1Use spaces, not tabs.
	init: function( selector, context, rootjQuery ) {
103.1Use spaces, not tabs.
		var match, elem, ret, doc;
103.11Expected ';' and instead saw ','.
		var match, elem, ret, doc;
103.17Expected ';' and instead saw ','.
		var match, elem, ret, doc;
103.22Expected ';' and instead saw ','.
		var match, elem, ret, doc;
105.1Use spaces, not tabs.
		// Handle $(""), $(null), or $(undefined)
106.1Use spaces, not tabs.
		if ( !selector ) {
107.1Use spaces, not tabs.
			return this;
107.10Unexpected 'this'.
			return this;
108.1Use spaces, not tabs.
		}
110.1Use spaces, not tabs.
		// Handle $(DOMElement)
111.1Use spaces, not tabs.
		if ( selector.nodeType ) {
112.1Use spaces, not tabs.
			this.context = this[0] = selector;
112.3Unexpected 'this'.
			this.context = this[0] = selector;
112.18Unexpected 'this'.
			this.context = this[0] = selector;
112.26Unexpected '='.
			this.context = this[0] = selector;
113.1Use spaces, not tabs.
			this.length = 1;
113.3Unexpected 'this'.
			this.length = 1;
114.1Use spaces, not tabs.
			return this;
114.10Unexpected 'this'.
			return this;
115.1Use spaces, not tabs.
		}
117.1Use spaces, not tabs.
		// The body element only exists once, optimize finding it
118.1Use spaces, not tabs.
		if ( selector === "body" && !context && document.body ) {
119.1Use spaces, not tabs.
			this.context = document;
119.3Unexpected 'this'.
			this.context = document;
120.1Use spaces, not tabs.
			this[0] = document.body;
120.3Unexpected 'this'.
			this[0] = document.body;
121.1Use spaces, not tabs.
			this.selector = selector;
121.3Unexpected 'this'.
			this.selector = selector;
122.1Use spaces, not tabs.
			this.length = 1;
122.3Unexpected 'this'.
			this.length = 1;
123.1Use spaces, not tabs.
			return this;
123.10Unexpected 'this'.
			return this;
124.1Use spaces, not tabs.
		}
126.1Use spaces, not tabs.
		// Handle HTML strings
127.1Use spaces, not tabs.
		if ( typeof selector === "string" ) {
128.1Use spaces, not tabs.
			// Are we dealing with HTML string or an ID?
129.1Use spaces, not tabs.
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
130.1Use spaces, not tabs.
				// Assume that strings that start and end with <> are HTML and skip the regex check
131.1Use spaces, not tabs.
				match = [ null, selector, null ];
133.1Use spaces, not tabs.
			} else {
134.1Use spaces, not tabs.
				match = quickExpr.exec( selector );
135.1Use spaces, not tabs.
			}
137.1Use spaces, not tabs.
			// Verify a match, and that no context was specified for #id
138.1Use spaces, not tabs.
			if ( match && (match[1] || !context) ) {
140.1Use spaces, not tabs.
				// HANDLE: $(html) -> $(array)
141.1Use spaces, not tabs.
				if ( match[1] ) {
142.1Use spaces, not tabs.
					context = context instanceof jQuery ? context[0] : context;
143.1Use spaces, not tabs.
					doc = ( context ? context.ownerDocument || context : document );
145.1Use spaces, not tabs.
					// If a single string is passed in and it's a single tag
146.1Use spaces, not tabs.
					// just do a createElement and skip the rest
147.1Use spaces, not tabs.
					ret = rsingleTag.exec( selector );
149.1Use spaces, not tabs.
					if ( ret ) {
150.1Use spaces, not tabs.
						if ( jQuery.isPlainObject( context ) ) {
151.1Use spaces, not tabs.
							selector = [ document.createElement( ret[1] ) ];
152.1Use spaces, not tabs.
							jQuery.fn.attr.call( selector, context, true );
154.1Use spaces, not tabs.
						} else {
155.1Use spaces, not tabs.
							selector = [ doc.createElement( ret[1] ) ];
156.1Use spaces, not tabs.
						}
158.1Use spaces, not tabs.
					} else {
159.1Use spaces, not tabs.
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
160.1Use spaces, not tabs.
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
160.78Unexpected '.'.
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
161.1Use spaces, not tabs.
					}
163.1Use spaces, not tabs.
					return jQuery.merge( this, selector );
163.26Unexpected 'this'.
					return jQuery.merge( this, selector );
165.1Use spaces, not tabs.
				// HANDLE: $("#id")
166.1Use spaces, not tabs.
				} else {
167.1Use spaces, not tabs.
					elem = document.getElementById( match[2] );
169.1Use spaces, not tabs.
					// Check parentNode to catch when Blackberry 4.6 returns
170.1Use spaces, not tabs.
					// nodes that are no longer in the document #6963
171.1Use spaces, not tabs.
					if ( elem && elem.parentNode ) {
172.1Use spaces, not tabs.
						// Handle the case where IE and Opera return items
173.1Use spaces, not tabs.
						// by name instead of ID
174.1Use spaces, not tabs.
						if ( elem.id !== match[2] ) {
175.1Use spaces, not tabs.
							return rootjQuery.find( selector );
176.1Use spaces, not tabs.
						}
178.1Use spaces, not tabs.
						// Otherwise, we inject the element directly into the jQuery object
179.1Use spaces, not tabs.
						this.length = 1;
179.6Unexpected 'this'.
						this.length = 1;
180.1Use spaces, not tabs.
						this[0] = elem;
180.6Unexpected 'this'.
						this[0] = elem;
181.1Use spaces, not tabs.
					}
183.1Use spaces, not tabs.
					this.context = document;
183.5Unexpected 'this'.
					this.context = document;
184.1Use spaces, not tabs.
					this.selector = selector;
184.5Unexpected 'this'.
					this.selector = selector;
185.1Use spaces, not tabs.
					return this;
185.12Unexpected 'this'.
					return this;
186.1Use spaces, not tabs.
				}
188.1Use spaces, not tabs.
			// HANDLE: $(expr, $(...))
189.1Use spaces, not tabs.
			} else if ( !context || context.jquery ) {
190.1Use spaces, not tabs.
				return ( context || rootjQuery ).find( selector );
190.36Unexpected '.'.
				return ( context || rootjQuery ).find( selector );
192.1Use spaces, not tabs.
			// HANDLE: $(expr, context)
193.1Use spaces, not tabs.
			// (which is just equivalent to: $(context).find(expr)
194.1Use spaces, not tabs.
			} else {
195.1Use spaces, not tabs.
				return this.constructor( context ).find( selector );
195.11Unexpected 'this'.
				return this.constructor( context ).find( selector );
196.1Use spaces, not tabs.
			}
198.1Use spaces, not tabs.
		// HANDLE: $(function)
199.1Use spaces, not tabs.
		// Shortcut for document ready
200.1Use spaces, not tabs.
		} else if ( jQuery.isFunction( selector ) ) {
200.4Unexpected 'else'.
		} else if ( jQuery.isFunction( selector ) ) {
201.1Use spaces, not tabs.
			return rootjQuery.ready( selector );
202.1Use spaces, not tabs.
		}
204.1Use spaces, not tabs.
		if ( selector.selector !== undefined ) {
205.1Use spaces, not tabs.
			this.selector = selector.selector;
205.3Unexpected 'this'.
			this.selector = selector.selector;
206.1Use spaces, not tabs.
			this.context = selector.context;
206.3Unexpected 'this'.
			this.context = selector.context;
207.1Use spaces, not tabs.
		}
209.1Use spaces, not tabs.
		return jQuery.makeArray( selector, this );
209.37Unexpected 'this'.
		return jQuery.makeArray( selector, this );
210.1Use spaces, not tabs.
	},
212.1Use spaces, not tabs.
	// Start with an empty selector
213.1Use spaces, not tabs.
	selector: "",
215.1Use spaces, not tabs.
	// The current version of jQuery being used
216.1Use spaces, not tabs.
	jquery: "1.7.1",
218.1Use spaces, not tabs.
	// The default length of a jQuery object is 0
219.1Use spaces, not tabs.
	length: 0,
221.1Use spaces, not tabs.
	// The number of elements contained in the matched element set
222.1Use spaces, not tabs.
	size: function() {
223.1Use spaces, not tabs.
		return this.length;
223.9Unexpected 'this'.
		return this.length;
224.1Use spaces, not tabs.
	},
226.1Use spaces, not tabs.
	toArray: function() {
227.1Use spaces, not tabs.
		return slice.call( this, 0 );
227.21Unexpected 'this'.
		return slice.call( this, 0 );
228.1Use spaces, not tabs.
	},
230.1Use spaces, not tabs.
	// Get the Nth element in the matched element set OR
231.1Use spaces, not tabs.
	// Get the whole matched element set as a clean array
232.1Use spaces, not tabs.
	get: function( num ) {
233.1Use spaces, not tabs.
		return num == null ?
235.1Use spaces, not tabs.
			// Return a 'clean' array
236.1Use spaces, not tabs.
			this.toArray() :
236.3Unexpected 'this'.
			this.toArray() :
238.1Use spaces, not tabs.
			// Return just the object
239.1Use spaces, not tabs.
			( num < 0 ? this[ this.length + num ] : this[ num ] );
239.15Unexpected 'this'.
			( num < 0 ? this[ this.length + num ] : this[ num ] );
239.21Unexpected 'this'.
			( num < 0 ? this[ this.length + num ] : this[ num ] );
239.43Unexpected 'this'.
			( num < 0 ? this[ this.length + num ] : this[ num ] );
240.1Use spaces, not tabs.
	},
242.1Use spaces, not tabs.
	// Take an array of elements and push it onto the stack
243.1Use spaces, not tabs.
	// (returning the new matched element set)
244.1Use spaces, not tabs.
	pushStack: function( elems, name, selector ) {
245.1Use spaces, not tabs.
		// Build a new jQuery matched element set
246.1Use spaces, not tabs.
		var ret = this.constructor();
246.12Unexpected 'this'.
		var ret = this.constructor();
248.1Use spaces, not tabs.
		if ( jQuery.isArray( elems ) ) {
249.1Use spaces, not tabs.
			push.apply( ret, elems );
251.1Use spaces, not tabs.
		} else {
252.1Use spaces, not tabs.
			jQuery.merge( ret, elems );
253.1Use spaces, not tabs.
		}
255.1Use spaces, not tabs.
		// Add the old object onto the stack (as a reference)
256.1Use spaces, not tabs.
		ret.prevObject = this;
256.19Unexpected 'this'.
		ret.prevObject = this;
258.1Use spaces, not tabs.
		ret.context = this.context;
258.16Unexpected 'this'.
		ret.context = this.context;
260.1Use spaces, not tabs.
		if ( name === "find" ) {
261.1Use spaces, not tabs.
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
261.18Unexpected 'this'.
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
261.36Unexpected 'this'.
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
262.1Use spaces, not tabs.
		} else if ( name ) {
263.1Use spaces, not tabs.
			ret.selector = this.selector + "." + name + "(" + selector + ")";
263.18Unexpected 'this'.
			ret.selector = this.selector + "." + name + "(" + selector + ")";
264.1Use spaces, not tabs.
		}
266.1Use spaces, not tabs.
		// Return the newly-formed element set
267.1Use spaces, not tabs.
		return ret;
268.1Use spaces, not tabs.
	},
270.1Use spaces, not tabs.
	// Execute a callback for every element in the matched set.
271.1Use spaces, not tabs.
	// (You can seed the arguments with an array of args, but this is
272.1Use spaces, not tabs.
	// only used internally.)
273.1Use spaces, not tabs.
	each: function( callback, args ) {
274.1Use spaces, not tabs.
		return jQuery.each( this, callback, args );
274.22Unexpected 'this'.
		return jQuery.each( this, callback, args );
275.1Use spaces, not tabs.
	},
277.1Use spaces, not tabs.
	ready: function( fn ) {
278.1Use spaces, not tabs.
		// Attach the listeners
279.1Use spaces, not tabs.
		jQuery.bindReady();
281.1Use spaces, not tabs.
		// Add the callback
282.1Use spaces, not tabs.
		readyList.add( fn );
284.1Use spaces, not tabs.
		return this;
284.9Unexpected 'this'.
		return this;
285.1Use spaces, not tabs.
	},
287.1Use spaces, not tabs.
	eq: function( i ) {
288.1Use spaces, not tabs.
		i = +i;
289.1Use spaces, not tabs.
		return i === -1 ?
290.1Use spaces, not tabs.
			this.slice( i ) :
290.3Unexpected 'this'.
			this.slice( i ) :
291.1Use spaces, not tabs.
			this.slice( i, i + 1 );
291.3Unexpected 'this'.
			this.slice( i, i + 1 );
292.1Use spaces, not tabs.
	},
294.1Use spaces, not tabs.
	first: function() {
295.1Use spaces, not tabs.
		return this.eq( 0 );
295.9Unexpected 'this'.
		return this.eq( 0 );
296.1Use spaces, not tabs.
	},
298.1Use spaces, not tabs.
	last: function() {
299.1Use spaces, not tabs.
		return this.eq( -1 );
299.9Unexpected 'this'.
		return this.eq( -1 );
300.1Use spaces, not tabs.
	},
302.1Use spaces, not tabs.
	slice: function() {
303.1Use spaces, not tabs.
		return this.pushStack( slice.apply( this, arguments ),
303.9Unexpected 'this'.
		return this.pushStack( slice.apply( this, arguments ),
303.38Unexpected 'this'.
		return this.pushStack( slice.apply( this, arguments ),
304.1Use spaces, not tabs.
			"slice", slice.call(arguments).join(",") );
305.1Use spaces, not tabs.
	},
307.1Use spaces, not tabs.
	map: function( callback ) {
308.1Use spaces, not tabs.
		return this.pushStack( jQuery.map(this, function( elem, i ) {
308.9Unexpected 'this'.
		return this.pushStack( jQuery.map(this, function( elem, i ) {
308.36Unexpected 'this'.
		return this.pushStack( jQuery.map(this, function( elem, i ) {
309.1Use spaces, not tabs.
			return callback.call( elem, i, elem );
310.1Use spaces, not tabs.
		}));
311.1Use spaces, not tabs.
	},
313.1Use spaces, not tabs.
	end: function() {
314.1Use spaces, not tabs.
		return this.prevObject || this.constructor(null);
314.9Unexpected 'this'.
		return this.prevObject || this.constructor(null);
314.28Unexpected 'this'.
		return this.prevObject || this.constructor(null);
315.1Use spaces, not tabs.
	},
317.1Use spaces, not tabs.
	// For internal use only.
318.1Use spaces, not tabs.
	// Behaves like an Array's method, not like a jQuery method.
319.1Use spaces, not tabs.
	push: push,
320.1Use spaces, not tabs.
	sort: [].sort,
320.9Unexpected '.'.
	sort: [].sort,
321.1Use spaces, not tabs.
	splice: [].splice
321.11Unexpected '.'.
	splice: [].splice
328.1Use spaces, not tabs.
	var options, name, src, copy, copyIsArray, clone,
328.12Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
328.18Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
328.23Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
328.29Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
328.42Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
328.49Expected ';' and instead saw ','.
	var options, name, src, copy, copyIsArray, clone,
329.1Use spaces, not tabs.
		target = arguments[0] || {},
329.29Expected ';' and instead saw ','.
		target = arguments[0] || {},
330.1Use spaces, not tabs.
		i = 1,
330.7Expected ';' and instead saw ','.
		i = 1,
331.1Use spaces, not tabs.
		length = arguments.length,
331.27Expected ';' and instead saw ','.
		length = arguments.length,
332.1Use spaces, not tabs.
		deep = false;
334.1Use spaces, not tabs.
	// Handle a deep copy situation
335.1Use spaces, not tabs.
	if ( typeof target === "boolean" ) {
336.1Use spaces, not tabs.
		deep = target;
337.1Use spaces, not tabs.
		target = arguments[1] || {};
338.1Use spaces, not tabs.
		// skip the boolean and the target
339.1Use spaces, not tabs.
		i = 2;
340.1Use spaces, not tabs.
	}
342.1Use spaces, not tabs.
	// Handle case when target is a string or something (possible in deep copy)
343.1Use spaces, not tabs.
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
344.1Use spaces, not tabs.
		target = {};
345.1Use spaces, not tabs.
	}
347.1Use spaces, not tabs.
	// extend jQuery itself if only one argument is passed
348.1Use spaces, not tabs.
	if ( length === i ) {
349.1Use spaces, not tabs.
		target = this;
349.11Unexpected 'this'.
		target = this;
350.1Use spaces, not tabs.
		--i;
351.1Use spaces, not tabs.
	}
353.1Unexpected 'for'.
	for ( ; i < length; i++ ) {
353.1Expected 'while (' and instead saw 'for (;'.
	for ( ; i < length; i++ ) {
353.1Use spaces, not tabs.
	for ( ; i < length; i++ ) {
354.1Use spaces, not tabs.
		// Only deal with non-null/undefined values
355.1Use spaces, not tabs.
		if ( (options = arguments[ i ]) != null ) {
356.1Use spaces, not tabs.
			// Extend the base object
357.1Use spaces, not tabs.
			for ( name in options ) {
358.1Use spaces, not tabs.
				src = target[ name ];
359.1Use spaces, not tabs.
				copy = options[ name ];
361.1Use spaces, not tabs.
				// Prevent never-ending loop
362.1Use spaces, not tabs.
				if ( target === copy ) {
363.1Use spaces, not tabs.
					continue;
364.1Use spaces, not tabs.
				}
366.1Use spaces, not tabs.
				// Recurse if we're merging plain objects or arrays
367.1Use spaces, not tabs.
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
368.1Use spaces, not tabs.
					if ( copyIsArray ) {
369.1Use spaces, not tabs.
						copyIsArray = false;
370.1Use spaces, not tabs.
						clone = src && jQuery.isArray(src) ? src : [];
372.1Use spaces, not tabs.
					} else {
373.1Use spaces, not tabs.
						clone = src && jQuery.isPlainObject(src) ? src : {};
374.1Use spaces, not tabs.
					}
376.1Use spaces, not tabs.
					// Never move original objects, clone them
377.1Use spaces, not tabs.
					target[ name ] = jQuery.extend( deep, clone, copy );
379.1Use spaces, not tabs.
				// Don't bring in undefined values
380.1Use spaces, not tabs.
				} else if ( copy !== undefined ) {
381.1Use spaces, not tabs.
					target[ name ] = copy;
382.1Use spaces, not tabs.
				}
383.1Use spaces, not tabs.
			}
384.1Use spaces, not tabs.
		}
385.1Use spaces, not tabs.
	}
387.1Use spaces, not tabs.
	// Return the modified object
388.1Use spaces, not tabs.
	return target;
392.1Use spaces, not tabs.
	noConflict: function( deep ) {
393.1Use spaces, not tabs.
		if ( window.$ === jQuery ) {
394.1Use spaces, not tabs.
			window.$ = _$;
395.1Use spaces, not tabs.
		}
397.1Use spaces, not tabs.
		if ( deep && window.jQuery === jQuery ) {
398.1Use spaces, not tabs.
			window.jQuery = _jQuery;
399.1Use spaces, not tabs.
		}
401.1Use spaces, not tabs.
		return jQuery;
402.1Use spaces, not tabs.
	},
404.1Use spaces, not tabs.
	// Is the DOM ready to be used? Set to true once it occurs.
405.1Use spaces, not tabs.
	isReady: false,
407.1Use spaces, not tabs.
	// A counter to track how many items to wait for before
408.1Use spaces, not tabs.
	// the ready event fires. See #6781
409.1Use spaces, not tabs.
	readyWait: 1,
411.1Use spaces, not tabs.
	// Hold (or release) the ready event
412.1Use spaces, not tabs.
	holdReady: function( hold ) {
413.1Use spaces, not tabs.
		if ( hold ) {
414.1Use spaces, not tabs.
			jQuery.readyWait++;
415.1Use spaces, not tabs.
		} else {
416.1Use spaces, not tabs.
			jQuery.ready( true );
417.1Use spaces, not tabs.
		}
418.1Use spaces, not tabs.
	},
420.1Use spaces, not tabs.
	// Handle when the DOM is ready
421.1Use spaces, not tabs.
	ready: function( wait ) {
422.1Use spaces, not tabs.
		// Either a released hold or an DOMready/load event and not yet ready
423.1Use spaces, not tabs.
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
424.1Use spaces, not tabs.
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
425.1Use spaces, not tabs.
			if ( !document.body ) {
426.1Use spaces, not tabs.
				return setTimeout( jQuery.ready, 1 );
427.1Use spaces, not tabs.
			}
429.1Use spaces, not tabs.
			// Remember that the DOM is ready
430.1Use spaces, not tabs.
			jQuery.isReady = true;
432.1Use spaces, not tabs.
			// If a normal DOM Ready event fired, decrement, and wait if need be
433.1Use spaces, not tabs.
			if ( wait !== true && --jQuery.readyWait > 0 ) {
434.1Use spaces, not tabs.
				return;
435.1Use spaces, not tabs.
			}
437.1Use spaces, not tabs.
			// If there are functions bound, to execute
438.1Use spaces, not tabs.
			readyList.fireWith( document, [ jQuery ] );
440.1Use spaces, not tabs.
			// Trigger any bound ready events
441.1Use spaces, not tabs.
			if ( jQuery.fn.trigger ) {
442.1Use spaces, not tabs.
				jQuery( document ).trigger( "ready" ).off( "ready" );
443.1Use spaces, not tabs.
			}
444.1Use spaces, not tabs.
		}
445.1Use spaces, not tabs.
	},
447.1Use spaces, not tabs.
	bindReady: function() {
448.1Use spaces, not tabs.
		if ( readyList ) {
449.1Use spaces, not tabs.
			return;
450.1Use spaces, not tabs.
		}
452.1Use spaces, not tabs.
		readyList = jQuery.Callbacks( "once memory" );
454.1Use spaces, not tabs.
		// Catch cases where $(document).ready() is called after the
455.1Use spaces, not tabs.
		// browser event has already occurred.
456.1Use spaces, not tabs.
		if ( document.readyState === "complete" ) {
457.1Use spaces, not tabs.
			// Handle it asynchronously to allow scripts the opportunity to delay ready
458.1Use spaces, not tabs.
			return setTimeout( jQuery.ready, 1 );
459.1Use spaces, not tabs.
		}
461.1Use spaces, not tabs.
		// Mozilla, Opera and webkit nightlies currently support this event
462.1Use spaces, not tabs.
		if ( document.addEventListener ) {
463.1Use spaces, not tabs.
			// Use the handy event callback
464.1Use spaces, not tabs.
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
466.1Use spaces, not tabs.
			// A fallback to window.onload, that will always work
467.1Use spaces, not tabs.
			window.addEventListener( "load", jQuery.ready, false );
469.1Use spaces, not tabs.
		// If IE event model is used
470.1Use spaces, not tabs.
		} else if ( document.attachEvent ) {
471.1Use spaces, not tabs.
			// ensure firing before onload,
472.1Use spaces, not tabs.
			// maybe late but safe also for iframes
473.1Use spaces, not tabs.
			document.attachEvent( "onreadystatechange", DOMContentLoaded );
475.1Use spaces, not tabs.
			// A fallback to window.onload, that will always work
476.1Use spaces, not tabs.
			window.attachEvent( "onload", jQuery.ready );
478.1Use spaces, not tabs.
			// If IE and not a frame
479.1Use spaces, not tabs.
			// continually check to see if the document is ready
480.1Use spaces, not tabs.
			var toplevel = false;
482.1Use spaces, not tabs.
			try {
483.1Use spaces, not tabs.
				toplevel = window.frameElement == null;
484.1Use spaces, not tabs.
			} catch(e) {}
486.1Use spaces, not tabs.
			if ( document.documentElement.doScroll && toplevel ) {
487.1Use spaces, not tabs.
				doScrollCheck();
488.1Use spaces, not tabs.
			}
489.1Use spaces, not tabs.
		}
490.1Use spaces, not tabs.
	},
492.1Use spaces, not tabs.
	// See test/unit/core.js for details concerning isFunction.
493.1Use spaces, not tabs.
	// Since version 1.3, DOM methods and functions like alert
494.1Use spaces, not tabs.
	// aren't supported. They return false on IE (#2968).
495.1Use spaces, not tabs.
	isFunction: function( obj ) {
496.1Use spaces, not tabs.
		return jQuery.type(obj) === "function";
497.1Use spaces, not tabs.
	},
499.1Use spaces, not tabs.
	isArray: Array.isArray || function( obj ) {
500.1Use spaces, not tabs.
		return jQuery.type(obj) === "array";
501.1Use spaces, not tabs.
	},
503.1Use spaces, not tabs.
	// A crude way of determining if an object is a window
504.1Use spaces, not tabs.
	isWindow: function( obj ) {
505.1Use spaces, not tabs.
		return obj && typeof obj === "object" && "setInterval" in obj;
506.1Use spaces, not tabs.
	},
508.1Use spaces, not tabs.
	isNumeric: function( obj ) {
509.1Use spaces, not tabs.
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
510.1Use spaces, not tabs.
	},
512.1Use spaces, not tabs.
	type: function( obj ) {
513.1Use spaces, not tabs.
		return obj == null ?
514.1Use spaces, not tabs.
			String( obj ) :
515.1Use spaces, not tabs.
			class2type[ toString.call(obj) ] || "object";
516.1Use spaces, not tabs.
	},
518.1Use spaces, not tabs.
	isPlainObject: function( obj ) {
519.1Use spaces, not tabs.
		// Must be an Object.
520.1Use spaces, not tabs.
		// Because of IE, we also have to check the presence of the constructor property.
521.1Use spaces, not tabs.
		// Make sure that DOM nodes and window objects don't pass through, as well
522.1Use spaces, not tabs.
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
523.1Use spaces, not tabs.
			return false;
524.1Use spaces, not tabs.
		}
526.1Use spaces, not tabs.
		try {
527.1Use spaces, not tabs.
			// Not own constructor property must be Object
528.1Use spaces, not tabs.
			if ( obj.constructor &&
529.1Use spaces, not tabs.
				!hasOwn.call(obj, "constructor") &&
530.1Use spaces, not tabs.
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
531.1Use spaces, not tabs.
				return false;
532.1Use spaces, not tabs.
			}
533.1Use spaces, not tabs.
		} catch ( e ) {
534.1Use spaces, not tabs.
			// IE8,9 Will throw exceptions on certain host objects #9897
535.1Use spaces, not tabs.
			return false;
536.1Use spaces, not tabs.
		}
538.1Use spaces, not tabs.
		// Own properties are enumerated firstly, so to speed up,
539.1Use spaces, not tabs.
		// if last one is own, then all properties are own.
541.1Use spaces, not tabs.
		var key;
542.1Use spaces, not tabs.
		for ( key in obj ) {}
544.1Use spaces, not tabs.
		return key === undefined || hasOwn.call( obj, key );
545.1Use spaces, not tabs.
	},
547.1Use spaces, not tabs.
	isEmptyObject: function( obj ) {
548.1Use spaces, not tabs.
		for ( var name in obj ) {
549.1Use spaces, not tabs.
			return false;
550.1Use spaces, not tabs.
		}
551.1Use spaces, not tabs.
		return true;
552.1Use spaces, not tabs.
	},
554.1Use spaces, not tabs.
	error: function( msg ) {
555.1Use spaces, not tabs.
		throw new Error( msg );
556.1Use spaces, not tabs.
	},
558.1Use spaces, not tabs.
	parseJSON: function( data ) {
559.1Use spaces, not tabs.
		if ( typeof data !== "string" || !data ) {
560.1Use spaces, not tabs.
			return null;
561.1Use spaces, not tabs.
		}
563.1Use spaces, not tabs.
		// Make sure leading/trailing whitespace is removed (IE can't handle it)
564.1Use spaces, not tabs.
		data = jQuery.trim( data );
566.1Use spaces, not tabs.
		// Attempt to parse using the native JSON parser first
567.1Use spaces, not tabs.
		if ( window.JSON && window.JSON.parse ) {
568.1Use spaces, not tabs.
			return window.JSON.parse( data );
569.1Use spaces, not tabs.
		}
571.1Use spaces, not tabs.
		// Make sure the incoming data is actual JSON
572.1Use spaces, not tabs.
		// Logic borrowed from http://json.org/json2.js
573.1Use spaces, not tabs.
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
574.1Use spaces, not tabs.
			.replace( rvalidtokens, "]" )
575.1Use spaces, not tabs.
			.replace( rvalidbraces, "")) ) {
577.1Use spaces, not tabs.
			return ( new Function( "return " + data ) )();
579.1Use spaces, not tabs.
		}
580.1Use spaces, not tabs.
		jQuery.error( "Invalid JSON: " + data );
581.1Use spaces, not tabs.
	},
583.1Use spaces, not tabs.
	// Cross-browser xml parsing
584.1Use spaces, not tabs.
	parseXML: function( data ) {
585.1Use spaces, not tabs.
		var xml, tmp;
586.1Use spaces, not tabs.
		try {
587.1Use spaces, not tabs.
			if ( window.DOMParser ) { // Standard
588.1Use spaces, not tabs.
				tmp = new DOMParser();
589.1Use spaces, not tabs.
				xml = tmp.parseFromString( data , "text/xml" );
590.1Use spaces, not tabs.
			} else { // IE
591.1Use spaces, not tabs.
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
592.1Use spaces, not tabs.
				xml.async = "false";
593.1Use spaces, not tabs.
				xml.loadXML( data );
594.1Use spaces, not tabs.
			}
595.1Use spaces, not tabs.
		} catch( e ) {
596.1Use spaces, not tabs.
			xml = undefined;
597.1Use spaces, not tabs.
		}
598.1Use spaces, not tabs.
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
599.1Use spaces, not tabs.
			jQuery.error( "Invalid XML: " + data );
600.1Use spaces, not tabs.
		}
601.1Use spaces, not tabs.
		return xml;
602.1Use spaces, not tabs.
	},
604.1Use spaces, not tabs.
	noop: function() {},
606.1Use spaces, not tabs.
	// Evaluates a script in a global context
607.1Use spaces, not tabs.
	// Workarounds based on findings by Jim Driscoll
608.1Use spaces, not tabs.
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
609.1Use spaces, not tabs.
	globalEval: function( data ) {
610.1Use spaces, not tabs.
		if ( data && rnotwhite.test( data ) ) {
611.1Use spaces, not tabs.
			// We use execScript on Internet Explorer
612.1Use spaces, not tabs.
			// We use an anonymous function so that context is window
613.1Use spaces, not tabs.
			// rather than jQuery in Firefox
614.1Use spaces, not tabs.
			( window.execScript || function( data ) {
615.1Use spaces, not tabs.
				window[ "eval" ].call( window, data );
616.1Use spaces, not tabs.
			} )( data );
617.1Use spaces, not tabs.
		}
618.1Use spaces, not tabs.
	},
620.1Use spaces, not tabs.
	// Convert dashed to camelCase; used by the css and data modules
621.1Use spaces, not tabs.
	// Microsoft forgot to hump their vendor prefix (#9572)
622.1Use spaces, not tabs.
	camelCase: function( string ) {
623.1Use spaces, not tabs.
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
624.1Use spaces, not tabs.
	},
626.1Use spaces, not tabs.
	nodeName: function( elem, name ) {
627.1Use spaces, not tabs.
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
628.1Use spaces, not tabs.
	},
630.1Use spaces, not tabs.
	// args is for internal usage only
631.1Use spaces, not tabs.
	each: function( object, callback, args ) {
632.1Use spaces, not tabs.
		var name, i = 0,
633.1Use spaces, not tabs.
			length = object.length,
634.1Use spaces, not tabs.
			isObj = length === undefined || jQuery.isFunction( object );
636.1Use spaces, not tabs.
		if ( args ) {
637.1Use spaces, not tabs.
			if ( isObj ) {
638.1Use spaces, not tabs.
				for ( name in object ) {
639.1Use spaces, not tabs.
					if ( callback.apply( object[ name ], args ) === false ) {
640.1Use spaces, not tabs.
						break;
641.1Use spaces, not tabs.
					}
642.1Use spaces, not tabs.
				}
643.1Use spaces, not tabs.
			} else {
644.1Use spaces, not tabs.
				for ( ; i < length; ) {
645.1Use spaces, not tabs.
					if ( callback.apply( object[ i++ ], args ) === false ) {
646.1Use spaces, not tabs.
						break;
647.1Use spaces, not tabs.
					}
648.1Use spaces, not tabs.
				}
649.1Use spaces, not tabs.
			}
651.1Use spaces, not tabs.
		// A special, fast, case for the most common use of each
652.1Use spaces, not tabs.
		} else {
653.1Use spaces, not tabs.
			if ( isObj ) {
654.1Use spaces, not tabs.
				for ( name in object ) {
655.1Use spaces, not tabs.
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
656.1Use spaces, not tabs.
						break;
657.1Use spaces, not tabs.
					}
658.1Use spaces, not tabs.
				}
659.1Use spaces, not tabs.
			} else {
660.1Use spaces, not tabs.
				for ( ; i < length; ) {
661.1Use spaces, not tabs.
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
662.1Use spaces, not tabs.
						break;
663.1Use spaces, not tabs.
					}
664.1Use spaces, not tabs.
				}
665.1Use spaces, not tabs.
			}
666.1Use spaces, not tabs.
		}
668.1Use spaces, not tabs.
		return object;
669.1Use spaces, not tabs.
	},
671.1Use spaces, not tabs.
	// Use native String.trim function wherever possible
672.1Use spaces, not tabs.
	trim: trim ?
673.1Use spaces, not tabs.
		function( text ) {
674.1Use spaces, not tabs.
			return text == null ?
675.1Use spaces, not tabs.
				"" :
676.1Use spaces, not tabs.
				trim.call( text );
677.1Use spaces, not tabs.
		} :
679.1Use spaces, not tabs.
		// Otherwise use our own trimming functionality
680.1Use spaces, not tabs.
		function( text ) {
681.1Use spaces, not tabs.
			return text == null ?
682.1Use spaces, not tabs.
				"" :
683.1Use spaces, not tabs.
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
684.1Use spaces, not tabs.
		},
686.1Use spaces, not tabs.
	// results is for internal usage only
687.1Use spaces, not tabs.
	makeArray: function( array, results ) {
688.1Use spaces, not tabs.
		var ret = results || [];
690.1Use spaces, not tabs.
		if ( array != null ) {
691.1Use spaces, not tabs.
			// The window, strings (and functions) also have 'length'
692.1Use spaces, not tabs.
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
693.1Use spaces, not tabs.
			var type = jQuery.type( array );
695.1Use spaces, not tabs.
			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
696.1Use spaces, not tabs.
				push.call( ret, array );
697.1Use spaces, not tabs.
			} else {
698.1Use spaces, not tabs.
				jQuery.merge( ret, array );
699.1Use spaces, not tabs.
			}
700.1Use spaces, not tabs.
		}
702.1Use spaces, not tabs.
		return ret;
703.1Use spaces, not tabs.
	},
705.1Use spaces, not tabs.
	inArray: function( elem, array, i ) {
706.1Use spaces, not tabs.
		var len;
708.1Use spaces, not tabs.
		if ( array ) {
709.1Use spaces, not tabs.
			if ( indexOf ) {
710.1Use spaces, not tabs.
				return indexOf.call( array, elem, i );
711.1Use spaces, not tabs.
			}
713.1Use spaces, not tabs.
			len = array.length;
714.1Use spaces, not tabs.
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
716.1Use spaces, not tabs.
			for ( ; i < len; i++ ) {
717.1Use spaces, not tabs.
				// Skip accessing in sparse arrays
718.1Use spaces, not tabs.
				if ( i in array && array[ i ] === elem ) {
719.1Use spaces, not tabs.
					return i;
720.1Use spaces, not tabs.
				}
721.1Use spaces, not tabs.
			}
722.1Use spaces, not tabs.
		}
724.1Use spaces, not tabs.
		return -1;
725.1Use spaces, not tabs.
	},
727.1Use spaces, not tabs.
	merge: function( first, second ) {
728.1Use spaces, not tabs.
		var i = first.length,
729.1Use spaces, not tabs.
			j = 0;
731.1Use spaces, not tabs.
		if ( typeof second.length === "number" ) {
732.1Use spaces, not tabs.
			for ( var l = second.length; j < l; j++ ) {
733.1Use spaces, not tabs.
				first[ i++ ] = second[ j ];
734.1Use spaces, not tabs.
			}
736.1Use spaces, not tabs.
		} else {
737.1Use spaces, not tabs.
			while ( second[j] !== undefined ) {
738.1Use spaces, not tabs.
				first[ i++ ] = second[ j++ ];
739.1Use spaces, not tabs.
			}
740.1Use spaces, not tabs.
		}
742.1Use spaces, not tabs.
		first.length = i;
744.1Use spaces, not tabs.
		return first;
745.1Use spaces, not tabs.
	},
747.1Use spaces, not tabs.
	grep: function( elems, callback, inv ) {
748.1Use spaces, not tabs.
		var ret = [], retVal;
749.1Use spaces, not tabs.
		inv = !!inv;
751.1Use spaces, not tabs.
		// Go through the array, only saving the items
752.1Use spaces, not tabs.
		// that pass the validator function
753.1Use spaces, not tabs.
		for ( var i = 0, length = elems.length; i < length; i++ ) {
754.1Use spaces, not tabs.
			retVal = !!callback( elems[ i ], i );
755.1Use spaces, not tabs.
			if ( inv !== retVal ) {
756.1Use spaces, not tabs.
				ret.push( elems[ i ] );
757.1Use spaces, not tabs.
			}
758.1Use spaces, not tabs.
		}
760.1Use spaces, not tabs.
		return ret;
761.1Use spaces, not tabs.
	},
763.1Use spaces, not tabs.
	// arg is for internal usage only
764.1Use spaces, not tabs.
	map: function( elems, callback, arg ) {
765.1Use spaces, not tabs.
		var value, key, ret = [],
766.1Use spaces, not tabs.
			i = 0,
767.1Use spaces, not tabs.
			length = elems.length,
768.1Use spaces, not tabs.
			// jquery objects are treated as arrays
769.1Use spaces, not tabs.
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;
771.1Use spaces, not tabs.
		// Go through the array, translating each of the items to their
772.1Use spaces, not tabs.
		if ( isArray ) {
773.1Use spaces, not tabs.
			for ( ; i < length; i++ ) {
774.1Use spaces, not tabs.
				value = callback( elems[ i ], i, arg );
776.1Use spaces, not tabs.
				if ( value != null ) {
777.1Use spaces, not tabs.
					ret[ ret.length ] = value;
778.1Use spaces, not tabs.
				}
779.1Use spaces, not tabs.
			}
781.1Use spaces, not tabs.
		// Go through every key on the object,
782.1Use spaces, not tabs.
		} else {
783.1Use spaces, not tabs.
			for ( key in elems ) {
784.1Use spaces, not tabs.
				value = callback( elems[ key ], key, arg );
786.1Use spaces, not tabs.
				if ( value != null ) {
787.1Use spaces, not tabs.
					ret[ ret.length ] = value;
788.1Use spaces, not tabs.
				}
789.1Use spaces, not tabs.
			}
790.1Use spaces, not tabs.
		}
792.1Use spaces, not tabs.
		// Flatten any nested arrays
793.1Use spaces, not tabs.
		return ret.concat.apply( [], ret );
794.1Use spaces, not tabs.
	},
796.1Use spaces, not tabs.
	// A global GUID counter for objects
797.1Use spaces, not tabs.
	guid: 1,
799.1Use spaces, not tabs.
	// Bind a function to a context, optionally partially applying any
800.1Use spaces, not tabs.
	// arguments.
801.1Use spaces, not tabs.
	proxy: function( fn, context ) {
802.1Use spaces, not tabs.
		if ( typeof context === "string" ) {
803.1Use spaces, not tabs.
			var tmp = fn[ context ];
804.1Use spaces, not tabs.
			context = fn;
805.1Use spaces, not tabs.
			fn = tmp;
806.1Use spaces, not tabs.
		}
808.1Use spaces, not tabs.
		// Quick check to determine if target is callable, in the spec
809.1Use spaces, not tabs.
		// this throws a TypeError, but we will just return undefined.
810.1Use spaces, not tabs.
		if ( !jQuery.isFunction( fn ) ) {
811.1Use spaces, not tabs.
			return undefined;
812.1Use spaces, not tabs.
		}
814.1Use spaces, not tabs.
		// Simulated bind
815.1Use spaces, not tabs.
		var args = slice.call( arguments, 2 ),
816.1Use spaces, not tabs.
			proxy = function() {
817.1Use spaces, not tabs.
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
818.1Use spaces, not tabs.
			};
820.1Use spaces, not tabs.
		// Set the guid of unique handler to the same of original handler, so it can be removed
821.1Use spaces, not tabs.
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
823.1Use spaces, not tabs.
		return proxy;
824.1Use spaces, not tabs.
	},
826.1Use spaces, not tabs.
	// Mutifunctional method to get and set values to a collection
827.1Use spaces, not tabs.
	// The value/s can optionally be executed if it's a function
828.1Use spaces, not tabs.
	access: function( elems, key, value, exec, fn, pass ) {
829.1Use spaces, not tabs.
		var length = elems.length;
831.1Use spaces, not tabs.
		// Setting many attributes
832.1Use spaces, not tabs.
		if ( typeof key === "object" ) {
833.1Use spaces, not tabs.
			for ( var k in key ) {
834.1Use spaces, not tabs.
				jQuery.access( elems, k, key[k], exec, fn, value );
835.1Use spaces, not tabs.
			}
836.1Use spaces, not tabs.
			return elems;
837.1Use spaces, not tabs.
		}
839.1Use spaces, not tabs.
		// Setting one attribute
840.1Use spaces, not tabs.
		if ( value !== undefined ) {
841.1Use spaces, not tabs.
			// Optionally, function values get executed if exec is true
842.1Use spaces, not tabs.
			exec = !pass && exec && jQuery.isFunction(value);
844.1Use spaces, not tabs.
			for ( var i = 0; i < length; i++ ) {
845.1Use spaces, not tabs.
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
846.1Use spaces, not tabs.
			}
848.1Use spaces, not tabs.
			return elems;
849.1Use spaces, not tabs.
		}
851.1Use spaces, not tabs.
		// Getting an attribute
852.1Use spaces, not tabs.
		return length ? fn( elems[0], key ) : undefined;
853.1Use spaces, not tabs.
	},
855.1Use spaces, not tabs.
	now: function() {
856.1Use spaces, not tabs.
		return ( new Date() ).getTime();
857.1Use spaces, not tabs.
	},
859.1Use spaces, not tabs.
	// Use of jQuery.browser is frowned upon.
860.1Use spaces, not tabs.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
861.1Use spaces, not tabs.
	uaMatch: function( ua ) {
862.1Use spaces, not tabs.
		ua = ua.toLowerCase();
864.1Use spaces, not tabs.
		var match = rwebkit.exec( ua ) ||
865.1Use spaces, not tabs.
			ropera.exec( ua ) ||
866.1Use spaces, not tabs.
			rmsie.exec( ua ) ||
867.1Use spaces, not tabs.
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
868.1Use spaces, not tabs.
			[];
870.1Use spaces, not tabs.
		return { browser: match[1] || "", version: match[2] || "0" };
871.1Use spaces, not tabs.
	},
873.1Use spaces, not tabs.
	sub: function() {
874.1Use spaces, not tabs.
		function jQuerySub( selector, context ) {
875.1Use spaces, not tabs.
			return new jQuerySub.fn.init( selector, context );
876.1Use spaces, not tabs.
		}
877.1Use spaces, not tabs.
		jQuery.extend( true, jQuerySub, this );
878.1Use spaces, not tabs.
		jQuerySub.superclass = this;
879.1Use spaces, not tabs.
		jQuerySub.fn = jQuerySub.prototype = this();
880.1Use spaces, not tabs.
		jQuerySub.fn.constructor = jQuerySub;
881.1Use spaces, not tabs.
		jQuerySub.sub = this.sub;
882.1Use spaces, not tabs.
		jQuerySub.fn.init = function init( selector, context ) {
883.1Use spaces, not tabs.
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
884.1Use spaces, not tabs.
				context = jQuerySub( context );
885.1Use spaces, not tabs.
			}
887.1Use spaces, not tabs.
			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
888.1Use spaces, not tabs.
		};
889.1Use spaces, not tabs.
		jQuerySub.fn.init.prototype = jQuerySub.fn;
890.1Use spaces, not tabs.
		var rootjQuerySub = jQuerySub(document);
891.1Use spaces, not tabs.
		return jQuerySub;
892.1Use spaces, not tabs.
	},
894.1Use spaces, not tabs.
	browser: {}
899.1Use spaces, not tabs.
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
904.1Use spaces, not tabs.
	jQuery.browser[ browserMatch.browser ] = true;
905.1Use spaces, not tabs.
	jQuery.browser.version = browserMatch.version;
910.1Use spaces, not tabs.
	jQuery.browser.safari = true;
915.1Use spaces, not tabs.
	trimLeft = /^[\s\xA0]+/;
916.1Use spaces, not tabs.
	trimRight = /[\s\xA0]+$/;
924.1Use spaces, not tabs.
	DOMContentLoaded = function() {
925.1Use spaces, not tabs.
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
926.1Use spaces, not tabs.
		jQuery.ready();
927.1Use spaces, not tabs.
	};
930.1Use spaces, not tabs.
	DOMContentLoaded = function() {
931.1Use spaces, not tabs.
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
932.1Use spaces, not tabs.
		if ( document.readyState === "complete" ) {
933.1Use spaces, not tabs.
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
934.1Use spaces, not tabs.
			jQuery.ready();
935.1Use spaces, not tabs.
		}
936.1Use spaces, not tabs.
	};
941.1Use spaces, not tabs.
	if ( jQuery.isReady ) {
942.1Use spaces, not tabs.
		return;
943.1Use spaces, not tabs.
	}
945.1Use spaces, not tabs.
	try {
946.1Use spaces, not tabs.
		// If IE is used, use the trick by Diego Perini
947.1Use spaces, not tabs.
		// http://javascript.nwbox.com/IEContentLoaded/
948.1Use spaces, not tabs.
		document.documentElement.doScroll("left");
949.1Use spaces, not tabs.
	} catch(e) {
950.1Use spaces, not tabs.
		setTimeout( doScrollCheck, 1 );
951.1Use spaces, not tabs.
		return;
952.1Use spaces, not tabs.
	}
954.1Use spaces, not tabs.
	// and execute any waiting functions
955.1Use spaces, not tabs.
	jQuery.ready();
968.1Use spaces, not tabs.
	var object = flagsCache[ flags ] = {},
969.1Use spaces, not tabs.
		i, length;
970.1Use spaces, not tabs.
	flags = flags.split( /\s+/ );
971.1Use spaces, not tabs.
	for ( i = 0, length = flags.length; i < length; i++ ) {
972.1Use spaces, not tabs.
		object[ flags[i] ] = true;
973.1Use spaces, not tabs.
	}
974.1Use spaces, not tabs.
	return object;
980.3Use spaces, not tabs.
 *	flags:	an optional list of space-separated flags that will change how
981.3Use spaces, not tabs.
 *			the callback list behaves
988.3Use spaces, not tabs.
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
990.3Use spaces, not tabs.
 *	memory:			will keep track of previous values and will call any callback added
991.3Use spaces, not tabs.
 *					after the list has been fired right away with the latest "memorized"
992.3Use spaces, not tabs.
 *					values (like a Deferred)
994.3Use spaces, not tabs.
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
996.3Use spaces, not tabs.
 *	stopOnFalse:	interrupt callings when a callback returns false
1001.1Use spaces, not tabs.
	// Convert flags from String-formatted to Object-formatted
1002.1Use spaces, not tabs.
	// (we check in cache first)
1003.1Use spaces, not tabs.
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};
1005.1Use spaces, not tabs.
	var // Actual callback list
1006.1Use spaces, not tabs.
		list = [],
1007.1Use spaces, not tabs.
		// Stack of fire calls for repeatable lists
1008.1Use spaces, not tabs.
		stack = [],
1009.1Use spaces, not tabs.
		// Last fire value (for non-forgettable lists)
1010.1Use spaces, not tabs.
		memory,
1011.1Use spaces, not tabs.
		// Flag to know if list is currently firing
1012.1Use spaces, not tabs.
		firing,
1013.1Use spaces, not tabs.
		// First callback to fire (used internally by add and fireWith)
1014.1Use spaces, not tabs.
		firingStart,
1015.1Use spaces, not tabs.
		// End of the loop when firing
1016.1Use spaces, not tabs.
		firingLength,
1017.1Use spaces, not tabs.
		// Index of currently firing callback (modified by remove if needed)
1018.1Use spaces, not tabs.
		firingIndex,
1019.1Use spaces, not tabs.
		// Add one or several callbacks to the list
1020.1Use spaces, not tabs.
		add = function( args ) {
1021.1Use spaces, not tabs.
			var i,
1022.1Use spaces, not tabs.
				length,
1023.1Use spaces, not tabs.
				elem,
1024.1Use spaces, not tabs.
				type,
1025.1Use spaces, not tabs.
				actual;
1026.1Use spaces, not tabs.
			for ( i = 0, length = args.length; i < length; i++ ) {
1027.1Use spaces, not tabs.
				elem = args[ i ];
1028.1Use spaces, not tabs.
				type = jQuery.type( elem );
1029.1Use spaces, not tabs.
				if ( type === "array" ) {
1030.1Use spaces, not tabs.
					// Inspect recursively
1031.1Use spaces, not tabs.
					add( elem );
1032.1Use spaces, not tabs.
				} else if ( type === "function" ) {
1033.1Use spaces, not tabs.
					// Add if not in unique mode and callback is not in
1034.1Use spaces, not tabs.
					if ( !flags.unique || !self.has( elem ) ) {
1035.1Use spaces, not tabs.
						list.push( elem );
1036.1Use spaces, not tabs.
					}
1037.1Use spaces, not tabs.
				}
1038.1Use spaces, not tabs.
			}
1039.1Use spaces, not tabs.
		},
1040.1Use spaces, not tabs.
		// Fire callbacks
1041.1Use spaces, not tabs.
		fire = function( context, args ) {
1042.1Use spaces, not tabs.
			args = args || [];
1043.1Use spaces, not tabs.
			memory = !flags.memory || [ context, args ];
1044.1Use spaces, not tabs.
			firing = true;
1045.1Use spaces, not tabs.
			firingIndex = firingStart || 0;
1046.1Use spaces, not tabs.
			firingStart = 0;
1047.1Use spaces, not tabs.
			firingLength = list.length;
1048.1Use spaces, not tabs.
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
1049.1Use spaces, not tabs.
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
1050.1Use spaces, not tabs.
					memory = true; // Mark as halted
1051.1Use spaces, not tabs.
					break;
1052.1Use spaces, not tabs.
				}
1053.1Use spaces, not tabs.
			}
1054.1Use spaces, not tabs.
			firing = false;
1055.1Use spaces, not tabs.
			if ( list ) {
1056.1Use spaces, not tabs.
				if ( !flags.once ) {
1057.1Use spaces, not tabs.
					if ( stack && stack.length ) {
1058.1Use spaces, not tabs.
						memory = stack.shift();
1059.1Use spaces, not tabs.
						self.fireWith( memory[ 0 ], memory[ 1 ] );
1060.1Use spaces, not tabs.
					}
1061.1Use spaces, not tabs.
				} else if ( memory === true ) {
1062.1Use spaces, not tabs.
					self.disable();
1063.1Use spaces, not tabs.
				} else {
1064.1Use spaces, not tabs.
					list = [];
1065.1Use spaces, not tabs.
				}
1066.1Use spaces, not tabs.
			}
1067.1Use spaces, not tabs.
		},
1068.1Use spaces, not tabs.
		// Actual Callbacks object
1069.1Use spaces, not tabs.
		self = {
1070.1Use spaces, not tabs.
			// Add a callback or a collection of callbacks to the list
1071.1Use spaces, not tabs.
			add: function() {
1072.1Use spaces, not tabs.
				if ( list ) {
1073.1Use spaces, not tabs.
					var length = list.length;
1074.1Use spaces, not tabs.
					add( arguments );
1075.1Use spaces, not tabs.
					// Do we need to add the callbacks to the
1076.1Use spaces, not tabs.
					// current firing batch?
1077.1Use spaces, not tabs.
					if ( firing ) {
1078.1Use spaces, not tabs.
						firingLength = list.length;
1079.1Use spaces, not tabs.
					// With memory, if we're not firing then
1080.1Use spaces, not tabs.
					// we should call right away, unless previous
1081.1Use spaces, not tabs.
					// firing was halted (stopOnFalse)
1082.1Use spaces, not tabs.
					} else if ( memory && memory !== true ) {
1083.1Use spaces, not tabs.
						firingStart = length;
1084.1Use spaces, not tabs.
						fire( memory[ 0 ], memory[ 1 ] );
1085.1Use spaces, not tabs.
					}
1086.1Use spaces, not tabs.
				}
1087.1Use spaces, not tabs.
				return this;
1088.1Use spaces, not tabs.
			},
1089.1Use spaces, not tabs.
			// Remove a callback from the list
1090.1Use spaces, not tabs.
			remove: function() {
1091.1Use spaces, not tabs.
				if ( list ) {
1092.1Use spaces, not tabs.
					var args = arguments,
1093.1Use spaces, not tabs.
						argIndex = 0,
1094.1Use spaces, not tabs.
						argLength = args.length;
1095.1Use spaces, not tabs.
					for ( ; argIndex < argLength ; argIndex++ ) {
1096.1Use spaces, not tabs.
						for ( var i = 0; i < list.length; i++ ) {
1097.1Use spaces, not tabs.
							if ( args[ argIndex ] === list[ i ] ) {
1098.1Use spaces, not tabs.
								// Handle firingIndex and firingLength
1099.1Use spaces, not tabs.
								if ( firing ) {
1100.1Use spaces, not tabs.
									if ( i <= firingLength ) {
1101.1Use spaces, not tabs.
										firingLength--;
1102.1Use spaces, not tabs.
										if ( i <= firingIndex ) {
1103.1Use spaces, not tabs.
											firingIndex--;
1104.1Use spaces, not tabs.
										}
1105.1Use spaces, not tabs.
									}
1106.1Use spaces, not tabs.
								}
1107.1Use spaces, not tabs.
								// Remove the element
1108.1Use spaces, not tabs.
								list.splice( i--, 1 );
1109.1Use spaces, not tabs.
								// If we have some unicity property then
1110.1Use spaces, not tabs.
								// we only need to do this once
1111.1Use spaces, not tabs.
								if ( flags.unique ) {
1112.1Use spaces, not tabs.
									break;
1113.1Use spaces, not tabs.
								}
1114.1Use spaces, not tabs.
							}
1115.1Use spaces, not tabs.
						}
1116.1Use spaces, not tabs.
					}
1117.1Use spaces, not tabs.
				}
1118.1Use spaces, not tabs.
				return this;
1119.1Use spaces, not tabs.
			},
1120.1Use spaces, not tabs.
			// Control if a given callback is in the list
1121.1Use spaces, not tabs.
			has: function( fn ) {
1122.1Use spaces, not tabs.
				if ( list ) {
1123.1Use spaces, not tabs.
					var i = 0,
1124.1Use spaces, not tabs.
						length = list.length;
1125.1Use spaces, not tabs.
					for ( ; i < length; i++ ) {
1126.1Use spaces, not tabs.
						if ( fn === list[ i ] ) {
1127.1Use spaces, not tabs.
							return true;
1128.1Use spaces, not tabs.
						}
1129.1Use spaces, not tabs.
					}
1130.1Use spaces, not tabs.
				}
1131.1Use spaces, not tabs.
				return false;
1132.1Use spaces, not tabs.
			},
1133.1Use spaces, not tabs.
			// Remove all callbacks from the list
1134.1Use spaces, not tabs.
			empty: function() {
1135.1Use spaces, not tabs.
				list = [];
1136.1Use spaces, not tabs.
				return this;
1137.1Use spaces, not tabs.
			},
1138.1Use spaces, not tabs.
			// Have the list do nothing anymore
1139.1Use spaces, not tabs.
			disable: function() {
1140.1Use spaces, not tabs.
				list = stack = memory = undefined;
1141.1Use spaces, not tabs.
				return this;
1142.1Use spaces, not tabs.
			},
1143.1Use spaces, not tabs.
			// Is it disabled?
1144.1Use spaces, not tabs.
			disabled: function() {
1145.1Use spaces, not tabs.
				return !list;
1146.1Use spaces, not tabs.
			},
1147.1Use spaces, not tabs.
			// Lock the list in its current state
1148.1Use spaces, not tabs.
			lock: function() {
1149.1Use spaces, not tabs.
				stack = undefined;
1150.1Use spaces, not tabs.
				if ( !memory || memory === true ) {
1151.1Use spaces, not tabs.
					self.disable();
1152.1Use spaces, not tabs.
				}
1153.1Use spaces, not tabs.
				return this;
1154.1Use spaces, not tabs.
			},
1155.1Use spaces, not tabs.
			// Is it locked?
1156.1Use spaces, not tabs.
			locked: function() {
1157.1Use spaces, not tabs.
				return !stack;
1158.1Use spaces, not tabs.
			},
1159.1Use spaces, not tabs.
			// Call all callbacks with the given context and arguments
1160.1Use spaces, not tabs.
			fireWith: function( context, args ) {
1161.1Use spaces, not tabs.
				if ( stack ) {
1162.1Use spaces, not tabs.
					if ( firing ) {
1163.1Use spaces, not tabs.
						if ( !flags.once ) {
1164.1Use spaces, not tabs.
							stack.push( [ context, args ] );
1165.1Use spaces, not tabs.
						}
1166.1Use spaces, not tabs.
					} else if ( !( flags.once && memory ) ) {
1167.1Use spaces, not tabs.
						fire( context, args );
1168.1Use spaces, not tabs.
					}
1169.1Use spaces, not tabs.
				}
1170.1Use spaces, not tabs.
				return this;
1171.1Use spaces, not tabs.
			},
1172.1Use spaces, not tabs.
			// Call all the callbacks with the given arguments
1173.1Use spaces, not tabs.
			fire: function() {
1174.1Use spaces, not tabs.
				self.fireWith( this, arguments );
1175.1Use spaces, not tabs.
				return this;
1176.1Use spaces, not tabs.
			},
1177.1Use spaces, not tabs.
			// To know if the callbacks have already been called at least once
1178.1Use spaces, not tabs.
			fired: function() {
1179.1Use spaces, not tabs.
				return !!memory;
1180.1Use spaces, not tabs.
			}
1181.1Use spaces, not tabs.
		};
1183.1Use spaces, not tabs.
	return self;
1190.1Use spaces, not tabs.
	sliceDeferred = [].slice;
1194.1Use spaces, not tabs.
	Deferred: function( func ) {
1195.1Use spaces, not tabs.
		var doneList = jQuery.Callbacks( "once memory" ),
1196.1Use spaces, not tabs.
			failList = jQuery.Callbacks( "once memory" ),
1197.1Use spaces, not tabs.
			progressList = jQuery.Callbacks( "memory" ),
1198.1Use spaces, not tabs.
			state = "pending",
1199.1Use spaces, not tabs.
			lists = {
1200.1Use spaces, not tabs.
				resolve: doneList,
1201.1Use spaces, not tabs.
				reject: failList,
1202.1Use spaces, not tabs.
				notify: progressList
1203.1Use spaces, not tabs.
			},
1204.1Use spaces, not tabs.
			promise = {
1205.1Use spaces, not tabs.
				done: doneList.add,
1206.1Use spaces, not tabs.
				fail: failList.add,
1207.1Use spaces, not tabs.
				progress: progressList.add,
1209.1Use spaces, not tabs.
				state: function() {
1210.1Use spaces, not tabs.
					return state;
1211.1Use spaces, not tabs.
				},
1213.1Use spaces, not tabs.
				// Deprecated
1214.1Use spaces, not tabs.
				isResolved: doneList.fired,
1215.1Use spaces, not tabs.
				isRejected: failList.fired,
1217.1Use spaces, not tabs.
				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
1218.1Use spaces, not tabs.
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
1219.1Use spaces, not tabs.
					return this;
1220.1Use spaces, not tabs.
				},
1221.1Use spaces, not tabs.
				always: function() {
1222.1Use spaces, not tabs.
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
1223.1Use spaces, not tabs.
					return this;
1224.1Use spaces, not tabs.
				},
1225.1Use spaces, not tabs.
				pipe: function( fnDone, fnFail, fnProgress ) {
1226.1Use spaces, not tabs.
					return jQuery.Deferred(function( newDefer ) {
1227.1Use spaces, not tabs.
						jQuery.each( {
1228.1Use spaces, not tabs.
							done: [ fnDone, "resolve" ],
1229.1Use spaces, not tabs.
							fail: [ fnFail, "reject" ],
1230.1Use spaces, not tabs.
							progress: [ fnProgress, "notify" ]
1231.1Use spaces, not tabs.
						}, function( handler, data ) {
1232.1Use spaces, not tabs.
							var fn = data[ 0 ],
1233.1Use spaces, not tabs.
								action = data[ 1 ],
1234.1Use spaces, not tabs.
								returned;
1235.1Use spaces, not tabs.
							if ( jQuery.isFunction( fn ) ) {
1236.1Use spaces, not tabs.
								deferred[ handler ](function() {
1237.1Use spaces, not tabs.
									returned = fn.apply( this, arguments );
1238.1Use spaces, not tabs.
									if ( returned && jQuery.isFunction( returned.promise ) ) {
1239.1Use spaces, not tabs.
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
1240.1Use spaces, not tabs.
									} else {
1241.1Use spaces, not tabs.
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
1242.1Use spaces, not tabs.
									}
1243.1Use spaces, not tabs.
								});
1244.1Use spaces, not tabs.
							} else {
1245.1Use spaces, not tabs.
								deferred[ handler ]( newDefer[ action ] );
1246.1Use spaces, not tabs.
							}
1247.1Use spaces, not tabs.
						});
1248.1Use spaces, not tabs.
					}).promise();
1249.1Use spaces, not tabs.
				},
1250.1Use spaces, not tabs.
				// Get a promise for this deferred
1251.1Use spaces, not tabs.
				// If obj is provided, the promise aspect is added to the object
1252.1Use spaces, not tabs.
				promise: function( obj ) {
1253.1Use spaces, not tabs.
					if ( obj == null ) {
1254.1Use spaces, not tabs.
						obj = promise;
1255.1Use spaces, not tabs.
					} else {
1256.1Use spaces, not tabs.
						for ( var key in promise ) {
1257.1Use spaces, not tabs.
							obj[ key ] = promise[ key ];
1258.1Use spaces, not tabs.
						}
1259.1Use spaces, not tabs.
					}
1260.1Use spaces, not tabs.
					return obj;
1261.1Use spaces, not tabs.
				}
1262.1Use spaces, not tabs.
			},
1263.1Use spaces, not tabs.
			deferred = promise.promise({}),
1264.1Use spaces, not tabs.
			key;
1266.1Use spaces, not tabs.
		for ( key in lists ) {
1267.1Use spaces, not tabs.
			deferred[ key ] = lists[ key ].fire;
1268.1Use spaces, not tabs.
			deferred[ key + "With" ] = lists[ key ].fireWith;
1269.1Use spaces, not tabs.
		}
1271.1Use spaces, not tabs.
		// Handle state
1272.1Use spaces, not tabs.
		deferred.done( function() {
1273.1Use spaces, not tabs.
			state = "resolved";
1274.1Use spaces, not tabs.
		}, failList.disable, progressList.lock ).fail( function() {
1275.1Use spaces, not tabs.
			state = "rejected";
1276.1Use spaces, not tabs.
		}, doneList.disable, progressList.lock );
1278.1Use spaces, not tabs.
		// Call given func if any
1279.1Use spaces, not tabs.
		if ( func ) {
1280.1Use spaces, not tabs.
			func.call( deferred, deferred );
1281.1Use spaces, not tabs.
		}
1283.1Use spaces, not tabs.
		// All done!
1284.1Use spaces, not tabs.
		return deferred;
1285.1Use spaces, not tabs.
	},
1287.1Use spaces, not tabs.
	// Deferred helper
1288.1Use spaces, not tabs.
	when: function( firstParam ) {
1289.1Use spaces, not tabs.
		var args = sliceDeferred.call( arguments, 0 ),
1290.1Use spaces, not tabs.
			i = 0,
1291.1Use spaces, not tabs.
			length = args.length,
1292.1Use spaces, not tabs.
			pValues = new Array( length ),
1293.1Use spaces, not tabs.
			count = length,
1294.1Use spaces, not tabs.
			pCount = length,
1295.1Use spaces, not tabs.
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
1296.1Use spaces, not tabs.
				firstParam :
1297.1Use spaces, not tabs.
				jQuery.Deferred(),
1298.1Use spaces, not tabs.
			promise = deferred.promise();
1299.1Use spaces, not tabs.
		function resolveFunc( i ) {
1300.1Use spaces, not tabs.
			return function( value ) {
1301.1Use spaces, not tabs.
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
1302.1Use spaces, not tabs.
				if ( !( --count ) ) {
1303.1Use spaces, not tabs.
					deferred.resolveWith( deferred, args );
1304.1Use spaces, not tabs.
				}
1305.1Use spaces, not tabs.
			};
1306.1Use spaces, not tabs.
		}
1307.1Use spaces, not tabs.
		function progressFunc( i ) {
1308.1Use spaces, not tabs.
			return function( value ) {
1309.1Use spaces, not tabs.
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
1310.1Use spaces, not tabs.
				deferred.notifyWith( promise, pValues );
1311.1Use spaces, not tabs.
			};
1312.1Use spaces, not tabs.
		}
1313.1Use spaces, not tabs.
		if ( length > 1 ) {
1314.1Use spaces, not tabs.
			for ( ; i < length; i++ ) {
1315.1Use spaces, not tabs.
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
1316.1Use spaces, not tabs.
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
1317.1Use spaces, not tabs.
				} else {
1318.1Use spaces, not tabs.
					--count;
1319.1Use spaces, not tabs.
				}
1320.1Use spaces, not tabs.
			}
1321.1Use spaces, not tabs.
			if ( !count ) {
1322.1Use spaces, not tabs.
				deferred.resolveWith( deferred, args );
1323.1Use spaces, not tabs.
			}
1324.1Use spaces, not tabs.
		} else if ( deferred !== firstParam ) {
1325.1Use spaces, not tabs.
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
1326.1Use spaces, not tabs.
		}
1327.1Use spaces, not tabs.
		return promise;
1328.1Use spaces, not tabs.
	}
1336.1Use spaces, not tabs.
	var support,
1337.1Use spaces, not tabs.
		all,
1338.1Use spaces, not tabs.
		a,
1339.1Use spaces, not tabs.
		select,
1340.1Use spaces, not tabs.
		opt,
1341.1Use spaces, not tabs.
		input,
1342.1Use spaces, not tabs.
		marginDiv,
1343.1Use spaces, not tabs.
		fragment,
1344.1Use spaces, not tabs.
		tds,
1345.1Use spaces, not tabs.
		events,
1346.1Use spaces, not tabs.
		eventName,
1347.1Use spaces, not tabs.
		i,
1348.1Use spaces, not tabs.
		isSupported,
1349.1Use spaces, not tabs.
		div = document.createElement( "div" ),
1350.1Use spaces, not tabs.
		documentElement = document.documentElement;
1352.1Use spaces, not tabs.
	// Preliminary tests
1353.1Use spaces, not tabs.
	div.setAttribute("className", "t");
1354.1Use spaces, not tabs.
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
1356.1Use spaces, not tabs.
	all = div.getElementsByTagName( "*" );
1357.1Use spaces, not tabs.
	a = div.getElementsByTagName( "a" )[ 0 ];
1359.1Use spaces, not tabs.
	// Can't get basic test support
1360.1Use spaces, not tabs.
	if ( !all || !all.length || !a ) {
1361.1Use spaces, not tabs.
		return {};
1362.1Use spaces, not tabs.
	}
1364.1Use spaces, not tabs.
	// First batch of supports tests
1365.1Use spaces, not tabs.
	select = document.createElement( "select" );
1366.1Use spaces, not tabs.
	opt = select.appendChild( document.createElement("option") );
1367.1Use spaces, not tabs.
	input = div.getElementsByTagName( "input" )[ 0 ];
1369.1Use spaces, not tabs.
	support = {
1370.1Use spaces, not tabs.
		// IE strips leading whitespace when .innerHTML is used
1371.1Use spaces, not tabs.
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),
1373.1Use spaces, not tabs.
		// Make sure that tbody elements aren't automatically inserted
1374.1Use spaces, not tabs.
		// IE will insert them into empty tables
1375.1Use spaces, not tabs.
		tbody: !div.getElementsByTagName("tbody").length,
1377.1Use spaces, not tabs.
		// Make sure that link elements get serialized correctly by innerHTML
1378.1Use spaces, not tabs.
		// This requires a wrapper element in IE
1379.1Use spaces, not tabs.
		htmlSerialize: !!div.getElementsByTagName("link").length,
1381.1Use spaces, not tabs.
		// Get the style information from getAttribute
1382.1Use spaces, not tabs.
		// (IE uses .cssText instead)
1383.1Use spaces, not tabs.
		style: /top/.test( a.getAttribute("style") ),
1385.1Use spaces, not tabs.
		// Make sure that URLs aren't manipulated
1386.1Use spaces, not tabs.
		// (IE normalizes it by default)
1387.1Use spaces, not tabs.
		hrefNormalized: ( a.getAttribute("href") === "/a" ),
1389.1Use spaces, not tabs.
		// Make sure that element opacity exists
1390.1Use spaces, not tabs.
		// (IE uses filter instead)
1391.1Use spaces, not tabs.
		// Use a regex to work around a WebKit issue. See #5145
1392.1Use spaces, not tabs.
		opacity: /^0.55/.test( a.style.opacity ),
1394.1Use spaces, not tabs.
		// Verify style float existence
1395.1Use spaces, not tabs.
		// (IE uses styleFloat instead of cssFloat)
1396.1Use spaces, not tabs.
		cssFloat: !!a.style.cssFloat,
1398.1Use spaces, not tabs.
		// Make sure that if no value is specified for a checkbox
1399.1Use spaces, not tabs.
		// that it defaults to "on".
1400.1Use spaces, not tabs.
		// (WebKit defaults to "" instead)
1401.1Use spaces, not tabs.
		checkOn: ( input.value === "on" ),
1403.1Use spaces, not tabs.
		// Make sure that a selected-by-default option has a working selected property.
1404.1Use spaces, not tabs.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
1405.1Use spaces, not tabs.
		optSelected: opt.selected,
1407.1Use spaces, not tabs.
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
1408.1Use spaces, not tabs.
		getSetAttribute: div.className !== "t",
1410.1Use spaces, not tabs.
		// Tests for enctype support on a form(#6743)
1411.1Use spaces, not tabs.
		enctype: !!document.createElement("form").enctype,
1413.1Use spaces, not tabs.
		// Makes sure cloning an html5 element does not cause problems
1414.1Use spaces, not tabs.
		// Where outerHTML is undefined, this still works
1415.1Use spaces, not tabs.
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",
1417.1Use spaces, not tabs.
		// Will be defined later
1418.1Use spaces, not tabs.
		submitBubbles: true,
1419.1Use spaces, not tabs.
		changeBubbles: true,
1420.1Use spaces, not tabs.
		focusinBubbles: false,
1421.1Use spaces, not tabs.
		deleteExpando: true,
1422.1Use spaces, not tabs.
		noCloneEvent: true,
1423.1Use spaces, not tabs.
		inlineBlockNeedsLayout: false,
1424.1Use spaces, not tabs.
		shrinkWrapBlocks: false,
1425.1Use spaces, not tabs.
		reliableMarginRight: true
1426.1Use spaces, not tabs.
	};
1428.1Use spaces, not tabs.
	// Make sure checked status is properly cloned
1429.1Use spaces, not tabs.
	input.checked = true;
1430.1Use spaces, not tabs.
	support.noCloneChecked = input.cloneNode( true ).checked;
1432.1Use spaces, not tabs.
	// Make sure that the options inside disabled selects aren't marked as disabled
1433.1Use spaces, not tabs.
	// (WebKit marks them as disabled)
1434.1Use spaces, not tabs.
	select.disabled = true;
1435.1Use spaces, not tabs.
	support.optDisabled = !opt.disabled;
1437.1Use spaces, not tabs.
	// Test to see if it's possible to delete an expando from an element
1438.1Use spaces, not tabs.
	// Fails in Internet Explorer
1439.1Use spaces, not tabs.
	try {
1440.1Use spaces, not tabs.
		delete div.test;
1441.1Use spaces, not tabs.
	} catch( e ) {
1442.1Use spaces, not tabs.
		support.deleteExpando = false;
1443.1Use spaces, not tabs.
	}
1445.1Use spaces, not tabs.
	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
1446.1Use spaces, not tabs.
		div.attachEvent( "onclick", function() {
1447.1Use spaces, not tabs.
			// Cloning a node shouldn't copy over any
1448.1Use spaces, not tabs.
			// bound event handlers (IE does this)
1449.1Use spaces, not tabs.
			support.noCloneEvent = false;
1450.1Use spaces, not tabs.
		});
1451.1Use spaces, not tabs.
		div.cloneNode( true ).fireEvent( "onclick" );
1452.1Use spaces, not tabs.
	}
1454.1Use spaces, not tabs.
	// Check if a radio maintains its value
1455.1Use spaces, not tabs.
	// after being appended to the DOM
1456.1Use spaces, not tabs.
	input = document.createElement("input");
1457.1Use spaces, not tabs.
	input.value = "t";
1458.1Use spaces, not tabs.
	input.setAttribute("type", "radio");
1459.1Use spaces, not tabs.
	support.radioValue = input.value === "t";
1461.1Use spaces, not tabs.
	input.setAttribute("checked", "checked");
1462.1Use spaces, not tabs.
	div.appendChild( input );
1463.1Use spaces, not tabs.
	fragment = document.createDocumentFragment();
1464.1Use spaces, not tabs.
	fragment.appendChild( div.lastChild );
1466.1Use spaces, not tabs.
	// WebKit doesn't clone checked state correctly in fragments
1467.1Use spaces, not tabs.
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;
1469.1Use spaces, not tabs.
	// Check if a disconnected checkbox will retain its checked
1470.1Use spaces, not tabs.
	// value of true after appended to the DOM (IE6/7)
1471.1Use spaces, not tabs.
	support.appendChecked = input.checked;
1473.1Use spaces, not tabs.
	fragment.removeChild( input );
1474.1Use spaces, not tabs.
	fragment.appendChild( div );
1476.1Use spaces, not tabs.
	div.innerHTML = "";
1478.1Use spaces, not tabs.
	// Check if div with explicit width and no margin-right incorrectly
1479.1Use spaces, not tabs.
	// gets computed margin-right based on width of container. For more
1480.1Use spaces, not tabs.
	// info see bug #3333
1481.1Use spaces, not tabs.
	// Fails in WebKit before Feb 2011 nightlies
1482.1Use spaces, not tabs.
	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
1483.1Use spaces, not tabs.
	if ( window.getComputedStyle ) {
1484.1Use spaces, not tabs.
		marginDiv = document.createElement( "div" );
1485.1Use spaces, not tabs.
		marginDiv.style.width = "0";
1486.1Use spaces, not tabs.
		marginDiv.style.marginRight = "0";
1487.1Use spaces, not tabs.
		div.style.width = "2px";
1488.1Use spaces, not tabs.
		div.appendChild( marginDiv );
1489.1Use spaces, not tabs.
		support.reliableMarginRight =
1490.1Use spaces, not tabs.
			( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
1491.1Use spaces, not tabs.
	}
1493.1Use spaces, not tabs.
	// Technique from Juriy Zaytsev
1494.1Use spaces, not tabs.
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
1495.1Use spaces, not tabs.
	// We only care about the case where non-standard event systems
1496.1Use spaces, not tabs.
	// are used, namely in IE. Short-circuiting here helps us to
1497.1Use spaces, not tabs.
	// avoid an eval call (in setAttribute) which can cause CSP
1498.1Use spaces, not tabs.
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
1499.1Use spaces, not tabs.
	if ( div.attachEvent ) {
1500.1Use spaces, not tabs.
		for( i in {
1501.1Use spaces, not tabs.
			submit: 1,
1502.1Use spaces, not tabs.
			change: 1,
1503.1Use spaces, not tabs.
			focusin: 1
1504.1Use spaces, not tabs.
		}) {
1505.1Use spaces, not tabs.
			eventName = "on" + i;
1506.1Use spaces, not tabs.
			isSupported = ( eventName in div );
1507.1Use spaces, not tabs.
			if ( !isSupported ) {
1508.1Use spaces, not tabs.
				div.setAttribute( eventName, "return;" );
1509.1Use spaces, not tabs.
				isSupported = ( typeof div[ eventName ] === "function" );
1510.1Use spaces, not tabs.
			}
1511.1Use spaces, not tabs.
			support[ i + "Bubbles" ] = isSupported;
1512.1Use spaces, not tabs.
		}
1513.1Use spaces, not tabs.
	}
1515.1Use spaces, not tabs.
	fragment.removeChild( div );
1517.1Use spaces, not tabs.
	// Null elements to avoid leaks in IE
1518.1Use spaces, not tabs.
	fragment = select = opt = marginDiv = div = input = null;
1520.1Use spaces, not tabs.
	// Run tests that need a body at doc ready
1521.1Use spaces, not tabs.
	jQuery(function() {
1522.1Use spaces, not tabs.
		var container, outer, inner, table, td, offsetSupport,
1523.1Use spaces, not tabs.
			conMarginTop, ptlm, vb, style, html,
1524.1Use spaces, not tabs.
			body = document.getElementsByTagName("body")[0];
1526.1Use spaces, not tabs.
		if ( !body ) {
1527.1Use spaces, not tabs.
			// Return for frameset docs that don't have a body
1528.1Use spaces, not tabs.
			return;
1529.1Use spaces, not tabs.
		}
1531.1Use spaces, not tabs.
		conMarginTop = 1;
1532.1Use spaces, not tabs.
		ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
1533.1Use spaces, not tabs.
		vb = "visibility:hidden;border:0;";
1534.1Use spaces, not tabs.
		style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
1535.1Use spaces, not tabs.
		html = "<div " + style + "><div></div></div>" +
1536.1Use spaces, not tabs.
			"<table " + style + " cellpadding='0' cellspacing='0'>" +
1537.1Use spaces, not tabs.
			"<tr><td></td></tr></table>";
1539.1Use spaces, not tabs.
		container = document.createElement("div");
1540.1Use spaces, not tabs.
		container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
1541.1Use spaces, not tabs.
		body.insertBefore( container, body.firstChild );
1543.1Use spaces, not tabs.
		// Construct the test element
1544.1Use spaces, not tabs.
		div = document.createElement("div");
1545.1Use spaces, not tabs.
		container.appendChild( div );
1547.1Use spaces, not tabs.
		// Check if table cells still have offsetWidth/Height when they are set
1548.1Use spaces, not tabs.
		// to display:none and there are still other visible table cells in a
1549.1Use spaces, not tabs.
		// table row; if so, offsetWidth/Height are not reliable for use when
1550.1Use spaces, not tabs.
		// determining if an element has been hidden directly using
1551.1Use spaces, not tabs.
		// display:none (it is still safe to use offsets if a parent element is
1552.1Use spaces, not tabs.
		// hidden; don safety goggles and see bug #4512 for more information).
1553.1Use spaces, not tabs.
		// (only IE 8 fails this test)
1554.1Use spaces, not tabs.
		div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
1555.1Use spaces, not tabs.
		tds = div.getElementsByTagName( "td" );
1556.1Use spaces, not tabs.
		isSupported = ( tds[ 0 ].offsetHeight === 0 );
1558.1Use spaces, not tabs.
		tds[ 0 ].style.display = "";
1559.1Use spaces, not tabs.
		tds[ 1 ].style.display = "none";
1561.1Use spaces, not tabs.
		// Check if empty table cells still have offsetWidth/Height
1562.1Use spaces, not tabs.
		// (IE <= 8 fail this test)
1563.1Use spaces, not tabs.
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );
1565.1Use spaces, not tabs.
		// Figure out if the W3C box model works as expected
1566.1Use spaces, not tabs.
		div.innerHTML = "";
1567.1Use spaces, not tabs.
		div.style.width = div.style.paddingLeft = "1px";
1568.1Use spaces, not tabs.
		jQuery.boxModel = support.boxModel = div.offsetWidth === 2;
1570.1Use spaces, not tabs.
		if ( typeof div.style.zoom !== "undefined" ) {
1571.1Use spaces, not tabs.
			// Check if natively block-level elements act like inline-block
1572.1Use spaces, not tabs.
			// elements when setting their display to 'inline' and giving
1573.1Use spaces, not tabs.
			// them layout
1574.1Use spaces, not tabs.
			// (IE < 8 does this)
1575.1Use spaces, not tabs.
			div.style.display = "inline";
1576.1Use spaces, not tabs.
			div.style.zoom = 1;
1577.1Use spaces, not tabs.
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 2 );
1579.1Use spaces, not tabs.
			// Check if elements with layout shrink-wrap their children
1580.1Use spaces, not tabs.
			// (IE 6 does this)
1581.1Use spaces, not tabs.
			div.style.display = "";
1582.1Use spaces, not tabs.
			div.innerHTML = "<div style='width:4px;'></div>";
1583.1Use spaces, not tabs.
			support.shrinkWrapBlocks = ( div.offsetWidth !== 2 );
1584.1Use spaces, not tabs.
		}
1586.1Use spaces, not tabs.
		div.style.cssText = ptlm + vb;
1587.1Use spaces, not tabs.
		div.innerHTML = html;
1589.1Use spaces, not tabs.
		outer = div.firstChild;
1590.1Use spaces, not tabs.
		inner = outer.firstChild;
1591.1Use spaces, not tabs.
		td = outer.nextSibling.firstChild.firstChild;
1593.1Use spaces, not tabs.
		offsetSupport = {
1594.1Use spaces, not tabs.
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
1595.1Use spaces, not tabs.
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
1596.1Use spaces, not tabs.
		};
1598.1Use spaces, not tabs.
		inner.style.position = "fixed";
1599.1Use spaces, not tabs.
		inner.style.top = "20px";
1601.1Use spaces, not tabs.
		// safari subtracts parent border width here which is 5px
1602.1Use spaces, not tabs.
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
1603.1Use spaces, not tabs.
		inner.style.position = inner.style.top = "";
1605.1Use spaces, not tabs.
		outer.style.overflow = "hidden";
1606.1Use spaces, not tabs.
		outer.style.position = "relative";
1608.1Use spaces, not tabs.
		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
1609.1Use spaces, not tabs.
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );
1611.1Use spaces, not tabs.
		body.removeChild( container );
1612.1Use spaces, not tabs.
		div  = container = null;
1614.1Use spaces, not tabs.
		jQuery.extend( support, offsetSupport );
1615.1Use spaces, not tabs.
	});
1617.1Use spaces, not tabs.
	return support;
1624.1Use spaces, not tabs.
	rmultiDash = /([A-Z])/g;
1627.1Use spaces, not tabs.
	cache: {},
1629.1Use spaces, not tabs.
	// Please use with caution
1630.1Use spaces, not tabs.
	uuid: 0,
1632.1Use spaces, not tabs.
	// Unique for each copy of jQuery on the page
1633.1Use spaces, not tabs.
	// Non-digits removed to match rinlinejQuery
1634.1Use spaces, not tabs.
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),
1636.1Use spaces, not tabs.
	// The following elements throw uncatchable exceptions if you
1637.1Use spaces, not tabs.
	// attempt to add expando properties to them.
1638.1Use spaces, not tabs.
	noData: {
1639.1Use spaces, not tabs.
		"embed": true,
1640.1Use spaces, not tabs.
		// Ban all objects except for Flash (which handle expandos)
1641.1Use spaces, not tabs.
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
1642.1Use spaces, not tabs.
		"applet": true
1643.1Use spaces, not tabs.
	},
1645.1Use spaces, not tabs.
	hasData: function( elem ) {
1646.1Use spaces, not tabs.
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
1647.1Use spaces, not tabs.
		return !!elem && !isEmptyDataObject( elem );
1648.1Use spaces, not tabs.
	},
1650.1Use spaces, not tabs.
	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
1651.1Use spaces, not tabs.
		if ( !jQuery.acceptData( elem ) ) {
1652.1Use spaces, not tabs.
			return;
1653.1Use spaces, not tabs.
		}
1655.1Use spaces, not tabs.
		var privateCache, thisCache, ret,
1656.1Use spaces, not tabs.
			internalKey = jQuery.expando,
1657.1Use spaces, not tabs.
			getByName = typeof name === "string",
1659.1Use spaces, not tabs.
			// We have to handle DOM nodes and JS objects differently because IE6-7
1660.1Use spaces, not tabs.
			// can't GC object references properly across the DOM-JS boundary
1661.1Use spaces, not tabs.
			isNode = elem.nodeType,
1663.1Use spaces, not tabs.
			// Only DOM nodes need the global jQuery cache; JS object data is
1664.1Use spaces, not tabs.
			// attached directly to the object so GC can occur automatically
1665.1Use spaces, not tabs.
			cache = isNode ? jQuery.cache : elem,
1667.1Use spaces, not tabs.
			// Only defining an ID for JS objects if its cache already exists allows
1668.1Use spaces, not tabs.
			// the code to shortcut on the same path as a DOM node with no cache
1669.1Use spaces, not tabs.
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
1670.1Use spaces, not tabs.
			isEvents = name === "events";
1672.1Use spaces, not tabs.
		// Avoid doing any more work than we need to when trying to get data on an
1673.1Use spaces, not tabs.
		// object that has no data at all
1674.1Use spaces, not tabs.
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
1675.1Use spaces, not tabs.
			return;
1676.1Use spaces, not tabs.
		}
1678.1Use spaces, not tabs.
		if ( !id ) {
1679.1Use spaces, not tabs.
			// Only DOM nodes need a new unique ID for each element since their data
1680.1Use spaces, not tabs.
			// ends up in the global cache
1681.1Use spaces, not tabs.
			if ( isNode ) {
1682.1Use spaces, not tabs.
				elem[ internalKey ] = id = ++jQuery.uuid;
1683.1Use spaces, not tabs.
			} else {
1684.1Use spaces, not tabs.
				id = internalKey;
1685.1Use spaces, not tabs.
			}
1686.1Use spaces, not tabs.
		}
1688.1Use spaces, not tabs.
		if ( !cache[ id ] ) {
1689.1Use spaces, not tabs.
			cache[ id ] = {};
1691.1Use spaces, not tabs.
			// Avoids exposing jQuery metadata on plain JS objects when the object
1692.1Use spaces, not tabs.
			// is serialized using JSON.stringify
1693.1Use spaces, not tabs.
			if ( !isNode ) {
1694.1Use spaces, not tabs.
				cache[ id ].toJSON = jQuery.noop;
1695.1Use spaces, not tabs.
			}
1696.1Use spaces, not tabs.
		}
1698.1Use spaces, not tabs.
		// An object can be passed to jQuery.data instead of a key/value pair; this gets
1699.1Use spaces, not tabs.
		// shallow copied over onto the existing cache
1700.1Use spaces, not tabs.
		if ( typeof name === "object" || typeof name === "function" ) {
1701.1Use spaces, not tabs.
			if ( pvt ) {
1702.1Use spaces, not tabs.
				cache[ id ] = jQuery.extend( cache[ id ], name );
1703.1Use spaces, not tabs.
			} else {
1704.1Use spaces, not tabs.
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
1705.1Use spaces, not tabs.
			}
1706.1Use spaces, not tabs.
		}
1708.1Use spaces, not tabs.
		privateCache = thisCache = cache[ id ];
1710.1Use spaces, not tabs.
		// jQuery data() is stored in a separate object inside the object's internal data
1711.1Use spaces, not tabs.
		// cache in order to avoid key collisions between internal data and user-defined
1712.1Use spaces, not tabs.
		// data.
1713.1Use spaces, not tabs.
		if ( !pvt ) {
1714.1Use spaces, not tabs.
			if ( !thisCache.data ) {
1715.1Use spaces, not tabs.
				thisCache.data = {};
1716.1Use spaces, not tabs.
			}
1718.1Use spaces, not tabs.
			thisCache = thisCache.data;
1719.1Use spaces, not tabs.
		}
1721.1Use spaces, not tabs.
		if ( data !== undefined ) {
1722.1Use spaces, not tabs.
			thisCache[ jQuery.camelCase( name ) ] = data;
1723.1Use spaces, not tabs.
		}
1725.1Use spaces, not tabs.
		// Users should not attempt to inspect the internal events object using jQuery.data,
1726.1Use spaces, not tabs.
		// it is undocumented and subject to change. But does anyone listen? No.
1727.1Use spaces, not tabs.
		if ( isEvents && !thisCache[ name ] ) {
1728.1Use spaces, not tabs.
			return privateCache.events;
1729.1Use spaces, not tabs.
		}
1731.1Use spaces, not tabs.
		// Check for both converted-to-camel and non-converted data property names
1732.1Use spaces, not tabs.
		// If a data property was specified
1733.1Use spaces, not tabs.
		if ( getByName ) {
1735.1Use spaces, not tabs.
			// First Try to find as-is property data
1736.1Use spaces, not tabs.
			ret = thisCache[ name ];
1738.1Use spaces, not tabs.
			// Test for null|undefined property data
1739.1Use spaces, not tabs.
			if ( ret == null ) {
1741.1Use spaces, not tabs.
				// Try to find the camelCased property
1742.1Use spaces, not tabs.
				ret = thisCache[ jQuery.camelCase( name ) ];
1743.1Use spaces, not tabs.
			}
1744.1Use spaces, not tabs.
		} else {
1745.1Use spaces, not tabs.
			ret = thisCache;
1746.1Use spaces, not tabs.
		}
1748.1Use spaces, not tabs.
		return ret;
1749.1Use spaces, not tabs.
	},
1751.1Use spaces, not tabs.
	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
1752.1Use spaces, not tabs.
		if ( !jQuery.acceptData( elem ) ) {
1753.1Use spaces, not tabs.
			return;
1754.1Use spaces, not tabs.
		}
1756.1Use spaces, not tabs.
		var thisCache, i, l,
1758.1Use spaces, not tabs.
			// Reference to internal data cache key
1759.1Use spaces, not tabs.
			internalKey = jQuery.expando,
1761.1Use spaces, not tabs.
			isNode = elem.nodeType,
1763.1Use spaces, not tabs.
			// See jQuery.data for more information
1764.1Use spaces, not tabs.
			cache = isNode ? jQuery.cache : elem,
1766.1Use spaces, not tabs.
			// See jQuery.data for more information
1767.1Use spaces, not tabs.
			id = isNode ? elem[ internalKey ] : internalKey;
1769.1Use spaces, not tabs.
		// If there is already no cache entry for this object, there is no
1770.1Use spaces, not tabs.
		// purpose in continuing
1771.1Use spaces, not tabs.
		if ( !cache[ id ] ) {
1772.1Use spaces, not tabs.
			return;
1773.1Use spaces, not tabs.
		}
1775.1Use spaces, not tabs.
		if ( name ) {
1777.1Use spaces, not tabs.
			thisCache = pvt ? cache[ id ] : cache[ id ].data;
1779.1Use spaces, not tabs.
			if ( thisCache ) {
1781.1Use spaces, not tabs.
				// Support array or space separated string names for data keys
1782.1Use spaces, not tabs.
				if ( !jQuery.isArray( name ) ) {
1784.1Use spaces, not tabs.
					// try the string as a key before any manipulation
1785.1Use spaces, not tabs.
					if ( name in thisCache ) {
1786.1Use spaces, not tabs.
						name = [ name ];
1787.1Use spaces, not tabs.
					} else {
1789.1Use spaces, not tabs.
						// split the camel cased version by spaces unless a key with the spaces exists
1790.1Use spaces, not tabs.
						name = jQuery.camelCase( name );
1791.1Use spaces, not tabs.
						if ( name in thisCache ) {
1792.1Use spaces, not tabs.
							name = [ name ];
1793.1Use spaces, not tabs.
						} else {
1794.1Use spaces, not tabs.
							name = name.split( " " );
1795.1Use spaces, not tabs.
						}
1796.1Use spaces, not tabs.
					}
1797.1Use spaces, not tabs.
				}
1799.1Use spaces, not tabs.
				for ( i = 0, l = name.length; i < l; i++ ) {
1800.1Use spaces, not tabs.
					delete thisCache[ name[i] ];
1801.1Use spaces, not tabs.
				}
1803.1Use spaces, not tabs.
				// If there is no data left in the cache, we want to continue
1804.1Use spaces, not tabs.
				// and let the cache object itself get destroyed
1805.1Use spaces, not tabs.
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
1806.1Use spaces, not tabs.
					return;
1807.1Use spaces, not tabs.
				}
1808.1Use spaces, not tabs.
			}
1809.1Use spaces, not tabs.
		}
1811.1Use spaces, not tabs.
		// See jQuery.data for more information
1812.1Use spaces, not tabs.
		if ( !pvt ) {
1813.1Use spaces, not tabs.
			delete cache[ id ].data;
1815.1Use spaces, not tabs.
			// Don't destroy the parent cache unless the internal data object
1816.1Use spaces, not tabs.
			// had been the only thing left in it
1817.1Use spaces, not tabs.
			if ( !isEmptyDataObject(cache[ id ]) ) {
1818.1Use spaces, not tabs.
				return;
1819.1Use spaces, not tabs.
			}
1820.1Use spaces, not tabs.
		}
1822.1Use spaces, not tabs.
		// Browsers that fail expando deletion also refuse to delete expandos on
1823.1Use spaces, not tabs.
		// the window, but it will allow it on all other JS objects; other browsers
1824.1Use spaces, not tabs.
		// don't care
1825.1Use spaces, not tabs.
		// Ensure that `cache` is not a window object #10080
1826.1Use spaces, not tabs.
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
1827.1Use spaces, not tabs.
			delete cache[ id ];
1828.1Use spaces, not tabs.
		} else {
1829.1Use spaces, not tabs.
			cache[ id ] = null;
1830.1Use spaces, not tabs.
		}
1832.1Use spaces, not tabs.
		// We destroyed the cache and need to eliminate the expando on the node to avoid
1833.1Use spaces, not tabs.
		// false lookups in the cache for entries that no longer exist
1834.1Use spaces, not tabs.
		if ( isNode ) {
1835.1Use spaces, not tabs.
			// IE does not allow us to delete expando properties from nodes,
1836.1Use spaces, not tabs.
			// nor does it have a removeAttribute function on Document nodes;
1837.1Use spaces, not tabs.
			// we must handle all of these cases
1838.1Use spaces, not tabs.
			if ( jQuery.support.deleteExpando ) {
1839.1Use spaces, not tabs.
				delete elem[ internalKey ];
1840.1Use spaces, not tabs.
			} else if ( elem.removeAttribute ) {
1841.1Use spaces, not tabs.
				elem.removeAttribute( internalKey );
1842.1Use spaces, not tabs.
			} else {
1843.1Use spaces, not tabs.
				elem[ internalKey ] = null;
1844.1Use spaces, not tabs.
			}
1845.1Use spaces, not tabs.
		}
1846.1Use spaces, not tabs.
	},
1848.1Use spaces, not tabs.
	// For internal use only.
1849.1Use spaces, not tabs.
	_data: function( elem, name, data ) {
1850.1Use spaces, not tabs.
		return jQuery.data( elem, name, data, true );
1851.1Use spaces, not tabs.
	},
1853.1Use spaces, not tabs.
	// A method for determining if a DOM node can handle the data expando
1854.1Use spaces, not tabs.
	acceptData: function( elem ) {
1855.1Use spaces, not tabs.
		if ( elem.nodeName ) {
1856.1Use spaces, not tabs.
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];
1858.1Use spaces, not tabs.
			if ( match ) {
1859.1Use spaces, not tabs.
				return !(match === true || elem.getAttribute("classid") !== match);
1860.1Use spaces, not tabs.
			}
1861.1Use spaces, not tabs.
		}
1863.1Use spaces, not tabs.
		return true;
1864.1Use spaces, not tabs.
	}
1868.1Use spaces, not tabs.
	data: function( key, value ) {
1869.1Use spaces, not tabs.
		var parts, attr, name,
1870.1Use spaces, not tabs.
			data = null;
1872.1Use spaces, not tabs.
		if ( typeof key === "undefined" ) {
1873.1Use spaces, not tabs.
			if ( this.length ) {
1874.1Use spaces, not tabs.
				data = jQuery.data( this[0] );
1876.1Use spaces, not tabs.
				if ( this[0].nodeType === 1 && !jQuery._data( this[0], "parsedAttrs" ) ) {
1877.1Use spaces, not tabs.
					attr = this[0].attributes;
1878.1Use spaces, not tabs.
					for ( var i = 0, l = attr.length; i < l; i++ ) {
1879.1Use spaces, not tabs.
						name = attr[i].name;
1881.1Use spaces, not tabs.
						if ( name.indexOf( "data-" ) === 0 ) {
1882.1Use spaces, not tabs.
							name = jQuery.camelCase( name.substring(5) );
1884.1Use spaces, not tabs.
							dataAttr( this[0], name, data[ name ] );
1885.1Use spaces, not tabs.
						}
1886.1Use spaces, not tabs.
					}
1887.1Use spaces, not tabs.
					jQuery._data( this[0], "parsedAttrs", true );
1888.1Use spaces, not tabs.
				}
1889.1Use spaces, not tabs.
			}
1891.1Use spaces, not tabs.
			return data;
1893.1Use spaces, not tabs.
		} else if ( typeof key === "object" ) {
1894.1Use spaces, not tabs.
			return this.each(function() {
1895.1Use spaces, not tabs.
				jQuery.data( this, key );
1896.1Use spaces, not tabs.
			});
1897.1Use spaces, not tabs.
		}
1899.1Use spaces, not tabs.
		parts = key.split(".");
1900.1Use spaces, not tabs.
		parts[1] = parts[1] ? "." + parts[1] : "";
1902.1Use spaces, not tabs.
		if ( value === undefined ) {
1903.1Use spaces, not tabs.
			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
1905.1Use spaces, not tabs.
			// Try to fetch any internally stored data first
1906.1Use spaces, not tabs.
			if ( data === undefined && this.length ) {
1907.1Use spaces, not tabs.
				data = jQuery.data( this[0], key );
1908.1Use spaces, not tabs.
				data = dataAttr( this[0], key, data );
1909.1Use spaces, not tabs.
			}
1911.1Use spaces, not tabs.
			return data === undefined && parts[1] ?
1912.1Use spaces, not tabs.
				this.data( parts[0] ) :
1913.1Use spaces, not tabs.
				data;
1915.1Use spaces, not tabs.
		} else {
1916.1Use spaces, not tabs.
			return this.each(function() {
1917.1Use spaces, not tabs.
				var self = jQuery( this ),
1918.1Use spaces, not tabs.
					args = [ parts[0], value ];
1920.1Use spaces, not tabs.
				self.triggerHandler( "setData" + parts[1] + "!", args );
1921.1Use spaces, not tabs.
				jQuery.data( this, key, value );
1922.1Use spaces, not tabs.
				self.triggerHandler( "changeData" + parts[1] + "!", args );
1923.1Use spaces, not tabs.
			});
1924.1Use spaces, not tabs.
		}
1925.1Use spaces, not tabs.
	},
1927.1Use spaces, not tabs.
	removeData: function( key ) {
1928.1Use spaces, not tabs.
		return this.each(function() {
1929.1Use spaces, not tabs.
			jQuery.removeData( this, key );
1930.1Use spaces, not tabs.
		});
1931.1Use spaces, not tabs.
	}
1935.1Use spaces, not tabs.
	// If nothing was found internally, try to fetch any
1936.1Use spaces, not tabs.
	// data from the HTML5 data-* attribute
1937.1Use spaces, not tabs.
	if ( data === undefined && elem.nodeType === 1 ) {
1939.1Use spaces, not tabs.
		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
1941.1Use spaces, not tabs.
		data = elem.getAttribute( name );
1943.1Use spaces, not tabs.
		if ( typeof data === "string" ) {
1944.1Use spaces, not tabs.
			try {
1945.1Use spaces, not tabs.
				data = data === "true" ? true :
1946.1Use spaces, not tabs.
				data === "false" ? false :
1947.1Use spaces, not tabs.
				data === "null" ? null :
1948.1Use spaces, not tabs.
				jQuery.isNumeric( data ) ? parseFloat( data ) :
1949.1Use spaces, not tabs.
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
1950.1Use spaces, not tabs.
					data;
1951.1Use spaces, not tabs.
			} catch( e ) {}
1953.1Use spaces, not tabs.
			// Make sure we set the data so it isn't changed later
1954.1Use spaces, not tabs.
			jQuery.data( elem, key, data );
1956.1Use spaces, not tabs.
		} else {
1957.1Use spaces, not tabs.
			data = undefined;
1958.1Use spaces, not tabs.
		}
1959.1Use spaces, not tabs.
	}
1961.1Use spaces, not tabs.
	return data;
1966.1Use spaces, not tabs.
	for ( var name in obj ) {
1968.1Use spaces, not tabs.
		// if the public data object is empty, the private is still empty
1969.1Use spaces, not tabs.
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
1970.1Use spaces, not tabs.
			continue;
1971.1Use spaces, not tabs.
		}
1972.1Use spaces, not tabs.
		if ( name !== "toJSON" ) {
1973.1Use spaces, not tabs.
			return false;
1974.1Use spaces, not tabs.
		}
1975.1Use spaces, not tabs.
	}
1977.1Use spaces, not tabs.
	return true;
1984.1Use spaces, not tabs.
	var deferDataKey = type + "defer",
1985.1Use spaces, not tabs.
		queueDataKey = type + "queue",
1986.1Use spaces, not tabs.
		markDataKey = type + "mark",
1987.1Use spaces, not tabs.
		defer = jQuery._data( elem, deferDataKey );
1988.1Use spaces, not tabs.
	if ( defer &&
1989.1Use spaces, not tabs.
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
1990.1Use spaces, not tabs.
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
1991.1Use spaces, not tabs.
		// Give room for hard-coded callbacks to fire first
1992.1Use spaces, not tabs.
		// and eventually mark/queue something else on the element
1993.1Use spaces, not tabs.
		setTimeout( function() {
1994.1Use spaces, not tabs.
			if ( !jQuery._data( elem, queueDataKey ) &&
1995.1Use spaces, not tabs.
				!jQuery._data( elem, markDataKey ) ) {
1996.1Use spaces, not tabs.
				jQuery.removeData( elem, deferDataKey, true );
1997.1Use spaces, not tabs.
				defer.fire();
1998.1Use spaces, not tabs.
			}
1999.1Use spaces, not tabs.
		}, 0 );
2000.1Use spaces, not tabs.
	}
2005.1Use spaces, not tabs.
	_mark: function( elem, type ) {
2006.1Use spaces, not tabs.
		if ( elem ) {
2007.1Use spaces, not tabs.
			type = ( type || "fx" ) + "mark";
2008.1Use spaces, not tabs.
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
2009.1Use spaces, not tabs.
		}
2010.1Use spaces, not tabs.
	},
2012.1Use spaces, not tabs.
	_unmark: function( force, elem, type ) {
2013.1Use spaces, not tabs.
		if ( force !== true ) {
2014.1Use spaces, not tabs.
			type = elem;
2015.1Use spaces, not tabs.
			elem = force;
2016.1Use spaces, not tabs.
			force = false;
2017.1Use spaces, not tabs.
		}
2018.1Use spaces, not tabs.
		if ( elem ) {
2019.1Use spaces, not tabs.
			type = type || "fx";
2020.1Use spaces, not tabs.
			var key = type + "mark",
2021.1Use spaces, not tabs.
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
2022.1Use spaces, not tabs.
			if ( count ) {
2023.1Use spaces, not tabs.
				jQuery._data( elem, key, count );
2024.1Use spaces, not tabs.
			} else {
2025.1Use spaces, not tabs.
				jQuery.removeData( elem, key, true );
2026.1Use spaces, not tabs.
				handleQueueMarkDefer( elem, type, "mark" );
2027.1Use spaces, not tabs.
			}
2028.1Use spaces, not tabs.
		}
2029.1Use spaces, not tabs.
	},
2031.1Use spaces, not tabs.
	queue: function( elem, type, data ) {
2032.1Use spaces, not tabs.
		var q;
2033.1Use spaces, not tabs.
		if ( elem ) {
2034.1Use spaces, not tabs.
			type = ( type || "fx" ) + "queue";
2035.1Use spaces, not tabs.
			q = jQuery._data( elem, type );
2037.1Use spaces, not tabs.
			// Speed up dequeue by getting out quickly if this is just a lookup
2038.1Use spaces, not tabs.
			if ( data ) {
2039.1Use spaces, not tabs.
				if ( !q || jQuery.isArray(data) ) {
2040.1Use spaces, not tabs.
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
2041.1Use spaces, not tabs.
				} else {
2042.1Use spaces, not tabs.
					q.push( data );
2043.1Use spaces, not tabs.
				}
2044.1Use spaces, not tabs.
			}
2045.1Use spaces, not tabs.
			return q || [];
2046.1Use spaces, not tabs.
		}
2047.1Use spaces, not tabs.
	},
2049.1Use spaces, not tabs.
	dequeue: function( elem, type ) {
2050.1Use spaces, not tabs.
		type = type || "fx";
2052.1Use spaces, not tabs.
		var queue = jQuery.queue( elem, type ),
2053.1Use spaces, not tabs.
			fn = queue.shift(),
2054.1Use spaces, not tabs.
			hooks = {};
2056.1Use spaces, not tabs.
		// If the fx queue is dequeued, always remove the progress sentinel
2057.1Use spaces, not tabs.
		if ( fn === "inprogress" ) {
2058.1Use spaces, not tabs.
			fn = queue.shift();
2059.1Use spaces, not tabs.
		}
2061.1Use spaces, not tabs.
		if ( fn ) {
2062.1Use spaces, not tabs.
			// Add a progress sentinel to prevent the fx queue from being
2063.1Use spaces, not tabs.
			// automatically dequeued
2064.1Use spaces, not tabs.
			if ( type === "fx" ) {
2065.1Use spaces, not tabs.
				queue.unshift( "inprogress" );
2066.1Use spaces, not tabs.
			}
2068.1Use spaces, not tabs.
			jQuery._data( elem, type + ".run", hooks );
2069.1Use spaces, not tabs.
			fn.call( elem, function() {
2070.1Use spaces, not tabs.
				jQuery.dequeue( elem, type );
2071.1Use spaces, not tabs.
			}, hooks );
2072.1Use spaces, not tabs.
		}
2074.1Use spaces, not tabs.
		if ( !queue.length ) {
2075.1Use spaces, not tabs.
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
2076.1Use spaces, not tabs.
			handleQueueMarkDefer( elem, type, "queue" );
2077.1Use spaces, not tabs.
		}
2078.1Use spaces, not tabs.
	}
2082.1Use spaces, not tabs.
	queue: function( type, data ) {
2083.1Use spaces, not tabs.
		if ( typeof type !== "string" ) {
2084.1Use spaces, not tabs.
			data = type;
2085.1Use spaces, not tabs.
			type = "fx";
2086.1Use spaces, not tabs.
		}
2088.1Use spaces, not tabs.
		if ( data === undefined ) {
2089.1Use spaces, not tabs.
			return jQuery.queue( this[0], type );
2090.1Use spaces, not tabs.
		}
2091.1Use spaces, not tabs.
		return this.each(function() {
2092.1Use spaces, not tabs.
			var queue = jQuery.queue( this, type, data );
2094.1Use spaces, not tabs.
			if ( type === "fx" && queue[0] !== "inprogress" ) {
2095.1Use spaces, not tabs.
				jQuery.dequeue( this, type );
2096.1Use spaces, not tabs.
			}
2097.1Use spaces, not tabs.
		});
2098.1Use spaces, not tabs.
	},
2099.1Use spaces, not tabs.
	dequeue: function( type ) {
2100.1Use spaces, not tabs.
		return this.each(function() {
2101.1Use spaces, not tabs.
			jQuery.dequeue( this, type );
2102.1Use spaces, not tabs.
		});
2103.1Use spaces, not tabs.
	},
2104.1Use spaces, not tabs.
	// Based off of the plugin by Clint Helfers, with permission.
2105.1Use spaces, not tabs.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
2106.1Use spaces, not tabs.
	delay: function( time, type ) {
2107.1Use spaces, not tabs.
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
2108.1Use spaces, not tabs.
		type = type || "fx";
2110.1Use spaces, not tabs.
		return this.queue( type, function( next, hooks ) {
2111.1Use spaces, not tabs.
			var timeout = setTimeout( next, time );
2112.1Use spaces, not tabs.
			hooks.stop = function() {
2113.1Use spaces, not tabs.
				clearTimeout( timeout );
2114.1Use spaces, not tabs.
			};
2115.1Use spaces, not tabs.
		});
2116.1Use spaces, not tabs.
	},
2117.1Use spaces, not tabs.
	clearQueue: function( type ) {
2118.1Use spaces, not tabs.
		return this.queue( type || "fx", [] );
2119.1Use spaces, not tabs.
	},
2120.1Use spaces, not tabs.
	// Get a promise resolved when queues of a certain type
2121.1Use spaces, not tabs.
	// are emptied (fx is the type by default)
2122.1Use spaces, not tabs.
	promise: function( type, object ) {
2123.1Use spaces, not tabs.
		if ( typeof type !== "string" ) {
2124.1Use spaces, not tabs.
			object = type;
2125.1Use spaces, not tabs.
			type = undefined;
2126.1Use spaces, not tabs.
		}
2127.1Use spaces, not tabs.
		type = type || "fx";
2128.1Use spaces, not tabs.
		var defer = jQuery.Deferred(),
2129.1Use spaces, not tabs.
			elements = this,
2130.1Use spaces, not tabs.
			i = elements.length,
2131.1Use spaces, not tabs.
			count = 1,
2132.1Use spaces, not tabs.
			deferDataKey = type + "defer",
2133.1Use spaces, not tabs.
			queueDataKey = type + "queue",
2134.1Use spaces, not tabs.
			markDataKey = type + "mark",
2135.1Use spaces, not tabs.
			tmp;
2136.1Use spaces, not tabs.
		function resolve() {
2137.1Use spaces, not tabs.
			if ( !( --count ) ) {
2138.1Use spaces, not tabs.
				defer.resolveWith( elements, [ elements ] );
2139.1Use spaces, not tabs.
			}
2140.1Use spaces, not tabs.
		}
2141.1Use spaces, not tabs.
		while( i-- ) {
2142.1Use spaces, not tabs.
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
2143.1Use spaces, not tabs.
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
2144.1Use spaces, not tabs.
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
2145.1Use spaces, not tabs.
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
2146.1Use spaces, not tabs.
				count++;
2147.1Use spaces, not tabs.
				tmp.add( resolve );
2148.1Use spaces, not tabs.
			}
2149.1Use spaces, not tabs.
		}
2150.1Use spaces, not tabs.
		resolve();
2151.1Use spaces, not tabs.
		return defer.promise();
2152.1Use spaces, not tabs.
	}
2159.1Use spaces, not tabs.
	rspace = /\s+/,
2160.1Use spaces, not tabs.
	rreturn = /\r/g,
2161.1Use spaces, not tabs.
	rtype = /^(?:button|input)$/i,
2162.1Use spaces, not tabs.
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
2163.1Use spaces, not tabs.
	rclickable = /^a(?:rea)?$/i,
2164.1Use spaces, not tabs.
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
2165.1Use spaces, not tabs.
	getSetAttribute = jQuery.support.getSetAttribute,
2166.1Use spaces, not tabs.
	nodeHook, boolHook, fixSpecified;
2169.1Use spaces, not tabs.
	attr: function( name, value ) {
2170.1Use spaces, not tabs.
		return jQuery.access( this, name, value, true, jQuery.attr );
2171.1Use spaces, not tabs.
	},
2173.1Use spaces, not tabs.
	removeAttr: function( name ) {
2174.1Use spaces, not tabs.
		return this.each(function() {
2175.1Use spaces, not tabs.
			jQuery.removeAttr( this, name );
2176.1Use spaces, not tabs.
		});
2177.1Use spaces, not tabs.
	},
2179.1Use spaces, not tabs.
	prop: function( name, value ) {
2180.1Use spaces, not tabs.
		return jQuery.access( this, name, value, true, jQuery.prop );
2181.1Use spaces, not tabs.
	},
2183.1Use spaces, not tabs.
	removeProp: function( name ) {
2184.1Use spaces, not tabs.
		name = jQuery.propFix[ name ] || name;
2185.1Use spaces, not tabs.
		return this.each(function() {
2186.1Use spaces, not tabs.
			// try/catch handles cases where IE balks (such as removing a property on window)
2187.1Use spaces, not tabs.
			try {
2188.1Use spaces, not tabs.
				this[ name ] = undefined;
2189.1Use spaces, not tabs.
				delete this[ name ];
2190.1Use spaces, not tabs.
			} catch( e ) {}
2191.1Use spaces, not tabs.
		});
2192.1Use spaces, not tabs.
	},
2194.1Use spaces, not tabs.
	addClass: function( value ) {
2195.1Use spaces, not tabs.
		var classNames, i, l, elem,
2196.1Use spaces, not tabs.
			setClass, c, cl;
2198.1Use spaces, not tabs.
		if ( jQuery.isFunction( value ) ) {
2199.1Use spaces, not tabs.
			return this.each(function( j ) {
2200.1Use spaces, not tabs.
				jQuery( this ).addClass( value.call(this, j, this.className) );
2201.1Use spaces, not tabs.
			});
2202.1Use spaces, not tabs.
		}
2204.1Use spaces, not tabs.
		if ( value && typeof value === "string" ) {
2205.1Use spaces, not tabs.
			classNames = value.split( rspace );
2207.1Use spaces, not tabs.
			for ( i = 0, l = this.length; i < l; i++ ) {
2208.1Use spaces, not tabs.
				elem = this[ i ];
2210.1Use spaces, not tabs.
				if ( elem.nodeType === 1 ) {
2211.1Use spaces, not tabs.
					if ( !elem.className && classNames.length === 1 ) {
2212.1Use spaces, not tabs.
						elem.className = value;
2214.1Use spaces, not tabs.
					} else {
2215.1Use spaces, not tabs.
						setClass = " " + elem.className + " ";
2217.1Use spaces, not tabs.
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
2218.1Use spaces, not tabs.
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
2219.1Use spaces, not tabs.
								setClass += classNames[ c ] + " ";
2220.1Use spaces, not tabs.
							}
2221.1Use spaces, not tabs.
						}
2222.1Use spaces, not tabs.
						elem.className = jQuery.trim( setClass );
2223.1Use spaces, not tabs.
					}
2224.1Use spaces, not tabs.
				}
2225.1Use spaces, not tabs.
			}
2226.1Use spaces, not tabs.
		}
2228.1Use spaces, not tabs.
		return this;
2229.1Use spaces, not tabs.
	},
2231.1Use spaces, not tabs.
	removeClass: function( value ) {
2232.1Use spaces, not tabs.
		var classNames, i, l, elem, className, c, cl;
2234.1Use spaces, not tabs.
		if ( jQuery.isFunction( value ) ) {
2235.1Use spaces, not tabs.
			return this.each(function( j ) {
2236.1Use spaces, not tabs.
				jQuery( this ).removeClass( value.call(this, j, this.className) );
2237.1Use spaces, not tabs.
			});
2238.1Use spaces, not tabs.
		}
2240.1Use spaces, not tabs.
		if ( (value && typeof value === "string") || value === undefined ) {
2241.1Use spaces, not tabs.
			classNames = ( value || "" ).split( rspace );
2243.1Use spaces, not tabs.
			for ( i = 0, l = this.length; i < l; i++ ) {
2244.1Use spaces, not tabs.
				elem = this[ i ];
2246.1Use spaces, not tabs.
				if ( elem.nodeType === 1 && elem.className ) {
2247.1Use spaces, not tabs.
					if ( value ) {
2248.1Use spaces, not tabs.
						className = (" " + elem.className + " ").replace( rclass, " " );
2249.1Use spaces, not tabs.
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
2250.1Use spaces, not tabs.
							className = className.replace(" " + classNames[ c ] + " ", " ");
2251.1Use spaces, not tabs.
						}
2252.1Use spaces, not tabs.
						elem.className = jQuery.trim( className );
2254.1Use spaces, not tabs.
					} else {
2255.1Use spaces, not tabs.
						elem.className = "";
2256.1Use spaces, not tabs.
					}
2257.1Use spaces, not tabs.
				}
2258.1Use spaces, not tabs.
			}
2259.1Use spaces, not tabs.
		}
2261.1Use spaces, not tabs.
		return this;
2262.1Use spaces, not tabs.
	},
2264.1Use spaces, not tabs.
	toggleClass: function( value, stateVal ) {
2265.1Use spaces, not tabs.
		var type = typeof value,
2266.1Use spaces, not tabs.
			isBool = typeof stateVal === "boolean";
2268.1Use spaces, not tabs.
		if ( jQuery.isFunction( value ) ) {
2269.1Use spaces, not tabs.
			return this.each(function( i ) {
2270.1Use spaces, not tabs.
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
2271.1Use spaces, not tabs.
			});
2272.1Use spaces, not tabs.
		}
2274.1Use spaces, not tabs.
		return this.each(function() {
2275.1Use spaces, not tabs.
			if ( type === "string" ) {
2276.1Use spaces, not tabs.
				// toggle individual class names
2277.1Use spaces, not tabs.
				var className,
2278.1Use spaces, not tabs.
					i = 0,
2279.1Use spaces, not tabs.
					self = jQuery( this ),
2280.1Use spaces, not tabs.
					state = stateVal,
2281.1Use spaces, not tabs.
					classNames = value.split( rspace );
2283.1Use spaces, not tabs.
				while ( (className = classNames[ i++ ]) ) {
2284.1Use spaces, not tabs.
					// check each className given, space seperated list
2285.1Use spaces, not tabs.
					state = isBool ? state : !self.hasClass( className );
2286.1Use spaces, not tabs.
					self[ state ? "addClass" : "removeClass" ]( className );
2287.1Use spaces, not tabs.
				}
2289.1Use spaces, not tabs.
			} else if ( type === "undefined" || type === "boolean" ) {
2290.1Use spaces, not tabs.
				if ( this.className ) {
2291.1Use spaces, not tabs.
					// store className if set
2292.1Use spaces, not tabs.
					jQuery._data( this, "__className__", this.className );
2293.1Use spaces, not tabs.
				}
2295.1Use spaces, not tabs.
				// toggle whole className
2296.1Use spaces, not tabs.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
2297.1Use spaces, not tabs.
			}
2298.1Use spaces, not tabs.
		});
2299.1Use spaces, not tabs.
	},
2301.1Use spaces, not tabs.
	hasClass: function( selector ) {
2302.1Use spaces, not tabs.
		var className = " " + selector + " ",
2303.1Use spaces, not tabs.
			i = 0,
2304.1Use spaces, not tabs.
			l = this.length;
2305.1Use spaces, not tabs.
		for ( ; i < l; i++ ) {
2306.1Use spaces, not tabs.
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
2307.1Use spaces, not tabs.
				return true;
2308.1Use spaces, not tabs.
			}
2309.1Use spaces, not tabs.
		}
2311.1Use spaces, not tabs.
		return false;
2312.1Use spaces, not tabs.
	},
2314.1Use spaces, not tabs.
	val: function( value ) {
2315.1Use spaces, not tabs.
		var hooks, ret, isFunction,
2316.1Use spaces, not tabs.
			elem = this[0];
2318.1Use spaces, not tabs.
		if ( !arguments.length ) {
2319.1Use spaces, not tabs.
			if ( elem ) {
2320.1Use spaces, not tabs.
				hooks = jQuery.valHooks[ elem.nodeName.toLowerCase() ] || jQuery.valHooks[ elem.type ];
2322.1Use spaces, not tabs.
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
2323.1Use spaces, not tabs.
					return ret;
2324.1Use spaces, not tabs.
				}
2326.1Use spaces, not tabs.
				ret = elem.value;
2328.1Use spaces, not tabs.
				return typeof ret === "string" ?
2329.1Use spaces, not tabs.
					// handle most common string cases
2330.1Use spaces, not tabs.
					ret.replace(rreturn, "") :
2331.1Use spaces, not tabs.
					// handle cases where value is null/undef or number
2332.1Use spaces, not tabs.
					ret == null ? "" : ret;
2333.1Use spaces, not tabs.
			}
2335.1Use spaces, not tabs.
			return;
2336.1Use spaces, not tabs.
		}
2338.1Use spaces, not tabs.
		isFunction = jQuery.isFunction( value );
2340.1Use spaces, not tabs.
		return this.each(function( i ) {
2341.1Use spaces, not tabs.
			var self = jQuery(this), val;
2343.1Use spaces, not tabs.
			if ( this.nodeType !== 1 ) {
2344.1Use spaces, not tabs.
				return;
2345.1Use spaces, not tabs.
			}
2347.1Use spaces, not tabs.
			if ( isFunction ) {
2348.1Use spaces, not tabs.
				val = value.call( this, i, self.val() );
2349.1Use spaces, not tabs.
			} else {
2350.1Use spaces, not tabs.
				val = value;
2351.1Use spaces, not tabs.
			}
2353.1Use spaces, not tabs.
			// Treat null/undefined as ""; convert numbers to string
2354.1Use spaces, not tabs.
			if ( val == null ) {
2355.1Use spaces, not tabs.
				val = "";
2356.1Use spaces, not tabs.
			} else if ( typeof val === "number" ) {
2357.1Use spaces, not tabs.
				val += "";
2358.1Use spaces, not tabs.
			} else if ( jQuery.isArray( val ) ) {
2359.1Use spaces, not tabs.
				val = jQuery.map(val, function ( value ) {
2360.1Use spaces, not tabs.
					return value == null ? "" : value + "";
2361.1Use spaces, not tabs.
				});
2362.1Use spaces, not tabs.
			}
2364.1Use spaces, not tabs.
			hooks = jQuery.valHooks[ this.nodeName.toLowerCase() ] || jQuery.valHooks[ this.type ];
2366.1Use spaces, not tabs.
			// If set returns undefined, fall back to normal setting
2367.1Use spaces, not tabs.
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
2368.1Use spaces, not tabs.
				this.value = val;
2369.1Use spaces, not tabs.
			}
2370.1Use spaces, not tabs.
		});
2371.1Use spaces, not tabs.
	}
2375.1Use spaces, not tabs.
	valHooks: {
2376.1Use spaces, not tabs.
		option: {
2377.1Use spaces, not tabs.
			get: function( elem ) {
2378.1Use spaces, not tabs.
				// attributes.value is undefined in Blackberry 4.7 but
2379.1Use spaces, not tabs.
				// uses .value. See #6932
2380.1Use spaces, not tabs.
				var val = elem.attributes.value;
2381.1Use spaces, not tabs.
				return !val || val.specified ? elem.value : elem.text;
2382.1Use spaces, not tabs.
			}
2383.1Use spaces, not tabs.
		},
2384.1Use spaces, not tabs.
		select: {
2385.1Use spaces, not tabs.
			get: function( elem ) {
2386.1Use spaces, not tabs.
				var value, i, max, option,
2387.1Use spaces, not tabs.
					index = elem.selectedIndex,
2388.1Use spaces, not tabs.
					values = [],
2389.1Use spaces, not tabs.
					options = elem.options,
2390.1Use spaces, not tabs.
					one = elem.type === "select-one";
2392.1Use spaces, not tabs.
				// Nothing was selected
2393.1Use spaces, not tabs.
				if ( index < 0 ) {
2394.1Use spaces, not tabs.
					return null;
2395.1Use spaces, not tabs.
				}
2397.1Use spaces, not tabs.
				// Loop through all the selected options
2398.1Use spaces, not tabs.
				i = one ? index : 0;
2399.1Use spaces, not tabs.
				max = one ? index + 1 : options.length;
2400.1Use spaces, not tabs.
				for ( ; i < max; i++ ) {
2401.1Use spaces, not tabs.
					option = options[ i ];
2403.1Use spaces, not tabs.
					// Don't return options that are disabled or in a disabled optgroup
2404.1Use spaces, not tabs.
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
2405.1Use spaces, not tabs.
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {
2407.1Use spaces, not tabs.
						// Get the specific value for the option
2408.1Use spaces, not tabs.
						value = jQuery( option ).val();
2410.1Use spaces, not tabs.
						// We don't need an array for one selects
2411.1Use spaces, not tabs.
						if ( one ) {
2412.1Use spaces, not tabs.
							return value;
2413.1Use spaces, not tabs.
						}
2415.1Use spaces, not tabs.
						// Multi-Selects return an array
2416.1Use spaces, not tabs.
						values.push( value );
2417.1Use spaces, not tabs.
					}
2418.1Use spaces, not tabs.
				}
2420.1Use spaces, not tabs.
				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
2421.1Use spaces, not tabs.
				if ( one && !values.length && options.length ) {
2422.1Use spaces, not tabs.
					return jQuery( options[ index ] ).val();
2423.1Use spaces, not tabs.
				}
2425.1Use spaces, not tabs.
				return values;
2426.1Use spaces, not tabs.
			},
2428.1Use spaces, not tabs.
			set: function( elem, value ) {
2429.1Use spaces, not tabs.
				var values = jQuery.makeArray( value );
2431.1Use spaces, not tabs.
				jQuery(elem).find("option").each(function() {
2432.1Use spaces, not tabs.
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
2433.1Use spaces, not tabs.
				});
2435.1Use spaces, not tabs.
				if ( !values.length ) {
2436.1Use spaces, not tabs.
					elem.selectedIndex = -1;
2437.1Use spaces, not tabs.
				}
2438.1Use spaces, not tabs.
				return values;
2439.1Use spaces, not tabs.
			}
2440.1Use spaces, not tabs.
		}
2441.1Use spaces, not tabs.
	},
2443.1Use spaces, not tabs.
	attrFn: {
2444.1Use spaces, not tabs.
		val: true,
2445.1Use spaces, not tabs.
		css: true,
2446.1Use spaces, not tabs.
		html: true,
2447.1Use spaces, not tabs.
		text: true,
2448.1Use spaces, not tabs.
		data: true,
2449.1Use spaces, not tabs.
		width: true,
2450.1Use spaces, not tabs.
		height: true,
2451.1Use spaces, not tabs.
		offset: true
2452.1Use spaces, not tabs.
	},
2454.1Use spaces, not tabs.
	attr: function( elem, name, value, pass ) {
2455.1Use spaces, not tabs.
		var ret, hooks, notxml,
2456.1Use spaces, not tabs.
			nType = elem.nodeType;
2458.1Use spaces, not tabs.
		// don't get/set attributes on text, comment and attribute nodes
2459.1Use spaces, not tabs.
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
2460.1Use spaces, not tabs.
			return;
2461.1Use spaces, not tabs.
		}
2463.1Use spaces, not tabs.
		if ( pass && name in jQuery.attrFn ) {
2464.1Use spaces, not tabs.
			return jQuery( elem )[ name ]( value );
2465.1Use spaces, not tabs.
		}
2467.1Use spaces, not tabs.
		// Fallback to prop when attributes are not supported
2468.1Use spaces, not tabs.
		if ( typeof elem.getAttribute === "undefined" ) {
2469.1Use spaces, not tabs.
			return jQuery.prop( elem, name, value );
2470.1Use spaces, not tabs.
		}
2472.1Use spaces, not tabs.
		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
2474.1Use spaces, not tabs.
		// All attributes are lowercase
2475.1Use spaces, not tabs.
		// Grab necessary hook if one is defined
2476.1Use spaces, not tabs.
		if ( notxml ) {
2477.1Use spaces, not tabs.
			name = name.toLowerCase();
2478.1Use spaces, not tabs.
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
2479.1Use spaces, not tabs.
		}
2481.1Use spaces, not tabs.
		if ( value !== undefined ) {
2483.1Use spaces, not tabs.
			if ( value === null ) {
2484.1Use spaces, not tabs.
				jQuery.removeAttr( elem, name );
2485.1Use spaces, not tabs.
				return;
2487.1Use spaces, not tabs.
			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
2488.1Use spaces, not tabs.
				return ret;
2490.1Use spaces, not tabs.
			} else {
2491.1Use spaces, not tabs.
				elem.setAttribute( name, "" + value );
2492.1Use spaces, not tabs.
				return value;
2493.1Use spaces, not tabs.
			}
2495.1Use spaces, not tabs.
		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
2496.1Use spaces, not tabs.
			return ret;
2498.1Use spaces, not tabs.
		} else {
2500.1Use spaces, not tabs.
			ret = elem.getAttribute( name );
2502.1Use spaces, not tabs.
			// Non-existent attributes return null, we normalize to undefined
2503.1Use spaces, not tabs.
			return ret === null ?
2504.1Use spaces, not tabs.
				undefined :
2505.1Use spaces, not tabs.
				ret;
2506.1Use spaces, not tabs.
		}
2507.1Use spaces, not tabs.
	},
2509.1Use spaces, not tabs.
	removeAttr: function( elem, value ) {
2510.1Use spaces, not tabs.
		var propName, attrNames, name, l,
2511.1Use spaces, not tabs.
			i = 0;
2513.1Use spaces, not tabs.
		if ( value && elem.nodeType === 1 ) {
2514.1Use spaces, not tabs.
			attrNames = value.toLowerCase().split( rspace );
2515.1Use spaces, not tabs.
			l = attrNames.length;
2517.1Use spaces, not tabs.
			for ( ; i < l; i++ ) {
2518.1Use spaces, not tabs.
				name = attrNames[ i ];
2520.1Use spaces, not tabs.
				if ( name ) {
2521.1Use spaces, not tabs.
					propName = jQuery.propFix[ name ] || name;
2523.1Use spaces, not tabs.
					// See #9699 for explanation of this approach (setting first, then removal)
2524.1Use spaces, not tabs.
					jQuery.attr( elem, name, "" );
2525.1Use spaces, not tabs.
					elem.removeAttribute( getSetAttribute ? name : propName );
2527.1Use spaces, not tabs.
					// Set corresponding property to false for boolean attributes
2528.1Use spaces, not tabs.
					if ( rboolean.test( name ) && propName in elem ) {
2529.1Use spaces, not tabs.
						elem[ propName ] = false;
2530.1Use spaces, not tabs.
					}
2531.1Use spaces, not tabs.
				}
2532.1Use spaces, not tabs.
			}
2533.1Use spaces, not tabs.
		}
2534.1Use spaces, not tabs.
	},
2536.1Use spaces, not tabs.
	attrHooks: {
2537.1Use spaces, not tabs.
		type: {
2538.1Use spaces, not tabs.
			set: function( elem, value ) {
2539.1Use spaces, not tabs.
				// We can't allow the type property to be changed (since it causes problems in IE)
2540.1Use spaces, not tabs.
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
2541.1Use spaces, not tabs.
					jQuery.error( "type property can't be changed" );
2542.1Use spaces, not tabs.
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
2543.1Use spaces, not tabs.
					// Setting the type on a radio button after the value resets the value in IE6-9
2544.1Use spaces, not tabs.
					// Reset value to it's default in case type is set after value
2545.1Use spaces, not tabs.
					// This is for element creation
2546.1Use spaces, not tabs.
					var val = elem.value;
2547.1Use spaces, not tabs.
					elem.setAttribute( "type", value );
2548.1Use spaces, not tabs.
					if ( val ) {
2549.1Use spaces, not tabs.
						elem.value = val;
2550.1Use spaces, not tabs.
					}
2551.1Use spaces, not tabs.
					return value;
2552.1Use spaces, not tabs.
				}
2553.1Use spaces, not tabs.
			}
2554.1Use spaces, not tabs.
		},
2555.1Use spaces, not tabs.
		// Use the value property for back compat
2556.1Use spaces, not tabs.
		// Use the nodeHook for button elements in IE6/7 (#1954)
2557.1Use spaces, not tabs.
		value: {
2558.1Use spaces, not tabs.
			get: function( elem, name ) {
2559.1Use spaces, not tabs.
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
2560.1Use spaces, not tabs.
					return nodeHook.get( elem, name );
2561.1Use spaces, not tabs.
				}
2562.1Use spaces, not tabs.
				return name in elem ?
2563.1Use spaces, not tabs.
					elem.value :
2564.1Use spaces, not tabs.
					null;
2565.1Use spaces, not tabs.
			},
2566.1Use spaces, not tabs.
			set: function( elem, value, name ) {
2567.1Use spaces, not tabs.
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
2568.1Use spaces, not tabs.
					return nodeHook.set( elem, value, name );
2569.1Use spaces, not tabs.
				}
2570.1Use spaces, not tabs.
				// Does not return so that setAttribute is also used
2571.1Use spaces, not tabs.
				elem.value = value;
2572.1Use spaces, not tabs.
			}
2573.1Use spaces, not tabs.
		}
2574.1Use spaces, not tabs.
	},
2576.1Use spaces, not tabs.
	propFix: {
2577.1Use spaces, not tabs.
		tabindex: "tabIndex",
2578.1Use spaces, not tabs.
		readonly: "readOnly",
2579.1Use spaces, not tabs.
		"for": "htmlFor",
2580.1Use spaces, not tabs.
		"class": "className",
2581.1Use spaces, not tabs.
		maxlength: "maxLength",
2582.1Use spaces, not tabs.
		cellspacing: "cellSpacing",
2583.1Use spaces, not tabs.
		cellpadding: "cellPadding",
2584.1Use spaces, not tabs.
		rowspan: "rowSpan",
2585.1Use spaces, not tabs.
		colspan: "colSpan",
2586.1Use spaces, not tabs.
		usemap: "useMap",
2587.1Use spaces, not tabs.
		frameborder: "frameBorder",
2588.1Use spaces, not tabs.
		contenteditable: "contentEditable"
2589.1Use spaces, not tabs.
	},
2591.1Use spaces, not tabs.
	prop: function( elem, name, value ) {
2592.1Use spaces, not tabs.
		var ret, hooks, notxml,
2593.1Use spaces, not tabs.
			nType = elem.nodeType;
2595.1Use spaces, not tabs.
		// don't get/set properties on text, comment and attribute nodes
2596.1Use spaces, not tabs.
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
2597.1Use spaces, not tabs.
			return;
2598.1Use spaces, not tabs.
		}
2600.1Use spaces, not tabs.
		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
2602.1Use spaces, not tabs.
		if ( notxml ) {
2603.1Use spaces, not tabs.
			// Fix name and attach hooks
2604.1Use spaces, not tabs.
			name = jQuery.propFix[ name ] || name;
2605.1Use spaces, not tabs.
			hooks = jQuery.propHooks[ name ];
2606.1Use spaces, not tabs.
		}
2608.1Use spaces, not tabs.
		if ( value !== undefined ) {
2609.1Use spaces, not tabs.
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
2610.1Use spaces, not tabs.
				return ret;
2612.1Use spaces, not tabs.
			} else {
2613.1Use spaces, not tabs.
				return ( elem[ name ] = value );
2614.1Use spaces, not tabs.
			}
2616.1Use spaces, not tabs.
		} else {
2617.1Use spaces, not tabs.
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
2618.1Use spaces, not tabs.
				return ret;
2620.1Use spaces, not tabs.
			} else {
2621.1Use spaces, not tabs.
				return elem[ name ];
2622.1Use spaces, not tabs.
			}
2623.1Use spaces, not tabs.
		}
2624.1Use spaces, not tabs.
	},
2626.1Use spaces, not tabs.
	propHooks: {
2627.1Use spaces, not tabs.
		tabIndex: {
2628.1Use spaces, not tabs.
			get: function( elem ) {
2629.1Use spaces, not tabs.
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
2630.1Use spaces, not tabs.
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
2631.1Use spaces, not tabs.
				var attributeNode = elem.getAttributeNode("tabindex");
2633.1Use spaces, not tabs.
				return attributeNode && attributeNode.specified ?
2634.1Use spaces, not tabs.
					parseInt( attributeNode.value, 10 ) :
2635.1Use spaces, not tabs.
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
2636.1Use spaces, not tabs.
						0 :
2637.1Use spaces, not tabs.
						undefined;
2638.1Use spaces, not tabs.
			}
2639.1Use spaces, not tabs.
		}
2640.1Use spaces, not tabs.
	}
2648.1Use spaces, not tabs.
	get: function( elem, name ) {
2649.1Use spaces, not tabs.
		// Align boolean attributes with corresponding properties
2650.1Use spaces, not tabs.
		// Fall back to attribute presence where some booleans are not supported
2651.1Use spaces, not tabs.
		var attrNode,
2652.1Use spaces, not tabs.
			property = jQuery.prop( elem, name );
2653.1Use spaces, not tabs.
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
2654.1Use spaces, not tabs.
			name.toLowerCase() :
2655.1Use spaces, not tabs.
			undefined;
2656.1Use spaces, not tabs.
	},
2657.1Use spaces, not tabs.
	set: function( elem, value, name ) {
2658.1Use spaces, not tabs.
		var propName;
2659.1Use spaces, not tabs.
		if ( value === false ) {
2660.1Use spaces, not tabs.
			// Remove boolean attributes when set to false
2661.1Use spaces, not tabs.
			jQuery.removeAttr( elem, name );
2662.1Use spaces, not tabs.
		} else {
2663.1Use spaces, not tabs.
			// value is true since we know at this point it's type boolean and not false
2664.1Use spaces, not tabs.
			// Set boolean attributes to the same name and set the DOM property
2665.1Use spaces, not tabs.
			propName = jQuery.propFix[ name ] || name;
2666.1Use spaces, not tabs.
			if ( propName in elem ) {
2667.1Use spaces, not tabs.
				// Only set the IDL specifically if it already exists on the element
2668.1Use spaces, not tabs.
				elem[ propName ] = true;
2669.1Use spaces, not tabs.
			}
2671.1Use spaces, not tabs.
			elem.setAttribute( name, name.toLowerCase() );
2672.1Use spaces, not tabs.
		}
2673.1Use spaces, not tabs.
		return name;
2674.1Use spaces, not tabs.
	}
2680.1Use spaces, not tabs.
	fixSpecified = {
2681.1Use spaces, not tabs.
		name: true,
2682.1Use spaces, not tabs.
		id: true
2683.1Use spaces, not tabs.
	};
2685.1Use spaces, not tabs.
	// Use this for any attribute in IE6/7
2686.1Use spaces, not tabs.
	// This fixes almost every IE6/7 issue
2687.1Use spaces, not tabs.
	nodeHook = jQuery.valHooks.button = {
2688.1Use spaces, not tabs.
		get: function( elem, name ) {
2689.1Use spaces, not tabs.
			var ret;
2690.1Use spaces, not tabs.
			ret = elem.getAttributeNode( name );
2691.1Use spaces, not tabs.
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
2692.1Use spaces, not tabs.
				ret.nodeValue :
2693.1Use spaces, not tabs.
				undefined;
2694.1Use spaces, not tabs.
		},
2695.1Use spaces, not tabs.
		set: function( elem, value, name ) {
2696.1Use spaces, not tabs.
			// Set the existing or create a new attribute node
2697.1Use spaces, not tabs.
			var ret = elem.getAttributeNode( name );
2698.1Use spaces, not tabs.
			if ( !ret ) {
2699.1Use spaces, not tabs.
				ret = document.createAttribute( name );
2700.1Use spaces, not tabs.
				elem.setAttributeNode( ret );
2701.1Use spaces, not tabs.
			}
2702.1Use spaces, not tabs.
			return ( ret.nodeValue = value + "" );
2703.1Use spaces, not tabs.
		}
2704.1Use spaces, not tabs.
	};
2706.1Use spaces, not tabs.
	// Apply the nodeHook to tabindex
2707.1Use spaces, not tabs.
	jQuery.attrHooks.tabindex.set = nodeHook.set;
2709.1Use spaces, not tabs.
	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
2710.1Use spaces, not tabs.
	// This is for removals
2711.1Use spaces, not tabs.
	jQuery.each([ "width", "height" ], function( i, name ) {
2712.1Use spaces, not tabs.
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
2713.1Use spaces, not tabs.
			set: function( elem, value ) {
2714.1Use spaces, not tabs.
				if ( value === "" ) {
2715.1Use spaces, not tabs.
					elem.setAttribute( name, "auto" );
2716.1Use spaces, not tabs.
					return value;
2717.1Use spaces, not tabs.
				}
2718.1Use spaces, not tabs.
			}
2719.1Use spaces, not tabs.
		});
2720.1Use spaces, not tabs.
	});
2722.1Use spaces, not tabs.
	// Set contenteditable to false on removals(#10429)
2723.1Use spaces, not tabs.
	// Setting to empty string throws an error as an invalid value
2724.1Use spaces, not tabs.
	jQuery.attrHooks.contenteditable = {
2725.1Use spaces, not tabs.
		get: nodeHook.get,
2726.1Use spaces, not tabs.
		set: function( elem, value, name ) {
2727.1Use spaces, not tabs.
			if ( value === "" ) {
2728.1Use spaces, not tabs.
				value = "false";
2729.1Use spaces, not tabs.
			}
2730.1Use spaces, not tabs.
			nodeHook.set( elem, value, name );
2731.1Use spaces, not tabs.
		}
2732.1Use spaces, not tabs.
	};
2738.1Use spaces, not tabs.
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
2739.1Use spaces, not tabs.
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
2740.1Use spaces, not tabs.
			get: function( elem ) {
2741.1Use spaces, not tabs.
				var ret = elem.getAttribute( name, 2 );
2742.1Use spaces, not tabs.
				return ret === null ? undefined : ret;
2743.1Use spaces, not tabs.
			}
2744.1Use spaces, not tabs.
		});
2745.1Use spaces, not tabs.
	});
2749.1Use spaces, not tabs.
	jQuery.attrHooks.style = {
2750.1Use spaces, not tabs.
		get: function( elem ) {
2751.1Use spaces, not tabs.
			// Return undefined in the case of empty string
2752.1Use spaces, not tabs.
			// Normalize to lowercase since IE uppercases css property names
2753.1Use spaces, not tabs.
			return elem.style.cssText.toLowerCase() || undefined;
2754.1Use spaces, not tabs.
		},
2755.1Use spaces, not tabs.
		set: function( elem, value ) {
2756.1Use spaces, not tabs.
			return ( elem.style.cssText = "" + value );
2757.1Use spaces, not tabs.
		}
2758.1Use spaces, not tabs.
	};
2764.1Use spaces, not tabs.
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
2765.1Use spaces, not tabs.
		get: function( elem ) {
2766.1Use spaces, not tabs.
			var parent = elem.parentNode;
2768.1Use spaces, not tabs.
			if ( parent ) {
2769.1Use spaces, not tabs.
				parent.selectedIndex;
2771.1Use spaces, not tabs.
				// Make sure that it also works with optgroups, see #5701
2772.1Use spaces, not tabs.
				if ( parent.parentNode ) {
2773.1Use spaces, not tabs.
					parent.parentNode.selectedIndex;
2774.1Use spaces, not tabs.
				}
2775.1Use spaces, not tabs.
			}
2776.1Use spaces, not tabs.
			return null;
2777.1Use spaces, not tabs.
		}
2778.1Use spaces, not tabs.
	});
2783.1Use spaces, not tabs.
	jQuery.propFix.enctype = "encoding";
2788.1Use spaces, not tabs.
	jQuery.each([ "radio", "checkbox" ], function() {
2789.1Use spaces, not tabs.
		jQuery.valHooks[ this ] = {
2790.1Use spaces, not tabs.
			get: function( elem ) {
2791.1Use spaces, not tabs.
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
2792.1Use spaces, not tabs.
				return elem.getAttribute("value") === null ? "on" : elem.value;
2793.1Use spaces, not tabs.
			}
2794.1Use spaces, not tabs.
		};
2795.1Use spaces, not tabs.
	});
2798.1Use spaces, not tabs.
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
2799.1Use spaces, not tabs.
		set: function( elem, value ) {
2800.1Use spaces, not tabs.
			if ( jQuery.isArray( value ) ) {
2801.1Use spaces, not tabs.
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
2802.1Use spaces, not tabs.
			}
2803.1Use spaces, not tabs.
		}
2804.1Use spaces, not tabs.
	});
2811.1Use spaces, not tabs.
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
2812.1Use spaces, not tabs.
	rhoverHack = /\bhover(\.\S+)?\b/,
2813.1Use spaces, not tabs.
	rkeyEvent = /^key/,
2814.1Use spaces, not tabs.
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
2815.1Use spaces, not tabs.
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
2816.1Use spaces, not tabs.
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
2817.1Use spaces, not tabs.
	quickParse = function( selector ) {
2818.1Use spaces, not tabs.
		var quick = rquickIs.exec( selector );
2819.1Use spaces, not tabs.
		if ( quick ) {
2820.1Use spaces, not tabs.
			//   0  1    2   3
2821.1Use spaces, not tabs.
			// [ _, tag, id, class ]
2822.1Use spaces, not tabs.
			quick[1] = ( quick[1] || "" ).toLowerCase();
2823.1Use spaces, not tabs.
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
2824.1Use spaces, not tabs.
		}
2825.1Use spaces, not tabs.
		return quick;
2826.1Use spaces, not tabs.
	},
2827.1Use spaces, not tabs.
	quickIs = function( elem, m ) {
2828.1Use spaces, not tabs.
		var attrs = elem.attributes || {};
2829.1Use spaces, not tabs.
		return (
2830.1Use spaces, not tabs.
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
2831.1Use spaces, not tabs.
			(!m[2] || (attrs.id || {}).value === m[2]) &&
2832.1Use spaces, not tabs.
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
2833.1Use spaces, not tabs.
		);
2834.1Use spaces, not tabs.
	},
2835.1Use spaces, not tabs.
	hoverHack = function( events ) {
2836.1Use spaces, not tabs.
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
2837.1Use spaces, not tabs.
	};
2845.1Use spaces, not tabs.
	add: function( elem, types, handler, data, selector ) {
2847.1Use spaces, not tabs.
		var elemData, eventHandle, events,
2848.1Use spaces, not tabs.
			t, tns, type, namespaces, handleObj,
2849.1Use spaces, not tabs.
			handleObjIn, quick, handlers, special;
2851.1Use spaces, not tabs.
		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
2852.1Use spaces, not tabs.
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
2853.1Use spaces, not tabs.
			return;
2854.1Use spaces, not tabs.
		}
2856.1Use spaces, not tabs.
		// Caller can pass in an object of custom data in lieu of the handler
2857.1Use spaces, not tabs.
		if ( handler.handler ) {
2858.1Use spaces, not tabs.
			handleObjIn = handler;
2859.1Use spaces, not tabs.
			handler = handleObjIn.handler;
2860.1Use spaces, not tabs.
		}
2862.1Use spaces, not tabs.
		// Make sure that the handler has a unique ID, used to find/remove it later
2863.1Use spaces, not tabs.
		if ( !handler.guid ) {
2864.1Use spaces, not tabs.
			handler.guid = jQuery.guid++;
2865.1Use spaces, not tabs.
		}
2867.1Use spaces, not tabs.
		// Init the element's event structure and main handler, if this is the first
2868.1Use spaces, not tabs.
		events = elemData.events;
2869.1Use spaces, not tabs.
		if ( !events ) {
2870.1Use spaces, not tabs.
			elemData.events = events = {};
2871.1Use spaces, not tabs.
		}
2872.1Use spaces, not tabs.
		eventHandle = elemData.handle;
2873.1Use spaces, not tabs.
		if ( !eventHandle ) {
2874.1Use spaces, not tabs.
			elemData.handle = eventHandle = function( e ) {
2875.1Use spaces, not tabs.
				// Discard the second event of a jQuery.event.trigger() and
2876.1Use spaces, not tabs.
				// when an event is called after a page has unloaded
2877.1Use spaces, not tabs.
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
2878.1Use spaces, not tabs.
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
2879.1Use spaces, not tabs.
					undefined;
2880.1Use spaces, not tabs.
			};
2881.1Use spaces, not tabs.
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
2882.1Use spaces, not tabs.
			eventHandle.elem = elem;
2883.1Use spaces, not tabs.
		}
2885.1Use spaces, not tabs.
		// Handle multiple events separated by a space
2886.1Use spaces, not tabs.
		// jQuery(...).bind("mouseover mouseout", fn);
2887.1Use spaces, not tabs.
		types = jQuery.trim( hoverHack(types) ).split( " " );
2888.1Use spaces, not tabs.
		for ( t = 0; t < types.length; t++ ) {
2890.1Use spaces, not tabs.
			tns = rtypenamespace.exec( types[t] ) || [];
2891.1Use spaces, not tabs.
			type = tns[1];
2892.1Use spaces, not tabs.
			namespaces = ( tns[2] || "" ).split( "." ).sort();
2894.1Use spaces, not tabs.
			// If event changes its type, use the special event handlers for the changed type
2895.1Use spaces, not tabs.
			special = jQuery.event.special[ type ] || {};
2897.1Use spaces, not tabs.
			// If selector defined, determine special event api type, otherwise given type
2898.1Use spaces, not tabs.
			type = ( selector ? special.delegateType : special.bindType ) || type;
2900.1Use spaces, not tabs.
			// Update special based on newly reset type
2901.1Use spaces, not tabs.
			special = jQuery.event.special[ type ] || {};
2903.1Use spaces, not tabs.
			// handleObj is passed to all event handlers
2904.1Use spaces, not tabs.
			handleObj = jQuery.extend({
2905.1Use spaces, not tabs.
				type: type,
2906.1Use spaces, not tabs.
				origType: tns[1],
2907.1Use spaces, not tabs.
				data: data,
2908.1Use spaces, not tabs.
				handler: handler,
2909.1Use spaces, not tabs.
				guid: handler.guid,
2910.1Use spaces, not tabs.
				selector: selector,
2911.1Use spaces, not tabs.
				quick: quickParse( selector ),
2912.1Use spaces, not tabs.
				namespace: namespaces.join(".")
2913.1Use spaces, not tabs.
			}, handleObjIn );
2915.1Use spaces, not tabs.
			// Init the event handler queue if we're the first
2916.1Use spaces, not tabs.
			handlers = events[ type ];
2917.1Use spaces, not tabs.
			if ( !handlers ) {
2918.1Use spaces, not tabs.
				handlers = events[ type ] = [];
2919.1Use spaces, not tabs.
				handlers.delegateCount = 0;
2921.1Use spaces, not tabs.
				// Only use addEventListener/attachEvent if the special events handler returns false
2922.1Use spaces, not tabs.
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
2923.1Use spaces, not tabs.
					// Bind the global event handler to the element
2924.1Use spaces, not tabs.
					if ( elem.addEventListener ) {
2925.1Use spaces, not tabs.
						elem.addEventListener( type, eventHandle, false );
2927.1Use spaces, not tabs.
					} else if ( elem.attachEvent ) {
2928.1Use spaces, not tabs.
						elem.attachEvent( "on" + type, eventHandle );
2929.1Use spaces, not tabs.
					}
2930.1Use spaces, not tabs.
				}
2931.1Use spaces, not tabs.
			}
2933.1Use spaces, not tabs.
			if ( special.add ) {
2934.1Use spaces, not tabs.
				special.add.call( elem, handleObj );
2936.1Use spaces, not tabs.
				if ( !handleObj.handler.guid ) {
2937.1Use spaces, not tabs.
					handleObj.handler.guid = handler.guid;
2938.1Use spaces, not tabs.
				}
2939.1Use spaces, not tabs.
			}
2941.1Use spaces, not tabs.
			// Add to the element's handler list, delegates in front
2942.1Use spaces, not tabs.
			if ( selector ) {
2943.1Use spaces, not tabs.
				handlers.splice( handlers.delegateCount++, 0, handleObj );
2944.1Use spaces, not tabs.
			} else {
2945.1Use spaces, not tabs.
				handlers.push( handleObj );
2946.1Use spaces, not tabs.
			}
2948.1Use spaces, not tabs.
			// Keep track of which events have ever been used, for event optimization
2949.1Use spaces, not tabs.
			jQuery.event.global[ type ] = true;
2950.1Use spaces, not tabs.
		}
2952.1Use spaces, not tabs.
		// Nullify elem to prevent memory leaks in IE
2953.1Use spaces, not tabs.
		elem = null;
2954.1Use spaces, not tabs.
	},
2956.1Use spaces, not tabs.
	global: {},
2958.1Use spaces, not tabs.
	// Detach an event or set of events from an element
2959.1Use spaces, not tabs.
	remove: function( elem, types, handler, selector, mappedTypes ) {
2961.1Use spaces, not tabs.
		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
2962.1Use spaces, not tabs.
			t, tns, type, origType, namespaces, origCount,
2963.1Use spaces, not tabs.
			j, events, special, handle, eventType, handleObj;
2965.1Use spaces, not tabs.
		if ( !elemData || !(events = elemData.events) ) {
2966.1Use spaces, not tabs.
			return;
2967.1Use spaces, not tabs.
		}
2969.1Use spaces, not tabs.
		// Once for each type.namespace in types; type may be omitted
2970.1Use spaces, not tabs.
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
2971.1Use spaces, not tabs.
		for ( t = 0; t < types.length; t++ ) {
2972.1Use spaces, not tabs.
			tns = rtypenamespace.exec( types[t] ) || [];
2973.1Use spaces, not tabs.
			type = origType = tns[1];
2974.1Use spaces, not tabs.
			namespaces = tns[2];
2976.1Use spaces, not tabs.
			// Unbind all events (on this namespace, if provided) for the element
2977.1Use spaces, not tabs.
			if ( !type ) {
2978.1Use spaces, not tabs.
				for ( type in events ) {
2979.1Use spaces, not tabs.
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
2980.1Use spaces, not tabs.
				}
2981.1Use spaces, not tabs.
				continue;
2982.1Use spaces, not tabs.
			}
2984.1Use spaces, not tabs.
			special = jQuery.event.special[ type ] || {};
2985.1Use spaces, not tabs.
			type = ( selector? special.delegateType : special.bindType ) || type;
2986.1Use spaces, not tabs.
			eventType = events[ type ] || [];
2987.1Use spaces, not tabs.
			origCount = eventType.length;
2988.1Use spaces, not tabs.
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
2990.1Use spaces, not tabs.
			// Remove matching events
2991.1Use spaces, not tabs.
			for ( j = 0; j < eventType.length; j++ ) {
2992.1Use spaces, not tabs.
				handleObj = eventType[ j ];
2994.1Use spaces, not tabs.
				if ( ( mappedTypes || origType === handleObj.origType ) &&
2995.1Use spaces, not tabs.
					 ( !handler || handler.guid === handleObj.guid ) &&
2996.1Use spaces, not tabs.
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
2997.1Use spaces, not tabs.
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
2998.1Use spaces, not tabs.
					eventType.splice( j--, 1 );
3000.1Use spaces, not tabs.
					if ( handleObj.selector ) {
3001.1Use spaces, not tabs.
						eventType.delegateCount--;
3002.1Use spaces, not tabs.
					}
3003.1Use spaces, not tabs.
					if ( special.remove ) {
3004.1Use spaces, not tabs.
						special.remove.call( elem, handleObj );
3005.1Use spaces, not tabs.
					}
3006.1Use spaces, not tabs.
				}
3007.1Use spaces, not tabs.
			}
3009.1Use spaces, not tabs.
			// Remove generic event handler if we removed something and no more handlers exist
3010.1Use spaces, not tabs.
			// (avoids potential for endless recursion during removal of special event handlers)
3011.1Use spaces, not tabs.
			if ( eventType.length === 0 && origCount !== eventType.length ) {
3012.1Use spaces, not tabs.
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
3013.1Use spaces, not tabs.
					jQuery.removeEvent( elem, type, elemData.handle );
3014.1Use spaces, not tabs.
				}
3016.1Use spaces, not tabs.
				delete events[ type ];
3017.1Use spaces, not tabs.
			}
3018.1Use spaces, not tabs.
		}
3020.1Use spaces, not tabs.
		// Remove the expando if it's no longer used
3021.1Use spaces, not tabs.
		if ( jQuery.isEmptyObject( events ) ) {
3022.1Use spaces, not tabs.
			handle = elemData.handle;
3023.1Use spaces, not tabs.
			if ( handle ) {
3024.1Use spaces, not tabs.
				handle.elem = null;
3025.1Use spaces, not tabs.
			}
3027.1Use spaces, not tabs.
			// removeData also checks for emptiness and clears the expando if empty
3028.1Use spaces, not tabs.
			// so use it instead of delete
3029.1Use spaces, not tabs.
			jQuery.removeData( elem, [ "events", "handle" ], true );
3030.1Use spaces, not tabs.
		}
3031.1Use spaces, not tabs.
	},
3033.1Use spaces, not tabs.
	// Events that are safe to short-circuit if no handlers are attached.
3034.1Use spaces, not tabs.
	// Native DOM events should not be added, they may have inline handlers.
3035.1Use spaces, not tabs.
	customEvent: {
3036.1Use spaces, not tabs.
		"getData": true,
3037.1Use spaces, not tabs.
		"setData": true,
3038.1Use spaces, not tabs.
		"changeData": true
3039.1Use spaces, not tabs.
	},
3041.1Use spaces, not tabs.
	trigger: function( event, data, elem, onlyHandlers ) {
3042.1Use spaces, not tabs.
		// Don't do events on text and comment nodes
3043.1Use spaces, not tabs.
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
3044.1Use spaces, not tabs.
			return;
3045.1Use spaces, not tabs.
		}
3047.1Use spaces, not tabs.
		// Event object or event type
3048.1Use spaces, not tabs.
		var type = event.type || event,
3049.1Use spaces, not tabs.
			namespaces = [],
3050.1Use spaces, not tabs.
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;
3052.1Use spaces, not tabs.
		// focus/blur morphs to focusin/out; ensure we're not firing them right now
3053.1Use spaces, not tabs.
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
3054.1Use spaces, not tabs.
			return;
3055.1Use spaces, not tabs.
		}
3057.1Use spaces, not tabs.
		if ( type.indexOf( "!" ) >= 0 ) {
3058.1Use spaces, not tabs.
			// Exclusive events trigger only for the exact event (no namespaces)
3059.1Use spaces, not tabs.
			type = type.slice(0, -1);
3060.1Use spaces, not tabs.
			exclusive = true;
3061.1Use spaces, not tabs.
		}
3063.1Use spaces, not tabs.
		if ( type.indexOf( "." ) >= 0 ) {
3064.1Use spaces, not tabs.
			// Namespaced trigger; create a regexp to match event type in handle()
3065.1Use spaces, not tabs.
			namespaces = type.split(".");
3066.1Use spaces, not tabs.
			type = namespaces.shift();
3067.1Use spaces, not tabs.
			namespaces.sort();
3068.1Use spaces, not tabs.
		}
3070.1Use spaces, not tabs.
		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
3071.1Use spaces, not tabs.
			// No jQuery handlers for this event type, and it can't have inline handlers
3072.1Use spaces, not tabs.
			return;
3073.1Use spaces, not tabs.
		}
3075.1Use spaces, not tabs.
		// Caller can pass in an Event, Object, or just an event type string
3076.1Use spaces, not tabs.
		event = typeof event === "object" ?
3077.1Use spaces, not tabs.
			// jQuery.Event object
3078.1Use spaces, not tabs.
			event[ jQuery.expando ] ? event :
3079.1Use spaces, not tabs.
			// Object literal
3080.1Use spaces, not tabs.
			new jQuery.Event( type, event ) :
3081.1Use spaces, not tabs.
			// Just the event type (string)
3082.1Use spaces, not tabs.
			new jQuery.Event( type );
3084.1Use spaces, not tabs.
		event.type = type;
3085.1Use spaces, not tabs.
		event.isTrigger = true;
3086.1Use spaces, not tabs.
		event.exclusive = exclusive;
3087.1Use spaces, not tabs.
		event.namespace = namespaces.join( "." );
3088.1Use spaces, not tabs.
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
3089.1Use spaces, not tabs.
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";
3091.1Use spaces, not tabs.
		// Handle a global trigger
3092.1Use spaces, not tabs.
		if ( !elem ) {
3094.1Use spaces, not tabs.
			// TODO: Stop taunting the data cache; remove global events and always attach to document
3094.3Unexpected TODO comment.
			// TODO: Stop taunting the data cache; remove global events and always attach to document
3095.1Use spaces, not tabs.
			cache = jQuery.cache;
3096.1Use spaces, not tabs.
			for ( i in cache ) {
3097.1Use spaces, not tabs.
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
3098.1Use spaces, not tabs.
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
3099.1Use spaces, not tabs.
				}
3100.1Use spaces, not tabs.
			}
3101.1Use spaces, not tabs.
			return;
3102.1Use spaces, not tabs.
		}
3104.1Use spaces, not tabs.
		// Clean up the event in case it is being reused
3105.1Use spaces, not tabs.
		event.result = undefined;
3106.1Use spaces, not tabs.
		if ( !event.target ) {
3107.1Use spaces, not tabs.
			event.target = elem;
3108.1Use spaces, not tabs.
		}
3110.1Use spaces, not tabs.
		// Clone any incoming data and prepend the event, creating the handler arg list
3111.1Use spaces, not tabs.
		data = data != null ? jQuery.makeArray( data ) : [];
3112.1Use spaces, not tabs.
		data.unshift( event );
3114.1Use spaces, not tabs.
		// Allow special events to draw outside the lines
3115.1Use spaces, not tabs.
		special = jQuery.event.special[ type ] || {};
3116.1Use spaces, not tabs.
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
3117.1Use spaces, not tabs.
			return;
3118.1Use spaces, not tabs.
		}
3120.1Use spaces, not tabs.
		// Determine event propagation path in advance, per W3C events spec (#9951)
3121.1Use spaces, not tabs.
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
3122.1Use spaces, not tabs.
		eventPath = [[ elem, special.bindType || type ]];
3123.1Use spaces, not tabs.
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
3125.1Use spaces, not tabs.
			bubbleType = special.delegateType || type;
3126.1Use spaces, not tabs.
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
3127.1Use spaces, not tabs.
			old = null;
3128.1Use spaces, not tabs.
			for ( ; cur; cur = cur.parentNode ) {
3129.1Use spaces, not tabs.
				eventPath.push([ cur, bubbleType ]);
3130.1Use spaces, not tabs.
				old = cur;
3131.1Use spaces, not tabs.
			}
3133.1Use spaces, not tabs.
			// Only add window if we got to document (e.g., not plain obj or detached DOM)
3134.1Use spaces, not tabs.
			if ( old && old === elem.ownerDocument ) {
3135.1Use spaces, not tabs.
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
3136.1Use spaces, not tabs.
			}
3137.1Use spaces, not tabs.
		}
3139.1Use spaces, not tabs.
		// Fire handlers on the event path
3140.1Use spaces, not tabs.
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {
3142.1Use spaces, not tabs.
			cur = eventPath[i][0];
3143.1Use spaces, not tabs.
			event.type = eventPath[i][1];
3145.1Use spaces, not tabs.
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
3146.1Use spaces, not tabs.
			if ( handle ) {
3147.1Use spaces, not tabs.
				handle.apply( cur, data );
3148.1Use spaces, not tabs.
			}
3149.1Use spaces, not tabs.
			// Note that this is a bare JS function and not a jQuery handler
3150.1Use spaces, not tabs.
			handle = ontype && cur[ ontype ];
3151.1Use spaces, not tabs.
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
3152.1Use spaces, not tabs.
				event.preventDefault();
3153.1Use spaces, not tabs.
			}
3154.1Use spaces, not tabs.
		}
3155.1Use spaces, not tabs.
		event.type = type;
3157.1Use spaces, not tabs.
		// If nobody prevented the default action, do it now
3158.1Use spaces, not tabs.
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {
3160.1Use spaces, not tabs.
			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
3161.1Use spaces, not tabs.
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {
3163.1Use spaces, not tabs.
				// Call a native DOM method on the target with the same name name as the event.
3164.1Use spaces, not tabs.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
3165.1Use spaces, not tabs.
				// Don't do default actions on window, that's where global variables be (#6170)
3166.1Use spaces, not tabs.
				// IE<9 dies on focus/blur to hidden element (#1486)
3167.1Use spaces, not tabs.
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {
3169.1Use spaces, not tabs.
					// Don't re-trigger an onFOO event when we call its FOO() method
3170.1Use spaces, not tabs.
					old = elem[ ontype ];
3172.1Use spaces, not tabs.
					if ( old ) {
3173.1Use spaces, not tabs.
						elem[ ontype ] = null;
3174.1Use spaces, not tabs.
					}
3176.1Use spaces, not tabs.
					// Prevent re-triggering of the same event, since we already bubbled it above
3177.1Use spaces, not tabs.
					jQuery.event.triggered = type;
3178.1Use spaces, not tabs.
					elem[ type ]();
3179.1Use spaces, not tabs.
					jQuery.event.triggered = undefined;
3181.1Use spaces, not tabs.
					if ( old ) {
3182.1Use spaces, not tabs.
						elem[ ontype ] = old;
3183.1Use spaces, not tabs.
					}
3184.1Use spaces, not tabs.
				}
3185.1Use spaces, not tabs.
			}
3186.1Use spaces, not tabs.
		}
3188.1Use spaces, not tabs.
		return event.result;
3189.1Use spaces, not tabs.
	},
3191.1Use spaces, not tabs.
	dispatch: function( event ) {
3193.1Use spaces, not tabs.
		// Make a writable jQuery.Event from the native event object
3194.1Use spaces, not tabs.
		event = jQuery.event.fix( event || window.event );
3196.1Use spaces, not tabs.
		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
3197.1Use spaces, not tabs.
			delegateCount = handlers.delegateCount,
3198.1Use spaces, not tabs.
			args = [].slice.call( arguments, 0 ),
3199.1Use spaces, not tabs.
			run_all = !event.exclusive && !event.namespace,
3200.1Use spaces, not tabs.
			handlerQueue = [],
3201.1Use spaces, not tabs.
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;
3203.1Use spaces, not tabs.
		// Use the fix-ed jQuery.Event rather than the (read-only) native event
3204.1Use spaces, not tabs.
		args[0] = event;
3205.1Use spaces, not tabs.
		event.delegateTarget = this;
3207.1Use spaces, not tabs.
		// Determine handlers that should run if there are delegated events
3208.1Use spaces, not tabs.
		// Avoid disabled elements in IE (#6911) and non-left-click bubbling in Firefox (#3861)
3209.1Use spaces, not tabs.
		if ( delegateCount && !event.target.disabled && !(event.button && event.type === "click") ) {
3211.1Use spaces, not tabs.
			// Pregenerate a single jQuery object for reuse with .is()
3212.1Use spaces, not tabs.
			jqcur = jQuery(this);
3213.1Use spaces, not tabs.
			jqcur.context = this.ownerDocument || this;
3215.1Use spaces, not tabs.
			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
3216.1Use spaces, not tabs.
				selMatch = {};
3217.1Use spaces, not tabs.
				matches = [];
3218.1Use spaces, not tabs.
				jqcur[0] = cur;
3219.1Use spaces, not tabs.
				for ( i = 0; i < delegateCount; i++ ) {
3220.1Use spaces, not tabs.
					handleObj = handlers[ i ];
3221.1Use spaces, not tabs.
					sel = handleObj.selector;
3223.1Use spaces, not tabs.
					if ( selMatch[ sel ] === undefined ) {
3224.1Use spaces, not tabs.
						selMatch[ sel ] = (
3225.1Use spaces, not tabs.
							handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
3226.1Use spaces, not tabs.
						);
3227.1Use spaces, not tabs.
					}
3228.1Use spaces, not tabs.
					if ( selMatch[ sel ] ) {
3229.1Use spaces, not tabs.
						matches.push( handleObj );
3230.1Use spaces, not tabs.
					}
3231.1Use spaces, not tabs.
				}
3232.1Use spaces, not tabs.
				if ( matches.length ) {
3233.1Use spaces, not tabs.
					handlerQueue.push({ elem: cur, matches: matches });
3234.1Use spaces, not tabs.
				}
3235.1Use spaces, not tabs.
			}
3236.1Use spaces, not tabs.
		}
3238.1Use spaces, not tabs.
		// Add the remaining (directly-bound) handlers
3239.1Use spaces, not tabs.
		if ( handlers.length > delegateCount ) {
3240.1Use spaces, not tabs.
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
3241.1Use spaces, not tabs.
		}
3243.1Use spaces, not tabs.
		// Run delegates first; they may want to stop propagation beneath us
3244.1Use spaces, not tabs.
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
3245.1Use spaces, not tabs.
			matched = handlerQueue[ i ];
3246.1Use spaces, not tabs.
			event.currentTarget = matched.elem;
3248.1Use spaces, not tabs.
			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
3249.1Use spaces, not tabs.
				handleObj = matched.matches[ j ];
3251.1Use spaces, not tabs.
				// Triggered event must either 1) be non-exclusive and have no namespace, or
3252.1Use spaces, not tabs.
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
3253.1Use spaces, not tabs.
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {
3255.1Use spaces, not tabs.
					event.data = handleObj.data;
3256.1Use spaces, not tabs.
					event.handleObj = handleObj;
3258.1Use spaces, not tabs.
					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
3259.1Use spaces, not tabs.
							.apply( matched.elem, args );
3261.1Use spaces, not tabs.
					if ( ret !== undefined ) {
3262.1Use spaces, not tabs.
						event.result = ret;
3263.1Use spaces, not tabs.
						if ( ret === false ) {
3264.1Use spaces, not tabs.
							event.preventDefault();
3265.1Use spaces, not tabs.
							event.stopPropagation();
3266.1Use spaces, not tabs.
						}
3267.1Use spaces, not tabs.
					}
3268.1Use spaces, not tabs.
				}
3269.1Use spaces, not tabs.
			}
3270.1Use spaces, not tabs.
		}
3272.1Use spaces, not tabs.
		return event.result;
3273.1Use spaces, not tabs.
	},
3275.1Use spaces, not tabs.
	// Includes some event props shared by KeyEvent and MouseEvent
3276.1Use spaces, not tabs.
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
3277.1Use spaces, not tabs.
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
3279.1Use spaces, not tabs.
	fixHooks: {},
3281.1Use spaces, not tabs.
	keyHooks: {
3282.1Use spaces, not tabs.
		props: "char charCode key keyCode".split(" "),
3283.1Use spaces, not tabs.
		filter: function( event, original ) {
3285.1Use spaces, not tabs.
			// Add which for key events
3286.1Use spaces, not tabs.
			if ( event.which == null ) {
3287.1Use spaces, not tabs.
				event.which = original.charCode != null ? original.charCode : original.keyCode;
3288.1Use spaces, not tabs.
			}
3290.1Use spaces, not tabs.
			return event;
3291.1Use spaces, not tabs.
		}
3292.1Use spaces, not tabs.
	},
3294.1Use spaces, not tabs.
	mouseHooks: {
3295.1Use spaces, not tabs.
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
3296.1Use spaces, not tabs.
		filter: function( event, original ) {
3297.1Use spaces, not tabs.
			var eventDoc, doc, body,
3298.1Use spaces, not tabs.
				button = original.button,
3299.1Use spaces, not tabs.
				fromElement = original.fromElement;
3301.1Use spaces, not tabs.
			// Calculate pageX/Y if missing and clientX/Y available
3302.1Use spaces, not tabs.
			if ( event.pageX == null && original.clientX != null ) {
3303.1Use spaces, not tabs.
				eventDoc = event.target.ownerDocument || document;
3304.1Use spaces, not tabs.
				doc = eventDoc.documentElement;
3305.1Use spaces, not tabs.
				body = eventDoc.body;
3307.1Use spaces, not tabs.
				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
3308.1Use spaces, not tabs.
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
3309.1Use spaces, not tabs.
			}
3311.1Use spaces, not tabs.
			// Add relatedTarget, if necessary
3312.1Use spaces, not tabs.
			if ( !event.relatedTarget && fromElement ) {
3313.1Use spaces, not tabs.
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
3314.1Use spaces, not tabs.
			}
3316.1Use spaces, not tabs.
			// Add which for click: 1 === left; 2 === middle; 3 === right
3317.1Use spaces, not tabs.
			// Note: button is not normalized, so don't use it
3318.1Use spaces, not tabs.
			if ( !event.which && button !== undefined ) {
3319.1Use spaces, not tabs.
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
3320.1Use spaces, not tabs.
			}
3322.1Use spaces, not tabs.
			return event;
3323.1Use spaces, not tabs.
		}
3324.1Use spaces, not tabs.
	},
3326.1Use spaces, not tabs.
	fix: function( event ) {
3327.1Use spaces, not tabs.
		if ( event[ jQuery.expando ] ) {
3328.1Use spaces, not tabs.
			return event;
3329.1Use spaces, not tabs.
		}
3331.1Use spaces, not tabs.
		// Create a writable copy of the event object and normalize some properties
3332.1Use spaces, not tabs.
		var i, prop,
3333.1Use spaces, not tabs.
			originalEvent = event,
3334.1Use spaces, not tabs.
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
3335.1Use spaces, not tabs.
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
3337.1Use spaces, not tabs.
		event = jQuery.Event( originalEvent );
3339.1Use spaces, not tabs.
		for ( i = copy.length; i; ) {
3340.1Use spaces, not tabs.
			prop = copy[ --i ];
3341.1Use spaces, not tabs.
			event[ prop ] = originalEvent[ prop ];
3342.1Use spaces, not tabs.
		}
3344.1Use spaces, not tabs.
		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
3345.1Use spaces, not tabs.
		if ( !event.target ) {
3346.1Use spaces, not tabs.
			event.target = originalEvent.srcElement || document;
3347.1Use spaces, not tabs.
		}
3349.1Use spaces, not tabs.
		// Target should not be a text node (#504, Safari)
3350.1Use spaces, not tabs.
		if ( event.target.nodeType === 3 ) {
3351.1Use spaces, not tabs.
			event.target = event.target.parentNode;
3352.1Use spaces, not tabs.
		}
3354.1Use spaces, not tabs.
		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
3355.1Use spaces, not tabs.
		if ( event.metaKey === undefined ) {
3356.1Use spaces, not tabs.
			event.metaKey = event.ctrlKey;
3357.1Use spaces, not tabs.
		}
3359.1Use spaces, not tabs.
		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
3360.1Use spaces, not tabs.
	},
3362.1Use spaces, not tabs.
	special: {
3363.1Use spaces, not tabs.
		ready: {
3364.1Use spaces, not tabs.
			// Make sure the ready event is setup
3365.1Use spaces, not tabs.
			setup: jQuery.bindReady
3366.1Use spaces, not tabs.
		},
3368.1Use spaces, not tabs.
		load: {
3369.1Use spaces, not tabs.
			// Prevent triggered image.load events from bubbling to window.load
3370.1Use spaces, not tabs.
			noBubble: true
3371.1Use spaces, not tabs.
		},
3373.1Use spaces, not tabs.
		focus: {
3374.1Use spaces, not tabs.
			delegateType: "focusin"
3375.1Use spaces, not tabs.
		},
3376.1Use spaces, not tabs.
		blur: {
3377.1Use spaces, not tabs.
			delegateType: "focusout"
3378.1Use spaces, not tabs.
		},
3380.1Use spaces, not tabs.
		beforeunload: {
3381.1Use spaces, not tabs.
			setup: function( data, namespaces, eventHandle ) {
3382.1Use spaces, not tabs.
				// We only want to do this special case on windows
3383.1Use spaces, not tabs.
				if ( jQuery.isWindow( this ) ) {
3384.1Use spaces, not tabs.
					this.onbeforeunload = eventHandle;
3385.1Use spaces, not tabs.
				}
3386.1Use spaces, not tabs.
			},
3388.1Use spaces, not tabs.
			teardown: function( namespaces, eventHandle ) {
3389.1Use spaces, not tabs.
				if ( this.onbeforeunload === eventHandle ) {
3390.1Use spaces, not tabs.
					this.onbeforeunload = null;
3391.1Use spaces, not tabs.
				}
3392.1Use spaces, not tabs.
			}
3393.1Use spaces, not tabs.
		}
3394.1Use spaces, not tabs.
	},
3396.1Use spaces, not tabs.
	simulate: function( type, elem, event, bubble ) {
3397.1Use spaces, not tabs.
		// Piggyback on a donor event to simulate a different one.
3398.1Use spaces, not tabs.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
3399.1Use spaces, not tabs.
		// simulated event prevents default then we do the same on the donor.
3400.1Use spaces, not tabs.
		var e = jQuery.extend(
3401.1Use spaces, not tabs.
			new jQuery.Event(),
3402.1Use spaces, not tabs.
			event,
3403.1Use spaces, not tabs.
			{ type: type,
3404.1Use spaces, not tabs.
				isSimulated: true,
3405.1Use spaces, not tabs.
				originalEvent: {}
3406.1Use spaces, not tabs.
			}
3407.1Use spaces, not tabs.
		);
3408.1Use spaces, not tabs.
		if ( bubble ) {
3409.1Use spaces, not tabs.
			jQuery.event.trigger( e, null, elem );
3410.1Use spaces, not tabs.
		} else {
3411.1Use spaces, not tabs.
			jQuery.event.dispatch.call( elem, e );
3412.1Use spaces, not tabs.
		}
3413.1Use spaces, not tabs.
		if ( e.isDefaultPrevented() ) {
3414.1Use spaces, not tabs.
			event.preventDefault();
3415.1Use spaces, not tabs.
		}
3416.1Use spaces, not tabs.
	}
3424.1Use spaces, not tabs.
	function( elem, type, handle ) {
3425.1Use spaces, not tabs.
		if ( elem.removeEventListener ) {
3426.1Use spaces, not tabs.
			elem.removeEventListener( type, handle, false );
3427.1Use spaces, not tabs.
		}
3428.1Use spaces, not tabs.
	} :
3429.1Use spaces, not tabs.
	function( elem, type, handle ) {
3430.1Use spaces, not tabs.
		if ( elem.detachEvent ) {
3431.1Use spaces, not tabs.
			elem.detachEvent( "on" + type, handle );
3432.1Use spaces, not tabs.
		}
3433.1Use spaces, not tabs.
	};
3436.1Use spaces, not tabs.
	// Allow instantiation without the 'new' keyword
3437.1Use spaces, not tabs.
	if ( !(this instanceof jQuery.Event) ) {
3438.1Use spaces, not tabs.
		return new jQuery.Event( src, props );
3439.1Use spaces, not tabs.
	}
3441.1Use spaces, not tabs.
	// Event object
3442.1Use spaces, not tabs.
	if ( src && src.type ) {
3443.1Use spaces, not tabs.
		this.originalEvent = src;
3444.1Use spaces, not tabs.
		this.type = src.type;
3446.1Use spaces, not tabs.
		// Events bubbling up the document may have been marked as prevented
3447.1Use spaces, not tabs.
		// by a handler lower down the tree; reflect the correct value.
3448.1Use spaces, not tabs.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
3449.1Use spaces, not tabs.
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;
3451.1Use spaces, not tabs.
	// Event type
3452.1Use spaces, not tabs.
	} else {
3453.1Use spaces, not tabs.
		this.type = src;
3454.1Use spaces, not tabs.
	}
3456.1Use spaces, not tabs.
	// Put explicitly provided properties onto the event object
3457.1Use spaces, not tabs.
	if ( props ) {
3458.1Use spaces, not tabs.
		jQuery.extend( this, props );
3459.1Use spaces, not tabs.
	}
3461.1Use spaces, not tabs.
	// Create a timestamp if incoming event doesn't have one
3462.1Use spaces, not tabs.
	this.timeStamp = src && src.timeStamp || jQuery.now();
3464.1Use spaces, not tabs.
	// Mark it as fixed
3465.1Use spaces, not tabs.
	this[ jQuery.expando ] = true;
3469.1Use spaces, not tabs.
	return false;
3472.1Use spaces, not tabs.
	return true;
3478.1Use spaces, not tabs.
	preventDefault: function() {
3479.1Use spaces, not tabs.
		this.isDefaultPrevented = returnTrue;
3481.1Use spaces, not tabs.
		var e = this.originalEvent;
3482.1Use spaces, not tabs.
		if ( !e ) {
3483.1Use spaces, not tabs.
			return;
3484.1Use spaces, not tabs.
		}
3486.1Use spaces, not tabs.
		// if preventDefault exists run it on the original event
3487.1Use spaces, not tabs.
		if ( e.preventDefault ) {
3488.1Use spaces, not tabs.
			e.preventDefault();
3490.1Use spaces, not tabs.
		// otherwise set the returnValue property of the original event to false (IE)
3491.1Use spaces, not tabs.
		} else {
3492.1Use spaces, not tabs.
			e.returnValue = false;
3493.1Use spaces, not tabs.
		}
3494.1Use spaces, not tabs.
	},
3495.1Use spaces, not tabs.
	stopPropagation: function() {
3496.1Use spaces, not tabs.
		this.isPropagationStopped = returnTrue;
3498.1Use spaces, not tabs.
		var e = this.originalEvent;
3499.1Use spaces, not tabs.
		if ( !e ) {
3500.1Use spaces, not tabs.
			return;
3501.1Use spaces, not tabs.
		}
3502.1Use spaces, not tabs.
		// if stopPropagation exists run it on the original event
3503.1Use spaces, not tabs.
		if ( e.stopPropagation ) {
3504.1Use spaces, not tabs.
			e.stopPropagation();
3505.1Use spaces, not tabs.
		}
3506.1Use spaces, not tabs.
		// otherwise set the cancelBubble property of the original event to true (IE)
3507.1Use spaces, not tabs.
		e.cancelBubble = true;
3508.1Use spaces, not tabs.
	},
3509.1Use spaces, not tabs.
	stopImmediatePropagation: function() {
3510.1Use spaces, not tabs.
		this.isImmediatePropagationStopped = returnTrue;
3511.1Use spaces, not tabs.
		this.stopPropagation();
3512.1Use spaces, not tabs.
	},
3513.1Use spaces, not tabs.
	isDefaultPrevented: returnFalse,
3514.1Use spaces, not tabs.
	isPropagationStopped: returnFalse,
3515.1Use spaces, not tabs.
	isImmediatePropagationStopped: returnFalse
3520.1Use spaces, not tabs.
	mouseenter: "mouseover",
3521.1Use spaces, not tabs.
	mouseleave: "mouseout"
3523.1Use spaces, not tabs.
	jQuery.event.special[ orig ] = {
3524.1Use spaces, not tabs.
		delegateType: fix,
3525.1Use spaces, not tabs.
		bindType: fix,
3527.1Use spaces, not tabs.
		handle: function( event ) {
3528.1Use spaces, not tabs.
			var target = this,
3529.1Use spaces, not tabs.
				related = event.relatedTarget,
3530.1Use spaces, not tabs.
				handleObj = event.handleObj,
3531.1Use spaces, not tabs.
				selector = handleObj.selector,
3532.1Use spaces, not tabs.
				ret;
3534.1Use spaces, not tabs.
			// For mousenter/leave call the handler if related is outside the target.
3535.1Use spaces, not tabs.
			// NB: No relatedTarget if the mouse left/entered the browser window
3536.1Use spaces, not tabs.
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
3537.1Use spaces, not tabs.
				event.type = handleObj.origType;
3538.1Use spaces, not tabs.
				ret = handleObj.handler.apply( this, arguments );
3539.1Use spaces, not tabs.
				event.type = fix;
3540.1Use spaces, not tabs.
			}
3541.1Use spaces, not tabs.
			return ret;
3542.1Use spaces, not tabs.
		}
3543.1Use spaces, not tabs.
	};
3549.1Use spaces, not tabs.
	jQuery.event.special.submit = {
3550.1Use spaces, not tabs.
		setup: function() {
3551.1Use spaces, not tabs.
			// Only need this for delegated form submit events
3552.1Use spaces, not tabs.
			if ( jQuery.nodeName( this, "form" ) ) {
3553.1Use spaces, not tabs.
				return false;
3554.1Use spaces, not tabs.
			}
3556.1Use spaces, not tabs.
			// Lazy-add a submit handler when a descendant form may potentially be submitted
3557.1Use spaces, not tabs.
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
3558.1Use spaces, not tabs.
				// Node name check avoids a VML-related crash in IE (#9807)
3559.1Use spaces, not tabs.
				var elem = e.target,
3560.1Use spaces, not tabs.
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
3561.1Use spaces, not tabs.
				if ( form && !form._submit_attached ) {
3562.1Use spaces, not tabs.
					jQuery.event.add( form, "submit._submit", function( event ) {
3563.1Use spaces, not tabs.
						// If form was submitted by the user, bubble the event up the tree
3564.1Use spaces, not tabs.
						if ( this.parentNode && !event.isTrigger ) {
3565.1Use spaces, not tabs.
							jQuery.event.simulate( "submit", this.parentNode, event, true );
3566.1Use spaces, not tabs.
						}
3567.1Use spaces, not tabs.
					});
3568.1Use spaces, not tabs.
					form._submit_attached = true;
3569.1Use spaces, not tabs.
				}
3570.1Use spaces, not tabs.
			});
3571.1Use spaces, not tabs.
			// return undefined since we don't need an event listener
3572.1Use spaces, not tabs.
		},
3574.1Use spaces, not tabs.
		teardown: function() {
3575.1Use spaces, not tabs.
			// Only need this for delegated form submit events
3576.1Use spaces, not tabs.
			if ( jQuery.nodeName( this, "form" ) ) {
3577.1Use spaces, not tabs.
				return false;
3578.1Use spaces, not tabs.
			}
3580.1Use spaces, not tabs.
			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
3581.1Use spaces, not tabs.
			jQuery.event.remove( this, "._submit" );
3582.1Use spaces, not tabs.
		}
3583.1Use spaces, not tabs.
	};
3589.1Use spaces, not tabs.
	jQuery.event.special.change = {
3591.1Use spaces, not tabs.
		setup: function() {
3593.1Use spaces, not tabs.
			if ( rformElems.test( this.nodeName ) ) {
3594.1Use spaces, not tabs.
				// IE doesn't fire change on a check/radio until blur; trigger it on click
3595.1Use spaces, not tabs.
				// after a propertychange. Eat the blur-change in special.change.handle.
3596.1Use spaces, not tabs.
				// This still fires onchange a second time for check/radio after blur.
3597.1Use spaces, not tabs.
				if ( this.type === "checkbox" || this.type === "radio" ) {
3598.1Use spaces, not tabs.
					jQuery.event.add( this, "propertychange._change", function( event ) {
3599.1Use spaces, not tabs.
						if ( event.originalEvent.propertyName === "checked" ) {
3600.1Use spaces, not tabs.
							this._just_changed = true;
3601.1Use spaces, not tabs.
						}
3602.1Use spaces, not tabs.
					});
3603.1Use spaces, not tabs.
					jQuery.event.add( this, "click._change", function( event ) {
3604.1Use spaces, not tabs.
						if ( this._just_changed && !event.isTrigger ) {
3605.1Use spaces, not tabs.
							this._just_changed = false;
3606.1Use spaces, not tabs.
							jQuery.event.simulate( "change", this, event, true );
3607.1Use spaces, not tabs.
						}
3608.1Use spaces, not tabs.
					});
3609.1Use spaces, not tabs.
				}
3610.1Use spaces, not tabs.
				return false;
3611.1Use spaces, not tabs.
			}
3612.1Use spaces, not tabs.
			// Delegated event; lazy-add a change handler on descendant inputs
3613.1Use spaces, not tabs.
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
3614.1Use spaces, not tabs.
				var elem = e.target;
3616.1Use spaces, not tabs.
				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
3617.1Use spaces, not tabs.
					jQuery.event.add( elem, "change._change", function( event ) {
3618.1Use spaces, not tabs.
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
3619.1Use spaces, not tabs.
							jQuery.event.simulate( "change", this.parentNode, event, true );
3620.1Use spaces, not tabs.
						}
3621.1Use spaces, not tabs.
					});
3622.1Use spaces, not tabs.
					elem._change_attached = true;
3623.1Use spaces, not tabs.
				}
3624.1Use spaces, not tabs.
			});
3625.1Use spaces, not tabs.
		},
3627.1Use spaces, not tabs.
		handle: function( event ) {
3628.1Use spaces, not tabs.
			var elem = event.target;
3630.1Use spaces, not tabs.
			// Swallow native change events from checkbox/radio, we already triggered them above
3631.1Use spaces, not tabs.
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
3632.1Use spaces, not tabs.
				return event.handleObj.handler.apply( this, arguments );
3633.1Use spaces, not tabs.
			}
3634.1Use spaces, not tabs.
		},
3636.1Use spaces, not tabs.
		teardown: function() {
3637.1Use spaces, not tabs.
			jQuery.event.remove( this, "._change" );
3639.1Use spaces, not tabs.
			return rformElems.test( this.nodeName );
3640.1Use spaces, not tabs.
		}
3641.1Use spaces, not tabs.
	};
3646.1Use spaces, not tabs.
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
3648.1Use spaces, not tabs.
		// Attach a single capturing handler while someone wants focusin/focusout
3649.1Use spaces, not tabs.
		var attaches = 0,
3650.1Use spaces, not tabs.
			handler = function( event ) {
3651.1Use spaces, not tabs.
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
3652.1Use spaces, not tabs.
			};
3654.1Use spaces, not tabs.
		jQuery.event.special[ fix ] = {
3655.1Use spaces, not tabs.
			setup: function() {
3656.1Use spaces, not tabs.
				if ( attaches++ === 0 ) {
3657.1Use spaces, not tabs.
					document.addEventListener( orig, handler, true );
3658.1Use spaces, not tabs.
				}
3659.1Use spaces, not tabs.
			},
3660.1Use spaces, not tabs.
			teardown: function() {
3661.1Use spaces, not tabs.
				if ( --attaches === 0 ) {
3662.1Use spaces, not tabs.
					document.removeEventListener( orig, handler, true );
3663.1Use spaces, not tabs.
				}
3664.1Use spaces, not tabs.
			}
3665.1Use spaces, not tabs.
		};
3666.1Use spaces, not tabs.
	});
3671.1Use spaces, not tabs.
	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
3672.1Use spaces, not tabs.
		var origFn, type;
3674.1Use spaces, not tabs.
		// Types can be a map of types/handlers
3675.1Use spaces, not tabs.
		if ( typeof types === "object" ) {
3676.1Use spaces, not tabs.
			// ( types-Object, selector, data )
3677.1Use spaces, not tabs.
			if ( typeof selector !== "string" ) {
3678.1Use spaces, not tabs.
				// ( types-Object, data )
3679.1Use spaces, not tabs.
				data = selector;
3680.1Use spaces, not tabs.
				selector = undefined;
3681.1Use spaces, not tabs.
			}
3682.1Use spaces, not tabs.
			for ( type in types ) {
3683.1Use spaces, not tabs.
				this.on( type, selector, data, types[ type ], one );
3684.1Use spaces, not tabs.
			}
3685.1Use spaces, not tabs.
			return this;
3686.1Use spaces, not tabs.
		}
3688.1Use spaces, not tabs.
		if ( data == null && fn == null ) {
3689.1Use spaces, not tabs.
			// ( types, fn )
3690.1Use spaces, not tabs.
			fn = selector;
3691.1Use spaces, not tabs.
			data = selector = undefined;
3692.1Use spaces, not tabs.
		} else if ( fn == null ) {
3693.1Use spaces, not tabs.
			if ( typeof selector === "string" ) {
3694.1Use spaces, not tabs.
				// ( types, selector, fn )
3695.1Use spaces, not tabs.
				fn = data;
3696.1Use spaces, not tabs.
				data = undefined;
3697.1Use spaces, not tabs.
			} else {
3698.1Use spaces, not tabs.
				// ( types, data, fn )
3699.1Use spaces, not tabs.
				fn = data;
3700.1Use spaces, not tabs.
				data = selector;
3701.1Use spaces, not tabs.
				selector = undefined;
3702.1Use spaces, not tabs.
			}
3703.1Use spaces, not tabs.
		}
3704.1Use spaces, not tabs.
		if ( fn === false ) {
3705.1Use spaces, not tabs.
			fn = returnFalse;
3706.1Use spaces, not tabs.
		} else if ( !fn ) {
3707.1Use spaces, not tabs.
			return this;
3708.1Use spaces, not tabs.
		}
3710.1Use spaces, not tabs.
		if ( one === 1 ) {
3711.1Use spaces, not tabs.
			origFn = fn;
3712.1Use spaces, not tabs.
			fn = function( event ) {
3713.1Use spaces, not tabs.
				// Can use an empty set, since event contains the info
3714.1Use spaces, not tabs.
				jQuery().off( event );
3715.1Use spaces, not tabs.
				return origFn.apply( this, arguments );
3716.1Use spaces, not tabs.
			};
3717.1Use spaces, not tabs.
			// Use same guid so caller can remove using origFn
3718.1Use spaces, not tabs.
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
3719.1Use spaces, not tabs.
		}
3720.1Use spaces, not tabs.
		return this.each( function() {
3721.1Use spaces, not tabs.
			jQuery.event.add( this, types, fn, data, selector );
3722.1Use spaces, not tabs.
		});
3723.1Use spaces, not tabs.
	},
3724.1Use spaces, not tabs.
	one: function( types, selector, data, fn ) {
3725.1Use spaces, not tabs.
		return this.on.call( this, types, selector, data, fn, 1 );
3726.1Use spaces, not tabs.
	},
3727.1Use spaces, not tabs.
	off: function( types, selector, fn ) {
3728.1Use spaces, not tabs.
		if ( types && types.preventDefault && types.handleObj ) {
3729.1Use spaces, not tabs.
			// ( event )  dispatched jQuery.Event
3730.1Use spaces, not tabs.
			var handleObj = types.handleObj;
3731.1Use spaces, not tabs.
			jQuery( types.delegateTarget ).off(
3732.1Use spaces, not tabs.
				handleObj.namespace? handleObj.type + "." + handleObj.namespace : handleObj.type,
3733.1Use spaces, not tabs.
				handleObj.selector,
3734.1Use spaces, not tabs.
				handleObj.handler
3735.1Use spaces, not tabs.
			);
3736.1Use spaces, not tabs.
			return this;
3737.1Use spaces, not tabs.
		}
3738.1Use spaces, not tabs.
		if ( typeof types === "object" ) {
3739.1Use spaces, not tabs.
			// ( types-object [, selector] )
3740.1Use spaces, not tabs.
			for ( var type in types ) {
3741.1Use spaces, not tabs.
				this.off( type, selector, types[ type ] );
3742.1Use spaces, not tabs.
			}
3743.1Use spaces, not tabs.
			return this;
3744.1Use spaces, not tabs.
		}
3745.1Use spaces, not tabs.
		if ( selector === false || typeof selector === "function" ) {
3746.1Use spaces, not tabs.
			// ( types [, fn] )
3747.1Use spaces, not tabs.
			fn = selector;
3748.1Use spaces, not tabs.
			selector = undefined;
3749.1Use spaces, not tabs.
		}
3750.1Use spaces, not tabs.
		if ( fn === false ) {
3751.1Use spaces, not tabs.
			fn = returnFalse;
3752.1Use spaces, not tabs.
		}
3753.1Use spaces, not tabs.
		return this.each(function() {
3754.1Use spaces, not tabs.
			jQuery.event.remove( this, types, fn, selector );
3755.1Use spaces, not tabs.
		});
3756.1Use spaces, not tabs.
	},
3758.1Use spaces, not tabs.
	bind: function( types, data, fn ) {
3759.1Use spaces, not tabs.
		return this.on( types, null, data, fn );
3760.1Use spaces, not tabs.
	},
3761.1Use spaces, not tabs.
	unbind: function( types, fn ) {
3762.1Use spaces, not tabs.
		return this.off( types, null, fn );
3763.1Use spaces, not tabs.
	},
3765.1Use spaces, not tabs.
	live: function( types, data, fn ) {
3766.1Use spaces, not tabs.
		jQuery( this.context ).on( types, this.selector, data, fn );
3767.1Use spaces, not tabs.
		return this;
3768.1Use spaces, not tabs.
	},
3769.1Use spaces, not tabs.
	die: function( types, fn ) {
3770.1Use spaces, not tabs.
		jQuery( this.context ).off( types, this.selector || "**", fn );
3771.1Use spaces, not tabs.
		return this;
3772.1Use spaces, not tabs.
	},
3774.1Use spaces, not tabs.
	delegate: function( selector, types, data, fn ) {
3775.1Use spaces, not tabs.
		return this.on( types, selector, data, fn );
3776.1Use spaces, not tabs.
	},
3777.1Use spaces, not tabs.
	undelegate: function( selector, types, fn ) {
3778.1Use spaces, not tabs.
		// ( namespace ) or ( selector, types [, fn] )
3779.1Use spaces, not tabs.
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
3780.1Use spaces, not tabs.
	},
3782.1Use spaces, not tabs.
	trigger: function( type, data ) {
3783.1Use spaces, not tabs.
		return this.each(function() {
3784.1Use spaces, not tabs.
			jQuery.event.trigger( type, data, this );
3785.1Use spaces, not tabs.
		});
3786.1Use spaces, not tabs.
	},
3787.1Use spaces, not tabs.
	triggerHandler: function( type, data ) {
3788.1Use spaces, not tabs.
		if ( this[0] ) {
3789.1Use spaces, not tabs.
			return jQuery.event.trigger( type, data, this[0], true );
3790.1Use spaces, not tabs.
		}
3791.1Use spaces, not tabs.
	},
3793.1Use spaces, not tabs.
	toggle: function( fn ) {
3794.1Use spaces, not tabs.
		// Save reference to arguments for access in closure
3795.1Use spaces, not tabs.
		var args = arguments,
3796.1Use spaces, not tabs.
			guid = fn.guid || jQuery.guid++,
3797.1Use spaces, not tabs.
			i = 0,
3798.1Use spaces, not tabs.
			toggler = function( event ) {
3799.1Use spaces, not tabs.
				// Figure out which function to execute
3800.1Use spaces, not tabs.
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
3801.1Use spaces, not tabs.
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );
3803.1Use spaces, not tabs.
				// Make sure that clicks stop
3804.1Use spaces, not tabs.
				event.preventDefault();
3806.1Use spaces, not tabs.
				// and execute the function
3807.1Use spaces, not tabs.
				return args[ lastToggle ].apply( this, arguments ) || false;
3808.1Use spaces, not tabs.
			};
3810.1Use spaces, not tabs.
		// link all the functions, so any of them can unbind this click handler
3811.1Use spaces, not tabs.
		toggler.guid = guid;
3812.1Use spaces, not tabs.
		while ( i < args.length ) {
3813.1Use spaces, not tabs.
			args[ i++ ].guid = guid;
3814.1Use spaces, not tabs.
		}
3816.1Use spaces, not tabs.
		return this.click( toggler );
3817.1Use spaces, not tabs.
	},
3819.1Use spaces, not tabs.
	hover: function( fnOver, fnOut ) {
3820.1Use spaces, not tabs.
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
3821.1Use spaces, not tabs.
	}
3825.1Use spaces, not tabs.
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
3826.1Use spaces, not tabs.
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
3828.1Use spaces, not tabs.
	// Handle event binding
3829.1Use spaces, not tabs.
	jQuery.fn[ name ] = function( data, fn ) {
3830.1Use spaces, not tabs.
		if ( fn == null ) {
3831.1Use spaces, not tabs.
			fn = data;
3832.1Use spaces, not tabs.
			data = null;
3833.1Use spaces, not tabs.
		}
3835.1Use spaces, not tabs.
		return arguments.length > 0 ?
3836.1Use spaces, not tabs.
			this.on( name, null, data, fn ) :
3837.1Use spaces, not tabs.
			this.trigger( name );
3838.1Use spaces, not tabs.
	};
3840.1Use spaces, not tabs.
	if ( jQuery.attrFn ) {
3841.1Use spaces, not tabs.
		jQuery.attrFn[ name ] = true;
3842.1Use spaces, not tabs.
	}
3844.1Use spaces, not tabs.
	if ( rkeyEvent.test( name ) ) {
3845.1Use spaces, not tabs.
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
3846.1Use spaces, not tabs.
	}
3848.1Use spaces, not tabs.
	if ( rmouseEvent.test( name ) ) {
3849.1Use spaces, not tabs.
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
3850.1Use spaces, not tabs.
	}
3863.101Expected '\' before ' '.
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
3864.1Use spaces, not tabs.
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
3864.42Expected '"' and instead saw '''.
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
3864.54Expected '"' and instead saw '''.
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
3864.59Expected '"' and instead saw '''.
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
3865.1Use spaces, not tabs.
	done = 0,
3866.1Use spaces, not tabs.
	toString = Object.prototype.toString,
3867.1Use spaces, not tabs.
	hasDuplicate = false,
3868.1Use spaces, not tabs.
	baseHasDuplicate = true,
3869.1Use spaces, not tabs.
	rBackslash = /\\/g,
3870.1Use spaces, not tabs.
	rReturn = /\r\n/g,
3871.1Use spaces, not tabs.
	rNonWord = /\W/;
3878.1Use spaces, not tabs.
	baseHasDuplicate = false;
3879.1Use spaces, not tabs.
	return 0;
3883.1Use spaces, not tabs.
	results = results || [];
3884.1Use spaces, not tabs.
	context = context || document;
3886.1Use spaces, not tabs.
	var origContext = context;
3888.1Use spaces, not tabs.
	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
3889.1Use spaces, not tabs.
		return [];
3890.1Use spaces, not tabs.
	}
3891.0Unexpected trailing space.
	
3891.1Use spaces, not tabs.
	
3892.1Use spaces, not tabs.
	if ( !selector || typeof selector !== "string" ) {
3893.1Use spaces, not tabs.
		return results;
3894.1Use spaces, not tabs.
	}
3896.1Use spaces, not tabs.
	var m, set, checkSet, extra, ret, cur, pop, i,
3897.1Use spaces, not tabs.
		prune = true,
3898.1Use spaces, not tabs.
		contextXML = Sizzle.isXML( context ),
3899.1Use spaces, not tabs.
		parts = [],
3900.1Use spaces, not tabs.
		soFar = selector;
3901.0Unexpected trailing space.
	
3901.1Use spaces, not tabs.
	
3902.1Use spaces, not tabs.
	// Reset the position of the chunker regexp (start from head)
3903.1Use spaces, not tabs.
	do {
3904.1Use spaces, not tabs.
		chunker.exec( "" );
3905.1Use spaces, not tabs.
		m = chunker.exec( soFar );
3907.1Use spaces, not tabs.
		if ( m ) {
3908.1Use spaces, not tabs.
			soFar = m[3];
3909.1Unexpected trailing space.
		
3909.1Use spaces, not tabs.
		
3910.1Use spaces, not tabs.
			parts.push( m[1] );
3911.1Use spaces, not tabs.
		
3911.1Unexpected trailing space.
		
3912.1Use spaces, not tabs.
			if ( m[2] ) {
3913.1Use spaces, not tabs.
				extra = m[3];
3914.1Use spaces, not tabs.
				break;
3915.1Use spaces, not tabs.
			}
3916.1Use spaces, not tabs.
		}
3917.1Use spaces, not tabs.
	} while ( m );
3919.1Use spaces, not tabs.
	if ( parts.length > 1 && origPOS.exec( selector ) ) {
3921.1Use spaces, not tabs.
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
3922.1Use spaces, not tabs.
			set = posProcess( parts[0] + parts[1], context, seed );
3924.1Use spaces, not tabs.
		} else {
3925.1Use spaces, not tabs.
			set = Expr.relative[ parts[0] ] ?
3926.1Use spaces, not tabs.
				[ context ] :
3927.1Use spaces, not tabs.
				Sizzle( parts.shift(), context );
3929.1Use spaces, not tabs.
			while ( parts.length ) {
3930.1Use spaces, not tabs.
				selector = parts.shift();
3932.1Use spaces, not tabs.
				if ( Expr.relative[ selector ] ) {
3933.1Use spaces, not tabs.
					selector += parts.shift();
3934.1Use spaces, not tabs.
				}
3935.1Use spaces, not tabs.
				
3935.3Unexpected trailing space.
				
3936.1Use spaces, not tabs.
				set = posProcess( selector, set, seed );
3937.1Use spaces, not tabs.
			}
3938.1Use spaces, not tabs.
		}
3940.1Use spaces, not tabs.
	} else {
3941.1Use spaces, not tabs.
		// Take a shortcut and set the context if the root selector is an ID
3942.1Use spaces, not tabs.
		// (but not if it'll be faster if the inner selector is an ID)
3943.1Use spaces, not tabs.
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
3944.1Use spaces, not tabs.
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
3946.1Use spaces, not tabs.
			ret = Sizzle.find( parts.shift(), context, contextXML );
3947.1Use spaces, not tabs.
			context = ret.expr ?
3948.1Use spaces, not tabs.
				Sizzle.filter( ret.expr, ret.set )[0] :
3949.1Use spaces, not tabs.
				ret.set[0];
3950.1Use spaces, not tabs.
		}
3952.1Use spaces, not tabs.
		if ( context ) {
3953.1Use spaces, not tabs.
			ret = seed ?
3954.1Use spaces, not tabs.
				{ expr: parts.pop(), set: makeArray(seed) } :
3955.1Use spaces, not tabs.
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
3957.1Use spaces, not tabs.
			set = ret.expr ?
3958.1Use spaces, not tabs.
				Sizzle.filter( ret.expr, ret.set ) :
3959.1Use spaces, not tabs.
				ret.set;
3961.1Use spaces, not tabs.
			if ( parts.length > 0 ) {
3962.1Use spaces, not tabs.
				checkSet = makeArray( set );
3964.1Use spaces, not tabs.
			} else {
3965.1Use spaces, not tabs.
				prune = false;
3966.1Use spaces, not tabs.
			}
3968.1Use spaces, not tabs.
			while ( parts.length ) {
3969.1Use spaces, not tabs.
				cur = parts.pop();
3970.1Use spaces, not tabs.
				pop = cur;
3972.1Use spaces, not tabs.
				if ( !Expr.relative[ cur ] ) {
3973.1Use spaces, not tabs.
					cur = "";
3974.1Use spaces, not tabs.
				} else {
3975.1Use spaces, not tabs.
					pop = parts.pop();
3976.1Use spaces, not tabs.
				}
3978.1Use spaces, not tabs.
				if ( pop == null ) {
3979.1Use spaces, not tabs.
					pop = context;
3980.1Use spaces, not tabs.
				}
3982.1Use spaces, not tabs.
				Expr.relative[ cur ]( checkSet, pop, contextXML );
3983.1Use spaces, not tabs.
			}
3985.1Use spaces, not tabs.
		} else {
3986.1Use spaces, not tabs.
			checkSet = parts = [];
3987.1Use spaces, not tabs.
		}
3988.1Use spaces, not tabs.
	}
3990.1Use spaces, not tabs.
	if ( !checkSet ) {
3991.1Use spaces, not tabs.
		checkSet = set;
3992.1Use spaces, not tabs.
	}
3994.1Use spaces, not tabs.
	if ( !checkSet ) {
3995.1Use spaces, not tabs.
		Sizzle.error( cur || selector );
3996.1Use spaces, not tabs.
	}
3998.1Use spaces, not tabs.
	if ( toString.call(checkSet) === "[object Array]" ) {
3999.1Use spaces, not tabs.
		if ( !prune ) {
4000.1Use spaces, not tabs.
			results.push.apply( results, checkSet );
4002.1Use spaces, not tabs.
		} else if ( context && context.nodeType === 1 ) {
4003.1Use spaces, not tabs.
			for ( i = 0; checkSet[i] != null; i++ ) {
4004.1Use spaces, not tabs.
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
4005.1Use spaces, not tabs.
					results.push( set[i] );
4006.1Use spaces, not tabs.
				}
4007.1Use spaces, not tabs.
			}
4009.1Use spaces, not tabs.
		} else {
4010.1Use spaces, not tabs.
			for ( i = 0; checkSet[i] != null; i++ ) {
4011.1Use spaces, not tabs.
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
4012.1Use spaces, not tabs.
					results.push( set[i] );
4013.1Use spaces, not tabs.
				}
4014.1Use spaces, not tabs.
			}
4015.1Use spaces, not tabs.
		}
4017.1Use spaces, not tabs.
	} else {
4018.1Use spaces, not tabs.
		makeArray( checkSet, results );
4019.1Use spaces, not tabs.
	}
4021.1Use spaces, not tabs.
	if ( extra ) {
4022.1Use spaces, not tabs.
		Sizzle( extra, origContext, results, seed );
4023.1Use spaces, not tabs.
		Sizzle.uniqueSort( results );
4024.1Use spaces, not tabs.
	}
4026.1Use spaces, not tabs.
	return results;
4030.1Use spaces, not tabs.
	if ( sortOrder ) {
4031.1Use spaces, not tabs.
		hasDuplicate = baseHasDuplicate;
4032.1Use spaces, not tabs.
		results.sort( sortOrder );
4034.1Use spaces, not tabs.
		if ( hasDuplicate ) {
4035.1Use spaces, not tabs.
			for ( var i = 1; i < results.length; i++ ) {
4036.1Use spaces, not tabs.
				if ( results[i] === results[ i - 1 ] ) {
4037.1Use spaces, not tabs.
					results.splice( i--, 1 );
4038.1Use spaces, not tabs.
				}
4039.1Use spaces, not tabs.
			}
4040.1Use spaces, not tabs.
		}
4041.1Use spaces, not tabs.
	}
4043.1Use spaces, not tabs.
	return results;
4047.1Use spaces, not tabs.
	return Sizzle( expr, null, null, set );
4051.1Use spaces, not tabs.
	return Sizzle( expr, null, null, [node] ).length > 0;
4055.1Use spaces, not tabs.
	var set, i, len, match, type, left;
4057.1Use spaces, not tabs.
	if ( !expr ) {
4058.1Use spaces, not tabs.
		return [];
4059.1Use spaces, not tabs.
	}
4061.1Use spaces, not tabs.
	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
4062.1Use spaces, not tabs.
		type = Expr.order[i];
4063.1Unexpected trailing space.
		
4063.1Use spaces, not tabs.
		
4064.1Use spaces, not tabs.
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
4065.1Use spaces, not tabs.
			left = match[1];
4066.1Use spaces, not tabs.
			match.splice( 1, 1 );
4068.1Use spaces, not tabs.
			if ( left.substr( left.length - 1 ) !== "\\" ) {
4069.1Use spaces, not tabs.
				match[1] = (match[1] || "").replace( rBackslash, "" );
4070.1Use spaces, not tabs.
				set = Expr.find[ type ]( match, context, isXML );
4072.1Use spaces, not tabs.
				if ( set != null ) {
4073.1Use spaces, not tabs.
					expr = expr.replace( Expr.match[ type ], "" );
4074.1Use spaces, not tabs.
					break;
4075.1Use spaces, not tabs.
				}
4076.1Use spaces, not tabs.
			}
4077.1Use spaces, not tabs.
		}
4078.1Use spaces, not tabs.
	}
4080.1Use spaces, not tabs.
	if ( !set ) {
4081.1Use spaces, not tabs.
		set = typeof context.getElementsByTagName !== "undefined" ?
4082.1Use spaces, not tabs.
			context.getElementsByTagName( "*" ) :
4083.1Use spaces, not tabs.
			[];
4084.1Use spaces, not tabs.
	}
4086.1Use spaces, not tabs.
	return { set: set, expr: expr };
4090.1Use spaces, not tabs.
	var match, anyFound,
4091.1Use spaces, not tabs.
		type, found, item, filter, left,
4092.1Use spaces, not tabs.
		i, pass,
4093.1Use spaces, not tabs.
		old = expr,
4094.1Use spaces, not tabs.
		result = [],
4095.1Use spaces, not tabs.
		curLoop = set,
4096.1Use spaces, not tabs.
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );
4098.1Use spaces, not tabs.
	while ( expr && set.length ) {
4099.1Use spaces, not tabs.
		for ( type in Expr.filter ) {
4100.1Use spaces, not tabs.
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
4101.1Use spaces, not tabs.
				filter = Expr.filter[ type ];
4102.1Use spaces, not tabs.
				left = match[1];
4104.1Use spaces, not tabs.
				anyFound = false;
4106.1Use spaces, not tabs.
				match.splice(1,1);
4108.1Use spaces, not tabs.
				if ( left.substr( left.length - 1 ) === "\\" ) {
4109.1Use spaces, not tabs.
					continue;
4110.1Use spaces, not tabs.
				}
4112.1Use spaces, not tabs.
				if ( curLoop === result ) {
4113.1Use spaces, not tabs.
					result = [];
4114.1Use spaces, not tabs.
				}
4116.1Use spaces, not tabs.
				if ( Expr.preFilter[ type ] ) {
4117.1Use spaces, not tabs.
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );
4119.1Use spaces, not tabs.
					if ( !match ) {
4120.1Use spaces, not tabs.
						anyFound = found = true;
4122.1Use spaces, not tabs.
					} else if ( match === true ) {
4123.1Use spaces, not tabs.
						continue;
4124.1Use spaces, not tabs.
					}
4125.1Use spaces, not tabs.
				}
4127.1Use spaces, not tabs.
				if ( match ) {
4128.1Use spaces, not tabs.
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
4129.1Use spaces, not tabs.
						if ( item ) {
4130.1Use spaces, not tabs.
							found = filter( item, match, i, curLoop );
4131.1Use spaces, not tabs.
							pass = not ^ found;
4133.1Use spaces, not tabs.
							if ( inplace && found != null ) {
4134.1Use spaces, not tabs.
								if ( pass ) {
4135.1Use spaces, not tabs.
									anyFound = true;
4137.1Use spaces, not tabs.
								} else {
4138.1Use spaces, not tabs.
									curLoop[i] = false;
4139.1Use spaces, not tabs.
								}
4141.1Use spaces, not tabs.
							} else if ( pass ) {
4142.1Use spaces, not tabs.
								result.push( item );
4143.1Use spaces, not tabs.
								anyFound = true;
4144.1Use spaces, not tabs.
							}
4145.1Use spaces, not tabs.
						}
4146.1Use spaces, not tabs.
					}
4147.1Use spaces, not tabs.
				}
4149.1Use spaces, not tabs.
				if ( found !== undefined ) {
4150.1Use spaces, not tabs.
					if ( !inplace ) {
4151.1Use spaces, not tabs.
						curLoop = result;
4152.1Use spaces, not tabs.
					}
4154.1Use spaces, not tabs.
					expr = expr.replace( Expr.match[ type ], "" );
4156.1Use spaces, not tabs.
					if ( !anyFound ) {
4157.1Use spaces, not tabs.
						return [];
4158.1Use spaces, not tabs.
					}
4160.1Use spaces, not tabs.
					break;
4161.1Use spaces, not tabs.
				}
4162.1Use spaces, not tabs.
			}
4163.1Use spaces, not tabs.
		}
4165.1Use spaces, not tabs.
		// Improper expression
4166.1Use spaces, not tabs.
		if ( expr === old ) {
4167.1Use spaces, not tabs.
			if ( anyFound == null ) {
4168.1Use spaces, not tabs.
				Sizzle.error( expr );
4170.1Use spaces, not tabs.
			} else {
4171.1Use spaces, not tabs.
				break;
4172.1Use spaces, not tabs.
			}
4173.1Use spaces, not tabs.
		}
4175.1Use spaces, not tabs.
		old = expr;
4176.1Use spaces, not tabs.
	}
4178.1Use spaces, not tabs.
	return curLoop;
4182.1Use spaces, not tabs.
	throw new Error( "Syntax error, unrecognized expression: " + msg );
4191.1Use spaces, not tabs.
		nodeType = elem.nodeType,
4192.1Use spaces, not tabs.
		ret = "";
4194.1Use spaces, not tabs.
	if ( nodeType ) {
4195.1Use spaces, not tabs.
		if ( nodeType === 1 || nodeType === 9 ) {
4196.1Use spaces, not tabs.
			// Use textContent || innerText for elements
4197.1Use spaces, not tabs.
			if ( typeof elem.textContent === 'string' ) {
4197.37Expected '"' and instead saw '''.
			if ( typeof elem.textContent === 'string' ) {
4198.1Use spaces, not tabs.
				return elem.textContent;
4199.1Use spaces, not tabs.
			} else if ( typeof elem.innerText === 'string' ) {
4199.42Expected '"' and instead saw '''.
			} else if ( typeof elem.innerText === 'string' ) {
4200.1Use spaces, not tabs.
				// Replace IE's carriage returns
4201.1Use spaces, not tabs.
				return elem.innerText.replace( rReturn, '' );
4201.45Expected '"' and instead saw '''.
				return elem.innerText.replace( rReturn, '' );
4202.1Use spaces, not tabs.
			} else {
4203.1Use spaces, not tabs.
				// Traverse it's children
4204.1Use spaces, not tabs.
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
4205.1Use spaces, not tabs.
					ret += getText( elem );
4206.1Use spaces, not tabs.
				}
4207.1Use spaces, not tabs.
			}
4208.1Use spaces, not tabs.
		} else if ( nodeType === 3 || nodeType === 4 ) {
4209.1Use spaces, not tabs.
			return elem.nodeValue;
4210.1Use spaces, not tabs.
		}
4211.1Use spaces, not tabs.
	} else {
4213.1Use spaces, not tabs.
		// If no nodeType, this is expected to be an array
4214.1Use spaces, not tabs.
		for ( i = 0; (node = elem[i]); i++ ) {
4215.1Use spaces, not tabs.
			// Do not traverse comment nodes
4216.1Use spaces, not tabs.
			if ( node.nodeType !== 8 ) {
4217.1Use spaces, not tabs.
				ret += getText( node );
4218.1Use spaces, not tabs.
			}
4219.1Use spaces, not tabs.
		}
4220.1Use spaces, not tabs.
	}
4221.1Use spaces, not tabs.
	return ret;
4225.1Use spaces, not tabs.
	order: [ "ID", "NAME", "TAG" ],
4227.1Use spaces, not tabs.
	match: {
4228.1Use spaces, not tabs.
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
4229.1Use spaces, not tabs.
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
4230.1Use spaces, not tabs.
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
4231.1Use spaces, not tabs.
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
4231.75Unexpected '3' after '\'.
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
4231.110Expected a regexp factor and instead saw ')'.
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
4231.112Expected a regexp factor and instead saw ')'.
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
4232.1Use spaces, not tabs.
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
4233.1Use spaces, not tabs.
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
4234.1Use spaces, not tabs.
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
4235.1Use spaces, not tabs.
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
4235.82Unexpected '2' after '\'.
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
4236.1Use spaces, not tabs.
	},
4238.1Use spaces, not tabs.
	leftMatch: {},
4240.1Use spaces, not tabs.
	attrMap: {
4241.1Use spaces, not tabs.
		"class": "className",
4242.1Use spaces, not tabs.
		"for": "htmlFor"
4243.1Use spaces, not tabs.
	},
4245.1Use spaces, not tabs.
	attrHandle: {
4246.1Use spaces, not tabs.
		href: function( elem ) {
4247.1Use spaces, not tabs.
			return elem.getAttribute( "href" );
4248.1Use spaces, not tabs.
		},
4249.1Use spaces, not tabs.
		type: function( elem ) {
4250.1Use spaces, not tabs.
			return elem.getAttribute( "type" );
4251.1Use spaces, not tabs.
		}
4252.1Use spaces, not tabs.
	},
4254.1Use spaces, not tabs.
	relative: {
4255.1Use spaces, not tabs.
		"+": function(checkSet, part){
4256.1Use spaces, not tabs.
			var isPartStr = typeof part === "string",
4257.1Use spaces, not tabs.
				isTag = isPartStr && !rNonWord.test( part ),
4258.1Use spaces, not tabs.
				isPartStrNotTag = isPartStr && !isTag;
4260.1Use spaces, not tabs.
			if ( isTag ) {
4261.1Use spaces, not tabs.
				part = part.toLowerCase();
4262.1Use spaces, not tabs.
			}
4264.1Use spaces, not tabs.
			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
4265.1Use spaces, not tabs.
				if ( (elem = checkSet[i]) ) {
4266.1Use spaces, not tabs.
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}
4268.1Use spaces, not tabs.
					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
4269.1Use spaces, not tabs.
						elem || false :
4270.1Use spaces, not tabs.
						elem === part;
4271.1Use spaces, not tabs.
				}
4272.1Use spaces, not tabs.
			}
4274.1Use spaces, not tabs.
			if ( isPartStrNotTag ) {
4275.1Use spaces, not tabs.
				Sizzle.filter( part, checkSet, true );
4276.1Use spaces, not tabs.
			}
4277.1Use spaces, not tabs.
		},
4279.1Use spaces, not tabs.
		">": function( checkSet, part ) {
4280.1Use spaces, not tabs.
			var elem,
4281.1Use spaces, not tabs.
				isPartStr = typeof part === "string",
4282.1Use spaces, not tabs.
				i = 0,
4283.1Use spaces, not tabs.
				l = checkSet.length;
4285.1Use spaces, not tabs.
			if ( isPartStr && !rNonWord.test( part ) ) {
4286.1Use spaces, not tabs.
				part = part.toLowerCase();
4288.1Use spaces, not tabs.
				for ( ; i < l; i++ ) {
4289.1Use spaces, not tabs.
					elem = checkSet[i];
4291.1Use spaces, not tabs.
					if ( elem ) {
4292.1Use spaces, not tabs.
						var parent = elem.parentNode;
4293.1Use spaces, not tabs.
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
4294.1Use spaces, not tabs.
					}
4295.1Use spaces, not tabs.
				}
4297.1Use spaces, not tabs.
			} else {
4298.1Use spaces, not tabs.
				for ( ; i < l; i++ ) {
4299.1Use spaces, not tabs.
					elem = checkSet[i];
4301.1Use spaces, not tabs.
					if ( elem ) {
4302.1Use spaces, not tabs.
						checkSet[i] = isPartStr ?
4303.1Use spaces, not tabs.
							elem.parentNode :
4304.1Use spaces, not tabs.
							elem.parentNode === part;
4305.1Use spaces, not tabs.
					}
4306.1Use spaces, not tabs.
				}
4308.1Use spaces, not tabs.
				if ( isPartStr ) {
4309.1Use spaces, not tabs.
					Sizzle.filter( part, checkSet, true );
4310.1Use spaces, not tabs.
				}
4311.1Use spaces, not tabs.
			}
4312.1Use spaces, not tabs.
		},
4314.1Use spaces, not tabs.
		"": function(checkSet, part, isXML){
4315.1Use spaces, not tabs.
			var nodeCheck,
4316.1Use spaces, not tabs.
				doneName = done++,
4317.1Use spaces, not tabs.
				checkFn = dirCheck;
4319.1Use spaces, not tabs.
			if ( typeof part === "string" && !rNonWord.test( part ) ) {
4320.1Use spaces, not tabs.
				part = part.toLowerCase();
4321.1Use spaces, not tabs.
				nodeCheck = part;
4322.1Use spaces, not tabs.
				checkFn = dirNodeCheck;
4323.1Use spaces, not tabs.
			}
4325.1Use spaces, not tabs.
			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
4326.1Use spaces, not tabs.
		},
4328.1Use spaces, not tabs.
		"~": function( checkSet, part, isXML ) {
4329.1Use spaces, not tabs.
			var nodeCheck,
4330.1Use spaces, not tabs.
				doneName = done++,
4331.1Use spaces, not tabs.
				checkFn = dirCheck;
4333.1Use spaces, not tabs.
			if ( typeof part === "string" && !rNonWord.test( part ) ) {
4334.1Use spaces, not tabs.
				part = part.toLowerCase();
4335.1Use spaces, not tabs.
				nodeCheck = part;
4336.1Use spaces, not tabs.
				checkFn = dirNodeCheck;
4337.1Use spaces, not tabs.
			}
4339.1Use spaces, not tabs.
			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
4340.1Use spaces, not tabs.
		}
4341.1Use spaces, not tabs.
	},
4343.1Use spaces, not tabs.
	find: {
4344.1Use spaces, not tabs.
		ID: function( match, context, isXML ) {
4345.1Use spaces, not tabs.
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
4346.1Use spaces, not tabs.
				var m = context.getElementById(match[1]);
4347.1Use spaces, not tabs.
				// Check parentNode to catch when Blackberry 4.6 returns
4348.1Use spaces, not tabs.
				// nodes that are no longer in the document #6963
4349.1Use spaces, not tabs.
				return m && m.parentNode ? [m] : [];
4350.1Use spaces, not tabs.
			}
4351.1Use spaces, not tabs.
		},
4353.1Use spaces, not tabs.
		NAME: function( match, context ) {
4354.1Use spaces, not tabs.
			if ( typeof context.getElementsByName !== "undefined" ) {
4355.1Use spaces, not tabs.
				var ret = [],
4356.1Use spaces, not tabs.
					results = context.getElementsByName( match[1] );
4358.1Use spaces, not tabs.
				for ( var i = 0, l = results.length; i < l; i++ ) {
4359.1Use spaces, not tabs.
					if ( results[i].getAttribute("name") === match[1] ) {
4360.1Use spaces, not tabs.
						ret.push( results[i] );
4361.1Use spaces, not tabs.
					}
4362.1Use spaces, not tabs.
				}
4364.1Use spaces, not tabs.
				return ret.length === 0 ? null : ret;
4365.1Use spaces, not tabs.
			}
4366.1Use spaces, not tabs.
		},
4368.1Use spaces, not tabs.
		TAG: function( match, context ) {
4369.1Use spaces, not tabs.
			if ( typeof context.getElementsByTagName !== "undefined" ) {
4370.1Use spaces, not tabs.
				return context.getElementsByTagName( match[1] );
4371.1Use spaces, not tabs.
			}
4372.1Use spaces, not tabs.
		}
4373.1Use spaces, not tabs.
	},
4374.1Use spaces, not tabs.
	preFilter: {
4375.1Use spaces, not tabs.
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
4376.1Use spaces, not tabs.
			match = " " + match[1].replace( rBackslash, "" ) + " ";
4378.1Use spaces, not tabs.
			if ( isXML ) {
4379.1Use spaces, not tabs.
				return match;
4380.1Use spaces, not tabs.
			}
4382.1Use spaces, not tabs.
			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
4383.1Use spaces, not tabs.
				if ( elem ) {
4384.1Use spaces, not tabs.
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
4385.1Use spaces, not tabs.
						if ( !inplace ) {
4386.1Use spaces, not tabs.
							result.push( elem );
4387.1Use spaces, not tabs.
						}
4389.1Use spaces, not tabs.
					} else if ( inplace ) {
4390.1Use spaces, not tabs.
						curLoop[i] = false;
4391.1Use spaces, not tabs.
					}
4392.1Use spaces, not tabs.
				}
4393.1Use spaces, not tabs.
			}
4395.1Use spaces, not tabs.
			return false;
4396.1Use spaces, not tabs.
		},
4398.1Use spaces, not tabs.
		ID: function( match ) {
4399.1Use spaces, not tabs.
			return match[1].replace( rBackslash, "" );
4400.1Use spaces, not tabs.
		},
4402.1Use spaces, not tabs.
		TAG: function( match, curLoop ) {
4403.1Use spaces, not tabs.
			return match[1].replace( rBackslash, "" ).toLowerCase();
4404.1Use spaces, not tabs.
		},
4406.1Use spaces, not tabs.
		CHILD: function( match ) {
4407.1Use spaces, not tabs.
			if ( match[1] === "nth" ) {
4408.1Use spaces, not tabs.
				if ( !match[2] ) {
4409.1Use spaces, not tabs.
					Sizzle.error( match[0] );
4410.1Use spaces, not tabs.
				}
4412.1Use spaces, not tabs.
				match[2] = match[2].replace(/^\+|\s*/g, '');
4412.45Expected '"' and instead saw '''.
				match[2] = match[2].replace(/^\+|\s*/g, '');
4414.1Use spaces, not tabs.
				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
4415.1Use spaces, not tabs.
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
4416.1Use spaces, not tabs.
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
4417.1Use spaces, not tabs.
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);
4417.6Wrap this regexp in parens to avoid confusion.
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);
4419.1Use spaces, not tabs.
				// calculate the numbers (first)n+(last) including if they are negative
4420.1Use spaces, not tabs.
				match[2] = (test[1] + (test[2] || 1)) - 0;
4421.1Use spaces, not tabs.
				match[3] = test[3] - 0;
4422.1Use spaces, not tabs.
			}
4423.1Use spaces, not tabs.
			else if ( match[2] ) {
4424.1Use spaces, not tabs.
				Sizzle.error( match[0] );
4425.1Use spaces, not tabs.
			}
4427.1Use spaces, not tabs.
			// TODO: Move to normal caching system
4427.3Unexpected TODO comment.
			// TODO: Move to normal caching system
4428.1Use spaces, not tabs.
			match[0] = done++;
4430.1Use spaces, not tabs.
			return match;
4431.1Use spaces, not tabs.
		},
4433.1Use spaces, not tabs.
		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
4434.1Use spaces, not tabs.
			var name = match[1] = match[1].replace( rBackslash, "" );
4435.1Use spaces, not tabs.
			
4435.2Unexpected trailing space.
			
4436.1Use spaces, not tabs.
			if ( !isXML && Expr.attrMap[name] ) {
4437.1Use spaces, not tabs.
				match[1] = Expr.attrMap[name];
4438.1Use spaces, not tabs.
			}
4440.1Use spaces, not tabs.
			// Handle if an un-quoted value was used
4441.1Use spaces, not tabs.
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );
4443.1Use spaces, not tabs.
			if ( match[2] === "~=" ) {
4444.1Use spaces, not tabs.
				match[4] = " " + match[4] + " ";
4445.1Use spaces, not tabs.
			}
4447.1Use spaces, not tabs.
			return match;
4448.1Use spaces, not tabs.
		},
4450.1Use spaces, not tabs.
		PSEUDO: function( match, curLoop, inplace, result, not ) {
4451.1Use spaces, not tabs.
			if ( match[1] === "not" ) {
4452.1Use spaces, not tabs.
				// If we're dealing with a complex expression, or a simple one
4453.1Use spaces, not tabs.
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
4453.56Wrap this regexp in parens to avoid confusion.
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
4454.1Use spaces, not tabs.
					match[3] = Sizzle(match[3], null, null, curLoop);
4456.1Use spaces, not tabs.
				} else {
4457.1Use spaces, not tabs.
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
4459.1Use spaces, not tabs.
					if ( !inplace ) {
4460.1Use spaces, not tabs.
						result.push.apply( result, ret );
4461.1Use spaces, not tabs.
					}
4463.1Use spaces, not tabs.
					return false;
4464.1Use spaces, not tabs.
				}
4466.1Use spaces, not tabs.
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
4467.1Use spaces, not tabs.
				return true;
4468.1Use spaces, not tabs.
			}
4469.1Use spaces, not tabs.
			
4469.2Unexpected trailing space.
			
4470.1Use spaces, not tabs.
			return match;
4471.1Use spaces, not tabs.
		},
4473.1Use spaces, not tabs.
		POS: function( match ) {
4474.1Use spaces, not tabs.
			match.unshift( true );
4476.1Use spaces, not tabs.
			return match;
4477.1Use spaces, not tabs.
		}
4478.1Use spaces, not tabs.
	},
4479.0Unexpected trailing space.
	
4479.1Use spaces, not tabs.
	
4480.1Use spaces, not tabs.
	filters: {
4481.1Use spaces, not tabs.
		enabled: function( elem ) {
4482.1Use spaces, not tabs.
			return elem.disabled === false && elem.type !== "hidden";
4483.1Use spaces, not tabs.
		},
4485.1Use spaces, not tabs.
		disabled: function( elem ) {
4486.1Use spaces, not tabs.
			return elem.disabled === true;
4487.1Use spaces, not tabs.
		},
4489.1Use spaces, not tabs.
		checked: function( elem ) {
4490.1Use spaces, not tabs.
			return elem.checked === true;
4491.1Use spaces, not tabs.
		},
4492.1Unexpected trailing space.
		
4492.1Use spaces, not tabs.
		
4493.1Use spaces, not tabs.
		selected: function( elem ) {
4494.1Use spaces, not tabs.
			// Accessing this property makes selected-by-default
4495.1Use spaces, not tabs.
			// options in Safari work properly
4496.1Use spaces, not tabs.
			if ( elem.parentNode ) {
4497.1Use spaces, not tabs.
				elem.parentNode.selectedIndex;
4498.1Use spaces, not tabs.
			}
4499.1Use spaces, not tabs.
			
4499.2Unexpected trailing space.
			
4500.1Use spaces, not tabs.
			return elem.selected === true;
4501.1Use spaces, not tabs.
		},
4503.1Use spaces, not tabs.
		parent: function( elem ) {
4504.1Use spaces, not tabs.
			return !!elem.firstChild;
4505.1Use spaces, not tabs.
		},
4507.1Use spaces, not tabs.
		empty: function( elem ) {
4508.1Use spaces, not tabs.
			return !elem.firstChild;
4509.1Use spaces, not tabs.
		},
4511.1Use spaces, not tabs.
		has: function( elem, i, match ) {
4512.1Use spaces, not tabs.
			return !!Sizzle( match[3], elem ).length;
4513.1Use spaces, not tabs.
		},
4515.1Use spaces, not tabs.
		header: function( elem ) {
4516.1Use spaces, not tabs.
			return (/h\d/i).test( elem.nodeName );
4517.1Use spaces, not tabs.
		},
4519.1Use spaces, not tabs.
		text: function( elem ) {
4520.1Use spaces, not tabs.
			var attr = elem.getAttribute( "type" ), type = elem.type;
4521.1Use spaces, not tabs.
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
4521.78Unexpected trailing space.
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
4522.1Use spaces, not tabs.
			// use getAttribute instead to test this case
4523.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
4524.1Use spaces, not tabs.
		},
4526.1Use spaces, not tabs.
		radio: function( elem ) {
4527.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
4528.1Use spaces, not tabs.
		},
4530.1Use spaces, not tabs.
		checkbox: function( elem ) {
4531.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
4532.1Use spaces, not tabs.
		},
4534.1Use spaces, not tabs.
		file: function( elem ) {
4535.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
4536.1Use spaces, not tabs.
		},
4538.1Use spaces, not tabs.
		password: function( elem ) {
4539.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
4540.1Use spaces, not tabs.
		},
4542.1Use spaces, not tabs.
		submit: function( elem ) {
4543.1Use spaces, not tabs.
			var name = elem.nodeName.toLowerCase();
4544.1Use spaces, not tabs.
			return (name === "input" || name === "button") && "submit" === elem.type;
4545.1Use spaces, not tabs.
		},
4547.1Use spaces, not tabs.
		image: function( elem ) {
4548.1Use spaces, not tabs.
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
4549.1Use spaces, not tabs.
		},
4551.1Use spaces, not tabs.
		reset: function( elem ) {
4552.1Use spaces, not tabs.
			var name = elem.nodeName.toLowerCase();
4553.1Use spaces, not tabs.
			return (name === "input" || name === "button") && "reset" === elem.type;
4554.1Use spaces, not tabs.
		},
4556.1Use spaces, not tabs.
		button: function( elem ) {
4557.1Use spaces, not tabs.
			var name = elem.nodeName.toLowerCase();
4558.1Use spaces, not tabs.
			return name === "input" && "button" === elem.type || name === "button";
4559.1Use spaces, not tabs.
		},
4561.1Use spaces, not tabs.
		input: function( elem ) {
4562.1Use spaces, not tabs.
			return (/input|select|textarea|button/i).test( elem.nodeName );
4563.1Use spaces, not tabs.
		},
4565.1Use spaces, not tabs.
		focus: function( elem ) {
4566.1Use spaces, not tabs.
			return elem === elem.ownerDocument.activeElement;
4567.1Use spaces, not tabs.
		}
4568.1Use spaces, not tabs.
	},
4569.1Use spaces, not tabs.
	setFilters: {
4570.1Use spaces, not tabs.
		first: function( elem, i ) {
4571.1Use spaces, not tabs.
			return i === 0;
4572.1Use spaces, not tabs.
		},
4574.1Use spaces, not tabs.
		last: function( elem, i, match, array ) {
4575.1Use spaces, not tabs.
			return i === array.length - 1;
4576.1Use spaces, not tabs.
		},
4578.1Use spaces, not tabs.
		even: function( elem, i ) {
4579.1Use spaces, not tabs.
			return i % 2 === 0;
4580.1Use spaces, not tabs.
		},
4582.1Use spaces, not tabs.
		odd: function( elem, i ) {
4583.1Use spaces, not tabs.
			return i % 2 === 1;
4584.1Use spaces, not tabs.
		},
4586.1Use spaces, not tabs.
		lt: function( elem, i, match ) {
4587.1Use spaces, not tabs.
			return i < match[3] - 0;
4588.1Use spaces, not tabs.
		},
4590.1Use spaces, not tabs.
		gt: function( elem, i, match ) {
4591.1Use spaces, not tabs.
			return i > match[3] - 0;
4592.1Use spaces, not tabs.
		},
4594.1Use spaces, not tabs.
		nth: function( elem, i, match ) {
4595.1Use spaces, not tabs.
			return match[3] - 0 === i;
4596.1Use spaces, not tabs.
		},
4598.1Use spaces, not tabs.
		eq: function( elem, i, match ) {
4599.1Use spaces, not tabs.
			return match[3] - 0 === i;
4600.1Use spaces, not tabs.
		}
4601.1Use spaces, not tabs.
	},
4602.1Use spaces, not tabs.
	filter: {
4603.1Use spaces, not tabs.
		PSEUDO: function( elem, match, i, array ) {
4604.1Use spaces, not tabs.
			var name = match[1],
4605.1Use spaces, not tabs.
				filter = Expr.filters[ name ];
4607.1Use spaces, not tabs.
			if ( filter ) {
4608.1Use spaces, not tabs.
				return filter( elem, i, match, array );
4610.1Use spaces, not tabs.
			} else if ( name === "contains" ) {
4611.1Use spaces, not tabs.
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;
4613.1Use spaces, not tabs.
			} else if ( name === "not" ) {
4614.1Use spaces, not tabs.
				var not = match[3];
4616.1Use spaces, not tabs.
				for ( var j = 0, l = not.length; j < l; j++ ) {
4617.1Use spaces, not tabs.
					if ( not[j] === elem ) {
4618.1Use spaces, not tabs.
						return false;
4619.1Use spaces, not tabs.
					}
4620.1Use spaces, not tabs.
				}
4622.1Use spaces, not tabs.
				return true;
4624.1Use spaces, not tabs.
			} else {
4625.1Use spaces, not tabs.
				Sizzle.error( name );
4626.1Use spaces, not tabs.
			}
4627.1Use spaces, not tabs.
		},
4629.1Use spaces, not tabs.
		CHILD: function( elem, match ) {
4630.1Use spaces, not tabs.
			var first, last,
4631.1Use spaces, not tabs.
				doneName, parent, cache,
4632.1Use spaces, not tabs.
				count, diff,
4633.1Use spaces, not tabs.
				type = match[1],
4634.1Use spaces, not tabs.
				node = elem;
4636.1Use spaces, not tabs.
			switch ( type ) {
4637.1Use spaces, not tabs.
				case "only":
4638.1Use spaces, not tabs.
				case "first":
4639.1Use spaces, not tabs.
					while ( (node = node.previousSibling) )	 {
4640.1Use spaces, not tabs.
						if ( node.nodeType === 1 ) { 
4640.34Unexpected trailing space.
						if ( node.nodeType === 1 ) { 
4641.1Use spaces, not tabs.
							return false; 
4641.20Unexpected trailing space.
							return false; 
4642.1Use spaces, not tabs.
						}
4643.1Use spaces, not tabs.
					}
4645.1Use spaces, not tabs.
					if ( type === "first" ) { 
4645.30Unexpected trailing space.
					if ( type === "first" ) { 
4646.1Use spaces, not tabs.
						return true; 
4646.18Unexpected trailing space.
						return true; 
4647.1Use spaces, not tabs.
					}
4649.1Use spaces, not tabs.
					node = elem;
4651.1Use spaces, not tabs.
				case "last":
4652.1Use spaces, not tabs.
					while ( (node = node.nextSibling) )	 {
4653.1Use spaces, not tabs.
						if ( node.nodeType === 1 ) { 
4653.34Unexpected trailing space.
						if ( node.nodeType === 1 ) { 
4654.1Use spaces, not tabs.
							return false; 
4654.20Unexpected trailing space.
							return false; 
4655.1Use spaces, not tabs.
						}
4656.1Use spaces, not tabs.
					}
4658.1Use spaces, not tabs.
					return true;
4660.1Use spaces, not tabs.
				case "nth":
4661.1Use spaces, not tabs.
					first = match[2];
4662.1Use spaces, not tabs.
					last = match[3];
4664.1Use spaces, not tabs.
					if ( first === 1 && last === 0 ) {
4665.1Use spaces, not tabs.
						return true;
4666.1Use spaces, not tabs.
					}
4667.1Use spaces, not tabs.
					
4667.4Unexpected trailing space.
					
4668.1Use spaces, not tabs.
					doneName = match[0];
4669.1Use spaces, not tabs.
					parent = elem.parentNode;
4670.0Unexpected trailing space.
	
4670.1Use spaces, not tabs.
	
4671.1Use spaces, not tabs.
					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
4672.1Use spaces, not tabs.
						count = 0;
4673.1Use spaces, not tabs.
						
4673.5Unexpected trailing space.
						
4674.1Use spaces, not tabs.
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
4675.1Use spaces, not tabs.
							if ( node.nodeType === 1 ) {
4676.1Use spaces, not tabs.
								node.nodeIndex = ++count;
4677.1Use spaces, not tabs.
							}
4678.1Use spaces, not tabs.
						} 
4678.7Unexpected trailing space.
						} 
4680.1Use spaces, not tabs.
						parent[ expando ] = doneName;
4681.1Use spaces, not tabs.
					}
4682.1Use spaces, not tabs.
					
4682.4Unexpected trailing space.
					
4683.1Use spaces, not tabs.
					diff = elem.nodeIndex - last;
4685.1Use spaces, not tabs.
					if ( first === 0 ) {
4686.1Use spaces, not tabs.
						return diff === 0;
4688.1Use spaces, not tabs.
					} else {
4689.1Use spaces, not tabs.
						return ( diff % first === 0 && diff / first >= 0 );
4690.1Use spaces, not tabs.
					}
4691.1Use spaces, not tabs.
			}
4692.1Use spaces, not tabs.
		},
4694.1Use spaces, not tabs.
		ID: function( elem, match ) {
4695.1Use spaces, not tabs.
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
4696.1Use spaces, not tabs.
		},
4698.1Use spaces, not tabs.
		TAG: function( elem, match ) {
4699.1Use spaces, not tabs.
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
4700.1Use spaces, not tabs.
		},
4701.1Use spaces, not tabs.
		
4701.1Unexpected trailing space.
		
4702.1Use spaces, not tabs.
		CLASS: function( elem, match ) {
4703.1Use spaces, not tabs.
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
4704.1Use spaces, not tabs.
				.indexOf( match ) > -1;
4705.1Use spaces, not tabs.
		},
4707.1Use spaces, not tabs.
		ATTR: function( elem, match ) {
4708.1Use spaces, not tabs.
			var name = match[1],
4709.1Use spaces, not tabs.
				result = Sizzle.attr ?
4710.1Use spaces, not tabs.
					Sizzle.attr( elem, name ) :
4711.1Use spaces, not tabs.
					Expr.attrHandle[ name ] ?
4712.1Use spaces, not tabs.
					Expr.attrHandle[ name ]( elem ) :
4713.1Use spaces, not tabs.
					elem[ name ] != null ?
4714.1Use spaces, not tabs.
						elem[ name ] :
4715.1Use spaces, not tabs.
						elem.getAttribute( name ),
4716.1Use spaces, not tabs.
				value = result + "",
4717.1Use spaces, not tabs.
				type = match[2],
4718.1Use spaces, not tabs.
				check = match[4];
4720.1Use spaces, not tabs.
			return result == null ?
4721.1Use spaces, not tabs.
				type === "!=" :
4722.1Use spaces, not tabs.
				!type && Sizzle.attr ?
4723.1Use spaces, not tabs.
				result != null :
4724.1Use spaces, not tabs.
				type === "=" ?
4725.1Use spaces, not tabs.
				value === check :
4726.1Use spaces, not tabs.
				type === "*=" ?
4727.1Use spaces, not tabs.
				value.indexOf(check) >= 0 :
4728.1Use spaces, not tabs.
				type === "~=" ?
4729.1Use spaces, not tabs.
				(" " + value + " ").indexOf(check) >= 0 :
4730.1Use spaces, not tabs.
				!check ?
4731.1Use spaces, not tabs.
				value && result !== false :
4732.1Use spaces, not tabs.
				type === "!=" ?
4733.1Use spaces, not tabs.
				value !== check :
4734.1Use spaces, not tabs.
				type === "^=" ?
4735.1Use spaces, not tabs.
				value.indexOf(check) === 0 :
4736.1Use spaces, not tabs.
				type === "$=" ?
4737.1Use spaces, not tabs.
				value.substr(value.length - check.length) === check :
4738.1Use spaces, not tabs.
				type === "|=" ?
4739.1Use spaces, not tabs.
				value === check || value.substr(0, check.length + 1) === check + "-" :
4740.1Use spaces, not tabs.
				false;
4741.1Use spaces, not tabs.
		},
4743.1Use spaces, not tabs.
		POS: function( elem, match, i, array ) {
4744.1Use spaces, not tabs.
			var name = match[2],
4745.1Use spaces, not tabs.
				filter = Expr.setFilters[ name ];
4747.1Use spaces, not tabs.
			if ( filter ) {
4748.1Use spaces, not tabs.
				return filter( elem, i, match, array );
4749.1Use spaces, not tabs.
			}
4750.1Use spaces, not tabs.
		}
4751.1Use spaces, not tabs.
	}
4755.1Use spaces, not tabs.
	fescape = function(all, num){
4756.1Use spaces, not tabs.
		return "\\" + (num - 0 + 1);
4757.1Use spaces, not tabs.
	};
4760.1Use spaces, not tabs.
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
4761.1Use spaces, not tabs.
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
4765.1Use spaces, not tabs.
	array = Array.prototype.slice.call( array, 0 );
4767.1Use spaces, not tabs.
	if ( results ) {
4768.1Use spaces, not tabs.
		results.push.apply( results, array );
4769.1Use spaces, not tabs.
		return results;
4770.1Use spaces, not tabs.
	}
4771.0Unexpected trailing space.
	
4771.1Use spaces, not tabs.
	
4772.1Use spaces, not tabs.
	return array;
4780.1Use spaces, not tabs.
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;
4784.1Use spaces, not tabs.
	makeArray = function( array, results ) {
4785.1Use spaces, not tabs.
		var i = 0,
4786.1Use spaces, not tabs.
			ret = results || [];
4788.1Use spaces, not tabs.
		if ( toString.call(array) === "[object Array]" ) {
4789.1Use spaces, not tabs.
			Array.prototype.push.apply( ret, array );
4791.1Use spaces, not tabs.
		} else {
4792.1Use spaces, not tabs.
			if ( typeof array.length === "number" ) {
4793.1Use spaces, not tabs.
				for ( var l = array.length; i < l; i++ ) {
4794.1Use spaces, not tabs.
					ret.push( array[i] );
4795.1Use spaces, not tabs.
				}
4797.1Use spaces, not tabs.
			} else {
4798.1Use spaces, not tabs.
				for ( ; array[i]; i++ ) {
4799.1Use spaces, not tabs.
					ret.push( array[i] );
4800.1Use spaces, not tabs.
				}
4801.1Use spaces, not tabs.
			}
4802.1Use spaces, not tabs.
		}
4804.1Use spaces, not tabs.
		return ret;
4805.1Use spaces, not tabs.
	};
4811.1Use spaces, not tabs.
	sortOrder = function( a, b ) {
4812.1Use spaces, not tabs.
		if ( a === b ) {
4813.1Use spaces, not tabs.
			hasDuplicate = true;
4814.1Use spaces, not tabs.
			return 0;
4815.1Use spaces, not tabs.
		}
4817.1Use spaces, not tabs.
		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
4818.1Use spaces, not tabs.
			return a.compareDocumentPosition ? -1 : 1;
4819.1Use spaces, not tabs.
		}
4821.1Use spaces, not tabs.
		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
4822.1Use spaces, not tabs.
	};
4825.1Use spaces, not tabs.
	sortOrder = function( a, b ) {
4826.1Use spaces, not tabs.
		// The nodes are identical, we can exit early
4827.1Use spaces, not tabs.
		if ( a === b ) {
4828.1Use spaces, not tabs.
			hasDuplicate = true;
4829.1Use spaces, not tabs.
			return 0;
4831.1Use spaces, not tabs.
		// Fallback to using sourceIndex (in IE) if it's available on both nodes
4832.1Use spaces, not tabs.
		} else if ( a.sourceIndex && b.sourceIndex ) {
4833.1Use spaces, not tabs.
			return a.sourceIndex - b.sourceIndex;
4834.1Use spaces, not tabs.
		}
4836.1Use spaces, not tabs.
		var al, bl,
4837.1Use spaces, not tabs.
			ap = [],
4838.1Use spaces, not tabs.
			bp = [],
4839.1Use spaces, not tabs.
			aup = a.parentNode,
4840.1Use spaces, not tabs.
			bup = b.parentNode,
4841.1Use spaces, not tabs.
			cur = aup;
4843.1Use spaces, not tabs.
		// If the nodes are siblings (or identical) we can do a quick check
4844.1Use spaces, not tabs.
		if ( aup === bup ) {
4845.1Use spaces, not tabs.
			return siblingCheck( a, b );
4847.1Use spaces, not tabs.
		// If no parents were found then the nodes are disconnected
4848.1Use spaces, not tabs.
		} else if ( !aup ) {
4849.1Use spaces, not tabs.
			return -1;
4851.1Use spaces, not tabs.
		} else if ( !bup ) {
4852.1Use spaces, not tabs.
			return 1;
4853.1Use spaces, not tabs.
		}
4855.1Use spaces, not tabs.
		// Otherwise they're somewhere else in the tree so we need
4856.1Use spaces, not tabs.
		// to build up a full list of the parentNodes for comparison
4857.1Use spaces, not tabs.
		while ( cur ) {
4858.1Use spaces, not tabs.
			ap.unshift( cur );
4859.1Use spaces, not tabs.
			cur = cur.parentNode;
4860.1Use spaces, not tabs.
		}
4862.1Use spaces, not tabs.
		cur = bup;
4864.1Use spaces, not tabs.
		while ( cur ) {
4865.1Use spaces, not tabs.
			bp.unshift( cur );
4866.1Use spaces, not tabs.
			cur = cur.parentNode;
4867.1Use spaces, not tabs.
		}
4869.1Use spaces, not tabs.
		al = ap.length;
4870.1Use spaces, not tabs.
		bl = bp.length;
4872.1Use spaces, not tabs.
		// Start walking down the tree looking for a discrepancy
4873.1Use spaces, not tabs.
		for ( var i = 0; i < al && i < bl; i++ ) {
4874.1Use spaces, not tabs.
			if ( ap[i] !== bp[i] ) {
4875.1Use spaces, not tabs.
				return siblingCheck( ap[i], bp[i] );
4876.1Use spaces, not tabs.
			}
4877.1Use spaces, not tabs.
		}
4879.1Use spaces, not tabs.
		// We ended someplace up the tree so do a sibling check
4880.1Use spaces, not tabs.
		return i === al ?
4881.1Use spaces, not tabs.
			siblingCheck( a, bp[i], -1 ) :
4882.1Use spaces, not tabs.
			siblingCheck( ap[i], b, 1 );
4883.1Use spaces, not tabs.
	};
4885.1Use spaces, not tabs.
	siblingCheck = function( a, b, ret ) {
4886.1Use spaces, not tabs.
		if ( a === b ) {
4887.1Use spaces, not tabs.
			return ret;
4888.1Use spaces, not tabs.
		}
4890.1Use spaces, not tabs.
		var cur = a.nextSibling;
4892.1Use spaces, not tabs.
		while ( cur ) {
4893.1Use spaces, not tabs.
			if ( cur === b ) {
4894.1Use spaces, not tabs.
				return -1;
4895.1Use spaces, not tabs.
			}
4897.1Use spaces, not tabs.
			cur = cur.nextSibling;
4898.1Use spaces, not tabs.
		}
4900.1Use spaces, not tabs.
		return 1;
4901.1Use spaces, not tabs.
	};
4907.1Use spaces, not tabs.
	// We're going to inject a fake input element with a specified name
4908.1Use spaces, not tabs.
	var form = document.createElement("div"),
4909.1Use spaces, not tabs.
		id = "script" + (new Date()).getTime(),
4910.1Use spaces, not tabs.
		root = document.documentElement;
4912.1Use spaces, not tabs.
	form.innerHTML = "<a name='" + id + "'/>";
4914.1Use spaces, not tabs.
	// Inject it into the root element, check its status, and remove it quickly
4915.1Use spaces, not tabs.
	root.insertBefore( form, root.firstChild );
4917.1Use spaces, not tabs.
	// The workaround has to do additional checks after a getElementById
4918.1Use spaces, not tabs.
	// Which slows things down for other browsers (hence the branching)
4919.1Use spaces, not tabs.
	if ( document.getElementById( id ) ) {
4920.1Use spaces, not tabs.
		Expr.find.ID = function( match, context, isXML ) {
4921.1Use spaces, not tabs.
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
4922.1Use spaces, not tabs.
				var m = context.getElementById(match[1]);
4924.1Use spaces, not tabs.
				return m ?
4925.1Use spaces, not tabs.
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
4926.1Use spaces, not tabs.
						[m] :
4927.1Use spaces, not tabs.
						undefined :
4928.1Use spaces, not tabs.
					[];
4929.1Use spaces, not tabs.
			}
4930.1Use spaces, not tabs.
		};
4932.1Use spaces, not tabs.
		Expr.filter.ID = function( elem, match ) {
4933.1Use spaces, not tabs.
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
4935.1Use spaces, not tabs.
			return elem.nodeType === 1 && node && node.nodeValue === match;
4936.1Use spaces, not tabs.
		};
4937.1Use spaces, not tabs.
	}
4939.1Use spaces, not tabs.
	root.removeChild( form );
4941.1Use spaces, not tabs.
	// release memory in IE
4942.1Use spaces, not tabs.
	root = form = null;
4946.1Use spaces, not tabs.
	// Check to see if the browser returns only elements
4947.1Use spaces, not tabs.
	// when doing getElementsByTagName("*")
4949.1Use spaces, not tabs.
	// Create a fake element
4950.1Use spaces, not tabs.
	var div = document.createElement("div");
4951.1Use spaces, not tabs.
	div.appendChild( document.createComment("") );
4953.1Use spaces, not tabs.
	// Make sure no comments are found
4954.1Use spaces, not tabs.
	if ( div.getElementsByTagName("*").length > 0 ) {
4955.1Use spaces, not tabs.
		Expr.find.TAG = function( match, context ) {
4956.1Use spaces, not tabs.
			var results = context.getElementsByTagName( match[1] );
4958.1Use spaces, not tabs.
			// Filter out possible comments
4959.1Use spaces, not tabs.
			if ( match[1] === "*" ) {
4960.1Use spaces, not tabs.
				var tmp = [];
4962.1Use spaces, not tabs.
				for ( var i = 0; results[i]; i++ ) {
4963.1Use spaces, not tabs.
					if ( results[i].nodeType === 1 ) {
4964.1Use spaces, not tabs.
						tmp.push( results[i] );
4965.1Use spaces, not tabs.
					}
4966.1Use spaces, not tabs.
				}
4968.1Use spaces, not tabs.
				results = tmp;
4969.1Use spaces, not tabs.
			}
4971.1Use spaces, not tabs.
			return results;
4972.1Use spaces, not tabs.
		};
4973.1Use spaces, not tabs.
	}
4975.1Use spaces, not tabs.
	// Check to see if an attribute returns normalized href attributes
4976.1Use spaces, not tabs.
	div.innerHTML = "<a href='#'></a>";
4978.1Use spaces, not tabs.
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
4979.1Use spaces, not tabs.
			div.firstChild.getAttribute("href") !== "#" ) {
4981.1Use spaces, not tabs.
		Expr.attrHandle.href = function( elem ) {
4982.1Use spaces, not tabs.
			return elem.getAttribute( "href", 2 );
4983.1Use spaces, not tabs.
		};
4984.1Use spaces, not tabs.
	}
4986.1Use spaces, not tabs.
	// release memory in IE
4987.1Use spaces, not tabs.
	div = null;
4991.1Use spaces, not tabs.
	(function(){
4992.1Use spaces, not tabs.
		var oldSizzle = Sizzle,
4993.1Use spaces, not tabs.
			div = document.createElement("div"),
4994.1Use spaces, not tabs.
			id = "__sizzle__";
4996.1Use spaces, not tabs.
		div.innerHTML = "<p class='TEST'></p>";
4998.1Use spaces, not tabs.
		// Safari can't handle uppercase or unicode characters when
4999.1Use spaces, not tabs.
		// in quirks mode.
5000.1Use spaces, not tabs.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
5001.1Use spaces, not tabs.
			return;
5002.1Use spaces, not tabs.
		}
5003.0Unexpected trailing space.
	
5003.1Use spaces, not tabs.
	
5004.1Use spaces, not tabs.
		Sizzle = function( query, context, extra, seed ) {
5005.1Use spaces, not tabs.
			context = context || document;
5007.1Use spaces, not tabs.
			// Only use querySelectorAll on non-XML documents
5008.1Use spaces, not tabs.
			// (ID selectors don't work in non-HTML documents)
5009.1Use spaces, not tabs.
			if ( !seed && !Sizzle.isXML(context) ) {
5010.1Use spaces, not tabs.
				// See if we find a selector to speed up
5011.1Use spaces, not tabs.
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
5012.1Use spaces, not tabs.
				
5012.3Unexpected trailing space.
				
5013.1Use spaces, not tabs.
				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
5014.1Use spaces, not tabs.
					// Speed-up: Sizzle("TAG")
5015.1Use spaces, not tabs.
					if ( match[1] ) {
5016.1Use spaces, not tabs.
						return makeArray( context.getElementsByTagName( query ), extra );
5017.1Use spaces, not tabs.
					
5017.4Unexpected trailing space.
					
5018.1Use spaces, not tabs.
					// Speed-up: Sizzle(".CLASS")
5019.1Use spaces, not tabs.
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
5020.1Use spaces, not tabs.
						return makeArray( context.getElementsByClassName( match[2] ), extra );
5021.1Use spaces, not tabs.
					}
5022.1Use spaces, not tabs.
				}
5023.1Use spaces, not tabs.
				
5023.3Unexpected trailing space.
				
5024.1Use spaces, not tabs.
				if ( context.nodeType === 9 ) {
5025.1Use spaces, not tabs.
					// Speed-up: Sizzle("body")
5026.1Use spaces, not tabs.
					// The body element only exists once, optimize finding it
5027.1Use spaces, not tabs.
					if ( query === "body" && context.body ) {
5028.1Use spaces, not tabs.
						return makeArray( [ context.body ], extra );
5029.1Use spaces, not tabs.
						
5029.5Unexpected trailing space.
						
5030.1Use spaces, not tabs.
					// Speed-up: Sizzle("#ID")
5031.1Use spaces, not tabs.
					} else if ( match && match[3] ) {
5032.1Use spaces, not tabs.
						var elem = context.getElementById( match[3] );
5034.1Use spaces, not tabs.
						// Check parentNode to catch when Blackberry 4.6 returns
5035.1Use spaces, not tabs.
						// nodes that are no longer in the document #6963
5036.1Use spaces, not tabs.
						if ( elem && elem.parentNode ) {
5037.1Use spaces, not tabs.
							// Handle the case where IE and Opera return items
5038.1Use spaces, not tabs.
							// by name instead of ID
5039.1Use spaces, not tabs.
							if ( elem.id === match[3] ) {
5040.1Use spaces, not tabs.
								return makeArray( [ elem ], extra );
5041.1Use spaces, not tabs.
							}
5042.1Use spaces, not tabs.
							
5042.6Unexpected trailing space.
							
5043.1Use spaces, not tabs.
						} else {
5044.1Use spaces, not tabs.
							return makeArray( [], extra );
5045.1Use spaces, not tabs.
						}
5046.1Use spaces, not tabs.
					}
5047.1Use spaces, not tabs.
					
5047.4Unexpected trailing space.
					
5048.1Use spaces, not tabs.
					try {
5049.1Use spaces, not tabs.
						return makeArray( context.querySelectorAll(query), extra );
5050.1Use spaces, not tabs.
					} catch(qsaError) {}
5052.1Use spaces, not tabs.
				// qSA works strangely on Element-rooted queries
5053.1Use spaces, not tabs.
				// We can work around this by specifying an extra ID on the root
5054.1Use spaces, not tabs.
				// and working up from there (Thanks to Andrew Dupont for the technique)
5055.1Use spaces, not tabs.
				// IE 8 doesn't work on object elements
5056.1Use spaces, not tabs.
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
5057.1Use spaces, not tabs.
					var oldContext = context,
5058.1Use spaces, not tabs.
						old = context.getAttribute( "id" ),
5059.1Use spaces, not tabs.
						nid = old || id,
5060.1Use spaces, not tabs.
						hasParent = context.parentNode,
5061.1Use spaces, not tabs.
						relativeHierarchySelector = /^\s*[+~]/.test( query );
5063.1Use spaces, not tabs.
					if ( !old ) {
5064.1Use spaces, not tabs.
						context.setAttribute( "id", nid );
5065.1Use spaces, not tabs.
					} else {
5066.1Use spaces, not tabs.
						nid = nid.replace( /'/g, "\\$&" );
5067.1Use spaces, not tabs.
					}
5068.1Use spaces, not tabs.
					if ( relativeHierarchySelector && hasParent ) {
5069.1Use spaces, not tabs.
						context = context.parentNode;
5070.1Use spaces, not tabs.
					}
5072.1Use spaces, not tabs.
					try {
5073.1Use spaces, not tabs.
						if ( !relativeHierarchySelector || hasParent ) {
5074.1Use spaces, not tabs.
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
5075.1Use spaces, not tabs.
						}
5077.1Use spaces, not tabs.
					} catch(pseudoError) {
5078.1Use spaces, not tabs.
					} finally {
5079.1Use spaces, not tabs.
						if ( !old ) {
5080.1Use spaces, not tabs.
							oldContext.removeAttribute( "id" );
5081.1Use spaces, not tabs.
						}
5082.1Use spaces, not tabs.
					}
5083.1Use spaces, not tabs.
				}
5084.1Use spaces, not tabs.
			}
5085.1Use spaces, not tabs.
		
5085.1Unexpected trailing space.
		
5086.1Use spaces, not tabs.
			return oldSizzle(query, context, extra, seed);
5087.1Use spaces, not tabs.
		};
5089.1Use spaces, not tabs.
		for ( var prop in oldSizzle ) {
5090.1Use spaces, not tabs.
			Sizzle[ prop ] = oldSizzle[ prop ];
5091.1Use spaces, not tabs.
		}
5093.1Use spaces, not tabs.
		// release memory in IE
5094.1Use spaces, not tabs.
		div = null;
5095.1Use spaces, not tabs.
	})();
5099.1Use spaces, not tabs.
	var html = document.documentElement,
5100.1Use spaces, not tabs.
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;
5102.1Use spaces, not tabs.
	if ( matches ) {
5103.1Use spaces, not tabs.
		// Check to see if it's possible to do matchesSelector
5104.1Use spaces, not tabs.
		// on a disconnected node (IE 9 fails this)
5105.1Use spaces, not tabs.
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
5106.1Use spaces, not tabs.
			pseudoWorks = false;
5108.1Use spaces, not tabs.
		try {
5109.1Use spaces, not tabs.
			// This should fail with an exception
5110.1Use spaces, not tabs.
			// Gecko does not error, returns false instead
5111.1Use spaces, not tabs.
			matches.call( document.documentElement, "[test!='']:sizzle" );
5112.0Unexpected trailing space.
	
5112.1Use spaces, not tabs.
	
5113.1Use spaces, not tabs.
		} catch( pseudoError ) {
5114.1Use spaces, not tabs.
			pseudoWorks = true;
5115.1Use spaces, not tabs.
		}
5117.1Use spaces, not tabs.
		Sizzle.matchesSelector = function( node, expr ) {
5118.1Use spaces, not tabs.
			// Make sure that attribute selectors are quoted
5119.1Use spaces, not tabs.
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
5121.1Use spaces, not tabs.
			if ( !Sizzle.isXML( node ) ) {
5122.1Use spaces, not tabs.
				try { 
5122.9Unexpected trailing space.
				try { 
5123.1Use spaces, not tabs.
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
5123.61Wrap this regexp in parens to avoid confusion.
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
5124.1Use spaces, not tabs.
						var ret = matches.call( node, expr );
5126.1Use spaces, not tabs.
						// IE 9's matchesSelector returns false on disconnected nodes
5127.1Use spaces, not tabs.
						if ( ret || !disconnectedMatch ||
5128.1Use spaces, not tabs.
								// As well, disconnected nodes are said to be in a document
5129.1Use spaces, not tabs.
								// fragment in IE 9, so check for that
5130.1Use spaces, not tabs.
								node.document && node.document.nodeType !== 11 ) {
5131.1Use spaces, not tabs.
							return ret;
5132.1Use spaces, not tabs.
						}
5133.1Use spaces, not tabs.
					}
5134.1Use spaces, not tabs.
				} catch(e) {}
5135.1Use spaces, not tabs.
			}
5137.1Use spaces, not tabs.
			return Sizzle(expr, null, null, [node]).length > 0;
5138.1Use spaces, not tabs.
		};
5139.1Use spaces, not tabs.
	}
5143.1Use spaces, not tabs.
	var div = document.createElement("div");
5145.1Use spaces, not tabs.
	div.innerHTML = "<div class='test e'></div><div class='test'></div>";
5147.1Use spaces, not tabs.
	// Opera can't find a second classname (in 9.6)
5148.1Use spaces, not tabs.
	// Also, make sure that getElementsByClassName actually exists
5149.1Use spaces, not tabs.
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
5150.1Use spaces, not tabs.
		return;
5151.1Use spaces, not tabs.
	}
5153.1Use spaces, not tabs.
	// Safari caches class attributes, doesn't catch changes (in 3.2)
5154.1Use spaces, not tabs.
	div.lastChild.className = "e";
5156.1Use spaces, not tabs.
	if ( div.getElementsByClassName("e").length === 1 ) {
5157.1Use spaces, not tabs.
		return;
5158.1Use spaces, not tabs.
	}
5159.0Unexpected trailing space.
	
5159.1Use spaces, not tabs.
	
5160.1Use spaces, not tabs.
	Expr.order.splice(1, 0, "CLASS");
5161.1Use spaces, not tabs.
	Expr.find.CLASS = function( match, context, isXML ) {
5162.1Use spaces, not tabs.
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
5163.1Use spaces, not tabs.
			return context.getElementsByClassName(match[1]);
5164.1Use spaces, not tabs.
		}
5165.1Use spaces, not tabs.
	};
5167.1Use spaces, not tabs.
	// release memory in IE
5168.1Use spaces, not tabs.
	div = null;
5172.1Use spaces, not tabs.
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
5173.1Use spaces, not tabs.
		var elem = checkSet[i];
5175.1Use spaces, not tabs.
		if ( elem ) {
5176.1Use spaces, not tabs.
			var match = false;
5178.1Use spaces, not tabs.
			elem = elem[dir];
5180.1Use spaces, not tabs.
			while ( elem ) {
5181.1Use spaces, not tabs.
				if ( elem[ expando ] === doneName ) {
5182.1Use spaces, not tabs.
					match = checkSet[elem.sizset];
5183.1Use spaces, not tabs.
					break;
5184.1Use spaces, not tabs.
				}
5186.1Use spaces, not tabs.
				if ( elem.nodeType === 1 && !isXML ){
5187.1Use spaces, not tabs.
					elem[ expando ] = doneName;
5188.1Use spaces, not tabs.
					elem.sizset = i;
5189.1Use spaces, not tabs.
				}
5191.1Use spaces, not tabs.
				if ( elem.nodeName.toLowerCase() === cur ) {
5192.1Use spaces, not tabs.
					match = elem;
5193.1Use spaces, not tabs.
					break;
5194.1Use spaces, not tabs.
				}
5196.1Use spaces, not tabs.
				elem = elem[dir];
5197.1Use spaces, not tabs.
			}
5199.1Use spaces, not tabs.
			checkSet[i] = match;
5200.1Use spaces, not tabs.
		}
5201.1Use spaces, not tabs.
	}
5205.1Use spaces, not tabs.
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
5206.1Use spaces, not tabs.
		var elem = checkSet[i];
5208.1Use spaces, not tabs.
		if ( elem ) {
5209.1Use spaces, not tabs.
			var match = false;
5210.1Use spaces, not tabs.
			
5210.2Unexpected trailing space.
			
5211.1Use spaces, not tabs.
			elem = elem[dir];
5213.1Use spaces, not tabs.
			while ( elem ) {
5214.1Use spaces, not tabs.
				if ( elem[ expando ] === doneName ) {
5215.1Use spaces, not tabs.
					match = checkSet[elem.sizset];
5216.1Use spaces, not tabs.
					break;
5217.1Use spaces, not tabs.
				}
5219.1Use spaces, not tabs.
				if ( elem.nodeType === 1 ) {
5220.1Use spaces, not tabs.
					if ( !isXML ) {
5221.1Use spaces, not tabs.
						elem[ expando ] = doneName;
5222.1Use spaces, not tabs.
						elem.sizset = i;
5223.1Use spaces, not tabs.
					}
5225.1Use spaces, not tabs.
					if ( typeof cur !== "string" ) {
5226.1Use spaces, not tabs.
						if ( elem === cur ) {
5227.1Use spaces, not tabs.
							match = true;
5228.1Use spaces, not tabs.
							break;
5229.1Use spaces, not tabs.
						}
5231.1Use spaces, not tabs.
					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
5232.1Use spaces, not tabs.
						match = elem;
5233.1Use spaces, not tabs.
						break;
5234.1Use spaces, not tabs.
					}
5235.1Use spaces, not tabs.
				}
5237.1Use spaces, not tabs.
				elem = elem[dir];
5238.1Use spaces, not tabs.
			}
5240.1Use spaces, not tabs.
			checkSet[i] = match;
5241.1Use spaces, not tabs.
		}
5242.1Use spaces, not tabs.
	}
5246.1Use spaces, not tabs.
	Sizzle.contains = function( a, b ) {
5247.1Use spaces, not tabs.
		return a !== b && (a.contains ? a.contains(b) : true);
5248.1Use spaces, not tabs.
	};
5251.1Use spaces, not tabs.
	Sizzle.contains = function( a, b ) {
5252.1Use spaces, not tabs.
		return !!(a.compareDocumentPosition(b) & 16);
5253.1Use spaces, not tabs.
	};
5256.1Use spaces, not tabs.
	Sizzle.contains = function() {
5257.1Use spaces, not tabs.
		return false;
5258.1Use spaces, not tabs.
	};
5262.1Use spaces, not tabs.
	// documentElement is verified for cases where it doesn't yet exist
5263.1Use spaces, not tabs.
	// (such as loading iframes in IE - #4833) 
5263.43Unexpected trailing space.
	// (such as loading iframes in IE - #4833) 
5264.1Use spaces, not tabs.
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
5266.1Use spaces, not tabs.
	return documentElement ? documentElement.nodeName !== "HTML" : false;
5270.1Use spaces, not tabs.
	var match,
5271.1Use spaces, not tabs.
		tmpSet = [],
5272.1Use spaces, not tabs.
		later = "",
5273.1Use spaces, not tabs.
		root = context.nodeType ? [context] : context;
5275.1Use spaces, not tabs.
	// Position selectors must be done after the filter
5276.1Use spaces, not tabs.
	// And so must :not(positional) so we move all PSEUDOs to the end
5277.1Use spaces, not tabs.
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
5278.1Use spaces, not tabs.
		later += match[0];
5279.1Use spaces, not tabs.
		selector = selector.replace( Expr.match.PSEUDO, "" );
5280.1Use spaces, not tabs.
	}
5282.1Use spaces, not tabs.
	selector = Expr.relative[selector] ? selector + "*" : selector;
5284.1Use spaces, not tabs.
	for ( var i = 0, l = root.length; i < l; i++ ) {
5285.1Use spaces, not tabs.
		Sizzle( selector, root[i], tmpSet, seed );
5286.1Use spaces, not tabs.
	}
5288.1Use spaces, not tabs.
	return Sizzle.filter( later, tmpSet );
5308.1Use spaces, not tabs.
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
5309.1Use spaces, not tabs.
	// Note: This RegExp should be improved, or likely pulled from Sizzle
5310.1Use spaces, not tabs.
	rmultiselector = /,/,
5311.1Use spaces, not tabs.
	isSimple = /^.[^:#\[\.,]*$/,
5312.1Use spaces, not tabs.
	slice = Array.prototype.slice,
5313.1Use spaces, not tabs.
	POS = jQuery.expr.match.POS,
5314.1Use spaces, not tabs.
	// methods guaranteed to produce a unique set when starting from a unique set
5315.1Use spaces, not tabs.
	guaranteedUnique = {
5316.1Use spaces, not tabs.
		children: true,
5317.1Use spaces, not tabs.
		contents: true,
5318.1Use spaces, not tabs.
		next: true,
5319.1Use spaces, not tabs.
		prev: true
5320.1Use spaces, not tabs.
	};
5323.1Use spaces, not tabs.
	find: function( selector ) {
5324.1Use spaces, not tabs.
		var self = this,
5325.1Use spaces, not tabs.
			i, l;
5327.1Use spaces, not tabs.
		if ( typeof selector !== "string" ) {
5328.1Use spaces, not tabs.
			return jQuery( selector ).filter(function() {
5329.1Use spaces, not tabs.
				for ( i = 0, l = self.length; i < l; i++ ) {
5330.1Use spaces, not tabs.
					if ( jQuery.contains( self[ i ], this ) ) {
5331.1Use spaces, not tabs.
						return true;
5332.1Use spaces, not tabs.
					}
5333.1Use spaces, not tabs.
				}
5334.1Use spaces, not tabs.
			});
5335.1Use spaces, not tabs.
		}
5337.1Use spaces, not tabs.
		var ret = this.pushStack( "", "find", selector ),
5338.1Use spaces, not tabs.
			length, n, r;
5340.1Use spaces, not tabs.
		for ( i = 0, l = this.length; i < l; i++ ) {
5341.1Use spaces, not tabs.
			length = ret.length;
5342.1Use spaces, not tabs.
			jQuery.find( selector, this[i], ret );
5344.1Use spaces, not tabs.
			if ( i > 0 ) {
5345.1Use spaces, not tabs.
				// Make sure that the results are unique
5346.1Use spaces, not tabs.
				for ( n = length; n < ret.length; n++ ) {
5347.1Use spaces, not tabs.
					for ( r = 0; r < length; r++ ) {
5348.1Use spaces, not tabs.
						if ( ret[r] === ret[n] ) {
5349.1Use spaces, not tabs.
							ret.splice(n--, 1);
5350.1Use spaces, not tabs.
							break;
5351.1Use spaces, not tabs.
						}
5352.1Use spaces, not tabs.
					}
5353.1Use spaces, not tabs.
				}
5354.1Use spaces, not tabs.
			}
5355.1Use spaces, not tabs.
		}
5357.1Use spaces, not tabs.
		return ret;
5358.1Use spaces, not tabs.
	},
5360.1Use spaces, not tabs.
	has: function( target ) {
5361.1Use spaces, not tabs.
		var targets = jQuery( target );
5362.1Use spaces, not tabs.
		return this.filter(function() {
5363.1Use spaces, not tabs.
			for ( var i = 0, l = targets.length; i < l; i++ ) {
5364.1Use spaces, not tabs.
				if ( jQuery.contains( this, targets[i] ) ) {
5365.1Use spaces, not tabs.
					return true;
5366.1Use spaces, not tabs.
				}
5367.1Use spaces, not tabs.
			}
5368.1Use spaces, not tabs.
		});
5369.1Use spaces, not tabs.
	},
5371.1Use spaces, not tabs.
	not: function( selector ) {
5372.1Use spaces, not tabs.
		return this.pushStack( winnow(this, selector, false), "not", selector);
5373.1Use spaces, not tabs.
	},
5375.1Use spaces, not tabs.
	filter: function( selector ) {
5376.1Use spaces, not tabs.
		return this.pushStack( winnow(this, selector, true), "filter", selector );
5377.1Use spaces, not tabs.
	},
5379.1Use spaces, not tabs.
	is: function( selector ) {
5380.1Use spaces, not tabs.
		return !!selector && ( 
5380.24Unexpected trailing space.
		return !!selector && ( 
5381.1Use spaces, not tabs.
			typeof selector === "string" ?
5382.1Use spaces, not tabs.
				// If this is a positional selector, check membership in the returned set
5383.1Use spaces, not tabs.
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
5384.1Use spaces, not tabs.
				POS.test( selector ) ? 
5384.26Unexpected trailing space.
				POS.test( selector ) ? 
5385.1Use spaces, not tabs.
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
5386.1Use spaces, not tabs.
					jQuery.filter( selector, this ).length > 0 :
5387.1Use spaces, not tabs.
				this.filter( selector ).length > 0 );
5388.1Use spaces, not tabs.
	},
5390.1Use spaces, not tabs.
	closest: function( selectors, context ) {
5391.1Use spaces, not tabs.
		var ret = [], i, l, cur = this[0];
5392.1Use spaces, not tabs.
		
5392.1Unexpected trailing space.
		
5393.1Use spaces, not tabs.
		// Array (deprecated as of jQuery 1.7)
5394.1Use spaces, not tabs.
		if ( jQuery.isArray( selectors ) ) {
5395.1Use spaces, not tabs.
			var level = 1;
5397.1Use spaces, not tabs.
			while ( cur && cur.ownerDocument && cur !== context ) {
5398.1Use spaces, not tabs.
				for ( i = 0; i < selectors.length; i++ ) {
5400.1Use spaces, not tabs.
					if ( jQuery( cur ).is( selectors[ i ] ) ) {
5401.1Use spaces, not tabs.
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
5402.1Use spaces, not tabs.
					}
5403.1Use spaces, not tabs.
				}
5405.1Use spaces, not tabs.
				cur = cur.parentNode;
5406.1Use spaces, not tabs.
				level++;
5407.1Use spaces, not tabs.
			}
5409.1Use spaces, not tabs.
			return ret;
5410.1Use spaces, not tabs.
		}
5412.1Use spaces, not tabs.
		// String
5413.1Use spaces, not tabs.
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
5414.1Use spaces, not tabs.
				jQuery( selectors, context || this.context ) :
5415.1Use spaces, not tabs.
				0;
5417.1Use spaces, not tabs.
		for ( i = 0, l = this.length; i < l; i++ ) {
5418.1Use spaces, not tabs.
			cur = this[i];
5420.1Use spaces, not tabs.
			while ( cur ) {
5421.1Use spaces, not tabs.
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
5422.1Use spaces, not tabs.
					ret.push( cur );
5423.1Use spaces, not tabs.
					break;
5425.1Use spaces, not tabs.
				} else {
5426.1Use spaces, not tabs.
					cur = cur.parentNode;
5427.1Use spaces, not tabs.
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
5428.1Use spaces, not tabs.
						break;
5429.1Use spaces, not tabs.
					}
5430.1Use spaces, not tabs.
				}
5431.1Use spaces, not tabs.
			}
5432.1Use spaces, not tabs.
		}
5434.1Use spaces, not tabs.
		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;
5436.1Use spaces, not tabs.
		return this.pushStack( ret, "closest", selectors );
5437.1Use spaces, not tabs.
	},
5439.1Use spaces, not tabs.
	// Determine the position of an element within
5440.1Use spaces, not tabs.
	// the matched set of elements
5441.1Use spaces, not tabs.
	index: function( elem ) {
5443.1Use spaces, not tabs.
		// No argument, return index in parent
5444.1Use spaces, not tabs.
		if ( !elem ) {
5445.1Use spaces, not tabs.
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
5446.1Use spaces, not tabs.
		}
5448.1Use spaces, not tabs.
		// index in selector
5449.1Use spaces, not tabs.
		if ( typeof elem === "string" ) {
5450.1Use spaces, not tabs.
			return jQuery.inArray( this[0], jQuery( elem ) );
5451.1Use spaces, not tabs.
		}
5453.1Use spaces, not tabs.
		// Locate the position of the desired element
5454.1Use spaces, not tabs.
		return jQuery.inArray(
5455.1Use spaces, not tabs.
			// If it receives a jQuery object, the first element is used
5456.1Use spaces, not tabs.
			elem.jquery ? elem[0] : elem, this );
5457.1Use spaces, not tabs.
	},
5459.1Use spaces, not tabs.
	add: function( selector, context ) {
5460.1Use spaces, not tabs.
		var set = typeof selector === "string" ?
5461.1Use spaces, not tabs.
				jQuery( selector, context ) :
5462.1Use spaces, not tabs.
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
5463.1Use spaces, not tabs.
			all = jQuery.merge( this.get(), set );
5465.1Use spaces, not tabs.
		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
5466.1Use spaces, not tabs.
			all :
5467.1Use spaces, not tabs.
			jQuery.unique( all ) );
5468.1Use spaces, not tabs.
	},
5470.1Use spaces, not tabs.
	andSelf: function() {
5471.1Use spaces, not tabs.
		return this.add( this.prevObject );
5472.1Use spaces, not tabs.
	}
5478.1Use spaces, not tabs.
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
5482.1Use spaces, not tabs.
	parent: function( elem ) {
5483.1Use spaces, not tabs.
		var parent = elem.parentNode;
5484.1Use spaces, not tabs.
		return parent && parent.nodeType !== 11 ? parent : null;
5485.1Use spaces, not tabs.
	},
5486.1Use spaces, not tabs.
	parents: function( elem ) {
5487.1Use spaces, not tabs.
		return jQuery.dir( elem, "parentNode" );
5488.1Use spaces, not tabs.
	},
5489.1Use spaces, not tabs.
	parentsUntil: function( elem, i, until ) {
5490.1Use spaces, not tabs.
		return jQuery.dir( elem, "parentNode", until );
5491.1Use spaces, not tabs.
	},
5492.1Use spaces, not tabs.
	next: function( elem ) {
5493.1Use spaces, not tabs.
		return jQuery.nth( elem, 2, "nextSibling" );
5494.1Use spaces, not tabs.
	},
5495.1Use spaces, not tabs.
	prev: function( elem ) {
5496.1Use spaces, not tabs.
		return jQuery.nth( elem, 2, "previousSibling" );
5497.1Use spaces, not tabs.
	},
5498.1Use spaces, not tabs.
	nextAll: function( elem ) {
5499.1Use spaces, not tabs.
		return jQuery.dir( elem, "nextSibling" );
5500.1Use spaces, not tabs.
	},
5501.1Use spaces, not tabs.
	prevAll: function( elem ) {
5502.1Use spaces, not tabs.
		return jQuery.dir( elem, "previousSibling" );
5503.1Use spaces, not tabs.
	},
5504.1Use spaces, not tabs.
	nextUntil: function( elem, i, until ) {
5505.1Use spaces, not tabs.
		return jQuery.dir( elem, "nextSibling", until );
5506.1Use spaces, not tabs.
	},
5507.1Use spaces, not tabs.
	prevUntil: function( elem, i, until ) {
5508.1Use spaces, not tabs.
		return jQuery.dir( elem, "previousSibling", until );
5509.1Use spaces, not tabs.
	},
5510.1Use spaces, not tabs.
	siblings: function( elem ) {
5511.1Use spaces, not tabs.
		return jQuery.sibling( elem.parentNode.firstChild, elem );
5512.1Use spaces, not tabs.
	},
5513.1Use spaces, not tabs.
	children: function( elem ) {
5514.1Use spaces, not tabs.
		return jQuery.sibling( elem.firstChild );
5515.1Use spaces, not tabs.
	},
5516.1Use spaces, not tabs.
	contents: function( elem ) {
5517.1Use spaces, not tabs.
		return jQuery.nodeName( elem, "iframe" ) ?
5518.1Use spaces, not tabs.
			elem.contentDocument || elem.contentWindow.document :
5519.1Use spaces, not tabs.
			jQuery.makeArray( elem.childNodes );
5520.1Use spaces, not tabs.
	}
5522.1Use spaces, not tabs.
	jQuery.fn[ name ] = function( until, selector ) {
5523.1Use spaces, not tabs.
		var ret = jQuery.map( this, fn, until );
5525.1Use spaces, not tabs.
		if ( !runtil.test( name ) ) {
5526.1Use spaces, not tabs.
			selector = until;
5527.1Use spaces, not tabs.
		}
5529.1Use spaces, not tabs.
		if ( selector && typeof selector === "string" ) {
5530.1Use spaces, not tabs.
			ret = jQuery.filter( selector, ret );
5531.1Use spaces, not tabs.
		}
5533.1Use spaces, not tabs.
		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;
5535.1Use spaces, not tabs.
		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
5536.1Use spaces, not tabs.
			ret = ret.reverse();
5537.1Use spaces, not tabs.
		}
5539.1Use spaces, not tabs.
		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
5540.1Use spaces, not tabs.
	};
5544.1Use spaces, not tabs.
	filter: function( expr, elems, not ) {
5545.1Use spaces, not tabs.
		if ( not ) {
5546.1Use spaces, not tabs.
			expr = ":not(" + expr + ")";
5547.1Use spaces, not tabs.
		}
5549.1Use spaces, not tabs.
		return elems.length === 1 ?
5550.1Use spaces, not tabs.
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
5551.1Use spaces, not tabs.
			jQuery.find.matches(expr, elems);
5552.1Use spaces, not tabs.
	},
5554.1Use spaces, not tabs.
	dir: function( elem, dir, until ) {
5555.1Use spaces, not tabs.
		var matched = [],
5556.1Use spaces, not tabs.
			cur = elem[ dir ];
5558.1Use spaces, not tabs.
		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
5559.1Use spaces, not tabs.
			if ( cur.nodeType === 1 ) {
5560.1Use spaces, not tabs.
				matched.push( cur );
5561.1Use spaces, not tabs.
			}
5562.1Use spaces, not tabs.
			cur = cur[dir];
5563.1Use spaces, not tabs.
		}
5564.1Use spaces, not tabs.
		return matched;
5565.1Use spaces, not tabs.
	},
5567.1Use spaces, not tabs.
	nth: function( cur, result, dir, elem ) {
5568.1Use spaces, not tabs.
		result = result || 1;
5569.1Use spaces, not tabs.
		var num = 0;
5571.1Use spaces, not tabs.
		for ( ; cur; cur = cur[dir] ) {
5572.1Use spaces, not tabs.
			if ( cur.nodeType === 1 && ++num === result ) {
5573.1Use spaces, not tabs.
				break;
5574.1Use spaces, not tabs.
			}
5575.1Use spaces, not tabs.
		}
5577.1Use spaces, not tabs.
		return cur;
5578.1Use spaces, not tabs.
	},
5580.1Use spaces, not tabs.
	sibling: function( n, elem ) {
5581.1Use spaces, not tabs.
		var r = [];
5583.1Use spaces, not tabs.
		for ( ; n; n = n.nextSibling ) {
5584.1Use spaces, not tabs.
			if ( n.nodeType === 1 && n !== elem ) {
5585.1Use spaces, not tabs.
				r.push( n );
5586.1Use spaces, not tabs.
			}
5587.1Use spaces, not tabs.
		}
5589.1Use spaces, not tabs.
		return r;
5590.1Use spaces, not tabs.
	}
5596.1Use spaces, not tabs.
	// Can't pass null or undefined to indexOf in Firefox 4
5597.1Use spaces, not tabs.
	// Set to 0 to skip string check
5598.1Use spaces, not tabs.
	qualifier = qualifier || 0;
5600.1Use spaces, not tabs.
	if ( jQuery.isFunction( qualifier ) ) {
5601.1Use spaces, not tabs.
		return jQuery.grep(elements, function( elem, i ) {
5602.1Use spaces, not tabs.
			var retVal = !!qualifier.call( elem, i, elem );
5603.1Use spaces, not tabs.
			return retVal === keep;
5604.1Use spaces, not tabs.
		});
5606.1Use spaces, not tabs.
	} else if ( qualifier.nodeType ) {
5607.1Use spaces, not tabs.
		return jQuery.grep(elements, function( elem, i ) {
5608.1Use spaces, not tabs.
			return ( elem === qualifier ) === keep;
5609.1Use spaces, not tabs.
		});
5611.1Use spaces, not tabs.
	} else if ( typeof qualifier === "string" ) {
5612.1Use spaces, not tabs.
		var filtered = jQuery.grep(elements, function( elem ) {
5613.1Use spaces, not tabs.
			return elem.nodeType === 1;
5614.1Use spaces, not tabs.
		});
5616.1Use spaces, not tabs.
		if ( isSimple.test( qualifier ) ) {
5617.1Use spaces, not tabs.
			return jQuery.filter(qualifier, filtered, !keep);
5618.1Use spaces, not tabs.
		} else {
5619.1Use spaces, not tabs.
			qualifier = jQuery.filter( qualifier, filtered );
5620.1Use spaces, not tabs.
		}
5621.1Use spaces, not tabs.
	}
5623.1Use spaces, not tabs.
	return jQuery.grep(elements, function( elem, i ) {
5624.1Use spaces, not tabs.
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
5625.1Use spaces, not tabs.
	});
5632.1Use spaces, not tabs.
	var list = nodeNames.split( "|" ),
5633.1Use spaces, not tabs.
	safeFrag = document.createDocumentFragment();
5635.1Use spaces, not tabs.
	if ( safeFrag.createElement ) {
5636.1Use spaces, not tabs.
		while ( list.length ) {
5637.1Use spaces, not tabs.
			safeFrag.createElement(
5638.1Use spaces, not tabs.
				list.pop()
5639.1Use spaces, not tabs.
			);
5640.1Use spaces, not tabs.
		}
5641.1Use spaces, not tabs.
	}
5642.1Use spaces, not tabs.
	return safeFrag;
5646.1Use spaces, not tabs.
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
5647.1Use spaces, not tabs.
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
5647.19Expected '\' before ' '.
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
5648.1Use spaces, not tabs.
	rleadingWhitespace = /^\s+/,
5649.1Use spaces, not tabs.
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
5650.1Use spaces, not tabs.
	rtagName = /<([\w:]+)/,
5651.1Use spaces, not tabs.
	rtbody = /<tbody/i,
5652.1Use spaces, not tabs.
	rhtml = /<|&#?\w+;/,
5653.1Use spaces, not tabs.
	rnoInnerhtml = /<(?:script|style)/i,
5654.1Use spaces, not tabs.
	rnocache = /<(?:script|object|embed|option|style)/i,
5655.1Use spaces, not tabs.
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"),
5656.1Use spaces, not tabs.
	// checked="checked" or checked
5657.1Use spaces, not tabs.
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
5658.1Use spaces, not tabs.
	rscriptType = /\/(java|ecma)script/i,
5659.1Use spaces, not tabs.
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
5659.38Unexpected '-' after '\'.
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
5659.40Unexpected '-' after '\'.
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
5660.1Use spaces, not tabs.
	wrapMap = {
5661.1Use spaces, not tabs.
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
5662.1Use spaces, not tabs.
		legend: [ 1, "<fieldset>", "</fieldset>" ],
5663.1Use spaces, not tabs.
		thead: [ 1, "<table>", "</table>" ],
5664.1Use spaces, not tabs.
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
5665.1Use spaces, not tabs.
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
5666.1Use spaces, not tabs.
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
5667.1Use spaces, not tabs.
		area: [ 1, "<map>", "</map>" ],
5668.1Use spaces, not tabs.
		_default: [ 0, "", "" ]
5669.1Use spaces, not tabs.
	},
5670.1Use spaces, not tabs.
	safeFragment = createSafeFragment( document );
5678.1Use spaces, not tabs.
	wrapMap._default = [ 1, "div<div>", "</div>" ];
5682.1Use spaces, not tabs.
	text: function( text ) {
5683.1Use spaces, not tabs.
		if ( jQuery.isFunction(text) ) {
5684.1Use spaces, not tabs.
			return this.each(function(i) {
5685.1Use spaces, not tabs.
				var self = jQuery( this );
5687.1Use spaces, not tabs.
				self.text( text.call(this, i, self.text()) );
5688.1Use spaces, not tabs.
			});
5689.1Use spaces, not tabs.
		}
5691.1Use spaces, not tabs.
		if ( typeof text !== "object" && text !== undefined ) {
5692.1Use spaces, not tabs.
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
5693.1Use spaces, not tabs.
		}
5695.1Use spaces, not tabs.
		return jQuery.text( this );
5696.1Use spaces, not tabs.
	},
5698.1Use spaces, not tabs.
	wrapAll: function( html ) {
5699.1Use spaces, not tabs.
		if ( jQuery.isFunction( html ) ) {
5700.1Use spaces, not tabs.
			return this.each(function(i) {
5701.1Use spaces, not tabs.
				jQuery(this).wrapAll( html.call(this, i) );
5702.1Use spaces, not tabs.
			});
5703.1Use spaces, not tabs.
		}
5705.1Use spaces, not tabs.
		if ( this[0] ) {
5706.1Use spaces, not tabs.
			// The elements to wrap the target around
5707.1Use spaces, not tabs.
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);
5709.1Use spaces, not tabs.
			if ( this[0].parentNode ) {
5710.1Use spaces, not tabs.
				wrap.insertBefore( this[0] );
5711.1Use spaces, not tabs.
			}
5713.1Use spaces, not tabs.
			wrap.map(function() {
5714.1Use spaces, not tabs.
				var elem = this;
5716.1Use spaces, not tabs.
				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
5717.1Use spaces, not tabs.
					elem = elem.firstChild;
5718.1Use spaces, not tabs.
				}
5720.1Use spaces, not tabs.
				return elem;
5721.1Use spaces, not tabs.
			}).append( this );
5722.1Use spaces, not tabs.
		}
5724.1Use spaces, not tabs.
		return this;
5725.1Use spaces, not tabs.
	},
5727.1Use spaces, not tabs.
	wrapInner: function( html ) {
5728.1Use spaces, not tabs.
		if ( jQuery.isFunction( html ) ) {
5729.1Use spaces, not tabs.
			return this.each(function(i) {
5730.1Use spaces, not tabs.
				jQuery(this).wrapInner( html.call(this, i) );
5731.1Use spaces, not tabs.
			});
5732.1Use spaces, not tabs.
		}
5734.1Use spaces, not tabs.
		return this.each(function() {
5735.1Use spaces, not tabs.
			var self = jQuery( this ),
5736.1Use spaces, not tabs.
				contents = self.contents();
5738.1Use spaces, not tabs.
			if ( contents.length ) {
5739.1Use spaces, not tabs.
				contents.wrapAll( html );
5741.1Use spaces, not tabs.
			} else {
5742.1Use spaces, not tabs.
				self.append( html );
5743.1Use spaces, not tabs.
			}
5744.1Use spaces, not tabs.
		});
5745.1Use spaces, not tabs.
	},
5747.1Use spaces, not tabs.
	wrap: function( html ) {
5748.1Use spaces, not tabs.
		var isFunction = jQuery.isFunction( html );
5750.1Use spaces, not tabs.
		return this.each(function(i) {
5751.1Use spaces, not tabs.
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
5752.1Use spaces, not tabs.
		});
5753.1Use spaces, not tabs.
	},
5755.1Use spaces, not tabs.
	unwrap: function() {
5756.1Use spaces, not tabs.
		return this.parent().each(function() {
5757.1Use spaces, not tabs.
			if ( !jQuery.nodeName( this, "body" ) ) {
5758.1Use spaces, not tabs.
				jQuery( this ).replaceWith( this.childNodes );
5759.1Use spaces, not tabs.
			}
5760.1Use spaces, not tabs.
		}).end();
5761.1Use spaces, not tabs.
	},
5763.1Use spaces, not tabs.
	append: function() {
5764.1Use spaces, not tabs.
		return this.domManip(arguments, true, function( elem ) {
5765.1Use spaces, not tabs.
			if ( this.nodeType === 1 ) {
5766.1Use spaces, not tabs.
				this.appendChild( elem );
5767.1Use spaces, not tabs.
			}
5768.1Use spaces, not tabs.
		});
5769.1Use spaces, not tabs.
	},
5771.1Use spaces, not tabs.
	prepend: function() {
5772.1Use spaces, not tabs.
		return this.domManip(arguments, true, function( elem ) {
5773.1Use spaces, not tabs.
			if ( this.nodeType === 1 ) {
5774.1Use spaces, not tabs.
				this.insertBefore( elem, this.firstChild );
5775.1Use spaces, not tabs.
			}
5776.1Use spaces, not tabs.
		});
5777.1Use spaces, not tabs.
	},
5779.1Use spaces, not tabs.
	before: function() {
5780.1Use spaces, not tabs.
		if ( this[0] && this[0].parentNode ) {
5781.1Use spaces, not tabs.
			return this.domManip(arguments, false, function( elem ) {
5782.1Use spaces, not tabs.
				this.parentNode.insertBefore( elem, this );
5783.1Use spaces, not tabs.
			});
5784.1Use spaces, not tabs.
		} else if ( arguments.length ) {
5785.1Use spaces, not tabs.
			var set = jQuery.clean( arguments );
5786.1Use spaces, not tabs.
			set.push.apply( set, this.toArray() );
5787.1Use spaces, not tabs.
			return this.pushStack( set, "before", arguments );
5788.1Use spaces, not tabs.
		}
5789.1Use spaces, not tabs.
	},
5791.1Use spaces, not tabs.
	after: function() {
5792.1Use spaces, not tabs.
		if ( this[0] && this[0].parentNode ) {
5793.1Use spaces, not tabs.
			return this.domManip(arguments, false, function( elem ) {
5794.1Use spaces, not tabs.
				this.parentNode.insertBefore( elem, this.nextSibling );
5795.1Use spaces, not tabs.
			});
5796.1Use spaces, not tabs.
		} else if ( arguments.length ) {
5797.1Use spaces, not tabs.
			var set = this.pushStack( this, "after", arguments );
5798.1Use spaces, not tabs.
			set.push.apply( set, jQuery.clean(arguments) );
5799.1Use spaces, not tabs.
			return set;
5800.1Use spaces, not tabs.
		}
5801.1Use spaces, not tabs.
	},
5803.1Use spaces, not tabs.
	// keepData is for internal use only--do not document
5804.1Use spaces, not tabs.
	remove: function( selector, keepData ) {
5805.1Use spaces, not tabs.
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
5806.1Use spaces, not tabs.
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
5807.1Use spaces, not tabs.
				if ( !keepData && elem.nodeType === 1 ) {
5808.1Use spaces, not tabs.
					jQuery.cleanData( elem.getElementsByTagName("*") );
5809.1Use spaces, not tabs.
					jQuery.cleanData( [ elem ] );
5810.1Use spaces, not tabs.
				}
5812.1Use spaces, not tabs.
				if ( elem.parentNode ) {
5813.1Use spaces, not tabs.
					elem.parentNode.removeChild( elem );
5814.1Use spaces, not tabs.
				}
5815.1Use spaces, not tabs.
			}
5816.1Use spaces, not tabs.
		}
5818.1Use spaces, not tabs.
		return this;
5819.1Use spaces, not tabs.
	},
5821.1Use spaces, not tabs.
	empty: function() {
5822.1Use spaces, not tabs.
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
5823.1Use spaces, not tabs.
			// Remove element nodes and prevent memory leaks
5824.1Use spaces, not tabs.
			if ( elem.nodeType === 1 ) {
5825.1Use spaces, not tabs.
				jQuery.cleanData( elem.getElementsByTagName("*") );
5826.1Use spaces, not tabs.
			}
5828.1Use spaces, not tabs.
			// Remove any remaining nodes
5829.1Use spaces, not tabs.
			while ( elem.firstChild ) {
5830.1Use spaces, not tabs.
				elem.removeChild( elem.firstChild );
5831.1Use spaces, not tabs.
			}
5832.1Use spaces, not tabs.
		}
5834.1Use spaces, not tabs.
		return this;
5835.1Use spaces, not tabs.
	},
5837.1Use spaces, not tabs.
	clone: function( dataAndEvents, deepDataAndEvents ) {
5838.1Use spaces, not tabs.
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
5839.1Use spaces, not tabs.
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
5841.1Use spaces, not tabs.
		return this.map( function () {
5842.1Use spaces, not tabs.
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
5843.1Use spaces, not tabs.
		});
5844.1Use spaces, not tabs.
	},
5846.1Use spaces, not tabs.
	html: function( value ) {
5847.1Use spaces, not tabs.
		if ( value === undefined ) {
5848.1Use spaces, not tabs.
			return this[0] && this[0].nodeType === 1 ?
5849.1Use spaces, not tabs.
				this[0].innerHTML.replace(rinlinejQuery, "") :
5850.1Use spaces, not tabs.
				null;
5852.1Use spaces, not tabs.
		// See if we can take a shortcut and just use innerHTML
5853.1Use spaces, not tabs.
		} else if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
5854.1Use spaces, not tabs.
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
5855.1Use spaces, not tabs.
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {
5857.1Use spaces, not tabs.
			value = value.replace(rxhtmlTag, "<$1></$2>");
5859.1Use spaces, not tabs.
			try {
5860.1Use spaces, not tabs.
				for ( var i = 0, l = this.length; i < l; i++ ) {
5861.1Use spaces, not tabs.
					// Remove element nodes and prevent memory leaks
5862.1Use spaces, not tabs.
					if ( this[i].nodeType === 1 ) {
5863.1Use spaces, not tabs.
						jQuery.cleanData( this[i].getElementsByTagName("*") );
5864.1Use spaces, not tabs.
						this[i].innerHTML = value;
5865.1Use spaces, not tabs.
					}
5866.1Use spaces, not tabs.
				}
5868.1Use spaces, not tabs.
			// If using innerHTML throws an exception, use the fallback method
5869.1Use spaces, not tabs.
			} catch(e) {
5870.1Use spaces, not tabs.
				this.empty().append( value );
5871.1Use spaces, not tabs.
			}
5873.1Use spaces, not tabs.
		} else if ( jQuery.isFunction( value ) ) {
5874.1Use spaces, not tabs.
			this.each(function(i){
5875.1Use spaces, not tabs.
				var self = jQuery( this );
5877.1Use spaces, not tabs.
				self.html( value.call(this, i, self.html()) );
5878.1Use spaces, not tabs.
			});
5880.1Use spaces, not tabs.
		} else {
5881.1Use spaces, not tabs.
			this.empty().append( value );
5882.1Use spaces, not tabs.
		}
5884.1Use spaces, not tabs.
		return this;
5885.1Use spaces, not tabs.
	},
5887.1Use spaces, not tabs.
	replaceWith: function( value ) {
5888.1Use spaces, not tabs.
		if ( this[0] && this[0].parentNode ) {
5889.1Use spaces, not tabs.
			// Make sure that the elements are removed from the DOM before they are inserted
5890.1Use spaces, not tabs.
			// this can help fix replacing a parent with child elements
5891.1Use spaces, not tabs.
			if ( jQuery.isFunction( value ) ) {
5892.1Use spaces, not tabs.
				return this.each(function(i) {
5893.1Use spaces, not tabs.
					var self = jQuery(this), old = self.html();
5894.1Use spaces, not tabs.
					self.replaceWith( value.call( this, i, old ) );
5895.1Use spaces, not tabs.
				});
5896.1Use spaces, not tabs.
			}
5898.1Use spaces, not tabs.
			if ( typeof value !== "string" ) {
5899.1Use spaces, not tabs.
				value = jQuery( value ).detach();
5900.1Use spaces, not tabs.
			}
5902.1Use spaces, not tabs.
			return this.each(function() {
5903.1Use spaces, not tabs.
				var next = this.nextSibling,
5904.1Use spaces, not tabs.
					parent = this.parentNode;
5906.1Use spaces, not tabs.
				jQuery( this ).remove();
5908.1Use spaces, not tabs.
				if ( next ) {
5909.1Use spaces, not tabs.
					jQuery(next).before( value );
5910.1Use spaces, not tabs.
				} else {
5911.1Use spaces, not tabs.
					jQuery(parent).append( value );
5912.1Use spaces, not tabs.
				}
5913.1Use spaces, not tabs.
			});
5914.1Use spaces, not tabs.
		} else {
5915.1Use spaces, not tabs.
			return this.length ?
5916.1Use spaces, not tabs.
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
5917.1Use spaces, not tabs.
				this;
5918.1Use spaces, not tabs.
		}
5919.1Use spaces, not tabs.
	},
5921.1Use spaces, not tabs.
	detach: function( selector ) {
5922.1Use spaces, not tabs.
		return this.remove( selector, true );
5923.1Use spaces, not tabs.
	},
5925.1Use spaces, not tabs.
	domManip: function( args, table, callback ) {
5926.1Use spaces, not tabs.
		var results, first, fragment, parent,
5927.1Use spaces, not tabs.
			value = args[0],
5928.1Use spaces, not tabs.
			scripts = [];
5930.1Use spaces, not tabs.
		// We can't cloneNode fragments that contain checked, in WebKit
5931.1Use spaces, not tabs.
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
5932.1Use spaces, not tabs.
			return this.each(function() {
5933.1Use spaces, not tabs.
				jQuery(this).domManip( args, table, callback, true );
5934.1Use spaces, not tabs.
			});
5935.1Use spaces, not tabs.
		}
5937.1Use spaces, not tabs.
		if ( jQuery.isFunction(value) ) {
5938.1Use spaces, not tabs.
			return this.each(function(i) {
5939.1Use spaces, not tabs.
				var self = jQuery(this);
5940.1Use spaces, not tabs.
				args[0] = value.call(this, i, table ? self.html() : undefined);
5941.1Use spaces, not tabs.
				self.domManip( args, table, callback );
5942.1Use spaces, not tabs.
			});
5943.1Use spaces, not tabs.
		}
5945.1Use spaces, not tabs.
		if ( this[0] ) {
5946.1Use spaces, not tabs.
			parent = value && value.parentNode;
5948.1Use spaces, not tabs.
			// If we're in a fragment, just use that instead of building a new one
5949.1Use spaces, not tabs.
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
5950.1Use spaces, not tabs.
				results = { fragment: parent };
5952.1Use spaces, not tabs.
			} else {
5953.1Use spaces, not tabs.
				results = jQuery.buildFragment( args, this, scripts );
5954.1Use spaces, not tabs.
			}
5956.1Use spaces, not tabs.
			fragment = results.fragment;
5958.1Use spaces, not tabs.
			if ( fragment.childNodes.length === 1 ) {
5959.1Use spaces, not tabs.
				first = fragment = fragment.firstChild;
5960.1Use spaces, not tabs.
			} else {
5961.1Use spaces, not tabs.
				first = fragment.firstChild;
5962.1Use spaces, not tabs.
			}
5964.1Use spaces, not tabs.
			if ( first ) {
5965.1Use spaces, not tabs.
				table = table && jQuery.nodeName( first, "tr" );
5967.1Use spaces, not tabs.
				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
5968.1Use spaces, not tabs.
					callback.call(
5969.1Use spaces, not tabs.
						table ?
5970.1Use spaces, not tabs.
							root(this[i], first) :
5971.1Use spaces, not tabs.
							this[i],
5972.1Use spaces, not tabs.
						// Make sure that we do not leak memory by inadvertently discarding
5973.1Use spaces, not tabs.
						// the original fragment (which might have attached data) instead of
5974.1Use spaces, not tabs.
						// using it; in addition, use the original fragment object for the last
5975.1Use spaces, not tabs.
						// item instead of first because it can end up being emptied incorrectly
5976.1Use spaces, not tabs.
						// in certain situations (Bug #8070).
5977.1Use spaces, not tabs.
						// Fragments from the fragment cache must always be cloned and never used
5978.1Use spaces, not tabs.
						// in place.
5979.1Use spaces, not tabs.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
5980.1Use spaces, not tabs.
							jQuery.clone( fragment, true, true ) :
5981.1Use spaces, not tabs.
							fragment
5982.1Use spaces, not tabs.
					);
5983.1Use spaces, not tabs.
				}
5984.1Use spaces, not tabs.
			}
5986.1Use spaces, not tabs.
			if ( scripts.length ) {
5987.1Use spaces, not tabs.
				jQuery.each( scripts, evalScript );
5988.1Use spaces, not tabs.
			}
5989.1Use spaces, not tabs.
		}
5991.1Use spaces, not tabs.
		return this;
5992.1Use spaces, not tabs.
	}
5996.1Use spaces, not tabs.
	return jQuery.nodeName(elem, "table") ?
5997.1Use spaces, not tabs.
		(elem.getElementsByTagName("tbody")[0] ||
5998.1Use spaces, not tabs.
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
5999.1Use spaces, not tabs.
		elem;
6004.1Use spaces, not tabs.
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
6005.1Use spaces, not tabs.
		return;
6006.1Use spaces, not tabs.
	}
6008.1Use spaces, not tabs.
	var type, i, l,
6009.1Use spaces, not tabs.
		oldData = jQuery._data( src ),
6010.1Use spaces, not tabs.
		curData = jQuery._data( dest, oldData ),
6011.1Use spaces, not tabs.
		events = oldData.events;
6013.1Use spaces, not tabs.
	if ( events ) {
6014.1Use spaces, not tabs.
		delete curData.handle;
6015.1Use spaces, not tabs.
		curData.events = {};
6017.1Use spaces, not tabs.
		for ( type in events ) {
6018.1Use spaces, not tabs.
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
6019.1Use spaces, not tabs.
				jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? "." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ type ][ i ].data );
6020.1Use spaces, not tabs.
			}
6021.1Use spaces, not tabs.
		}
6022.1Use spaces, not tabs.
	}
6024.1Use spaces, not tabs.
	// make the cloned public data object a copy from the original
6025.1Use spaces, not tabs.
	if ( curData.data ) {
6026.1Use spaces, not tabs.
		curData.data = jQuery.extend( {}, curData.data );
6027.1Use spaces, not tabs.
	}
6031.1Use spaces, not tabs.
	var nodeName;
6033.1Use spaces, not tabs.
	// We do not need to do anything for non-Elements
6034.1Use spaces, not tabs.
	if ( dest.nodeType !== 1 ) {
6035.1Use spaces, not tabs.
		return;
6036.1Use spaces, not tabs.
	}
6038.1Use spaces, not tabs.
	// clearAttributes removes the attributes, which we don't want,
6039.1Use spaces, not tabs.
	// but also removes the attachEvent events, which we *do* want
6040.1Use spaces, not tabs.
	if ( dest.clearAttributes ) {
6041.1Use spaces, not tabs.
		dest.clearAttributes();
6042.1Use spaces, not tabs.
	}
6044.1Use spaces, not tabs.
	// mergeAttributes, in contrast, only merges back on the
6045.1Use spaces, not tabs.
	// original attributes, not the events
6046.1Use spaces, not tabs.
	if ( dest.mergeAttributes ) {
6047.1Use spaces, not tabs.
		dest.mergeAttributes( src );
6048.1Use spaces, not tabs.
	}
6050.1Use spaces, not tabs.
	nodeName = dest.nodeName.toLowerCase();
6052.1Use spaces, not tabs.
	// IE6-8 fail to clone children inside object elements that use
6053.1Use spaces, not tabs.
	// the proprietary classid attribute value (rather than the type
6054.1Use spaces, not tabs.
	// attribute) to identify the type of content to display
6055.1Use spaces, not tabs.
	if ( nodeName === "object" ) {
6056.1Use spaces, not tabs.
		dest.outerHTML = src.outerHTML;
6058.1Use spaces, not tabs.
	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
6059.1Use spaces, not tabs.
		// IE6-8 fails to persist the checked state of a cloned checkbox
6060.1Use spaces, not tabs.
		// or radio button. Worse, IE6-7 fail to give the cloned element
6061.1Use spaces, not tabs.
		// a checked appearance if the defaultChecked value isn't also set
6062.1Use spaces, not tabs.
		if ( src.checked ) {
6063.1Use spaces, not tabs.
			dest.defaultChecked = dest.checked = src.checked;
6064.1Use spaces, not tabs.
		}
6066.1Use spaces, not tabs.
		// IE6-7 get confused and end up setting the value of a cloned
6067.1Use spaces, not tabs.
		// checkbox/radio button to an empty string instead of "on"
6068.1Use spaces, not tabs.
		if ( dest.value !== src.value ) {
6069.1Use spaces, not tabs.
			dest.value = src.value;
6070.1Use spaces, not tabs.
		}
6072.1Use spaces, not tabs.
	// IE6-8 fails to return the selected option to the default selected
6073.1Use spaces, not tabs.
	// state when cloning options
6074.1Use spaces, not tabs.
	} else if ( nodeName === "option" ) {
6075.1Use spaces, not tabs.
		dest.selected = src.defaultSelected;
6077.1Use spaces, not tabs.
	// IE6-8 fails to set the defaultValue to the correct value when
6078.1Use spaces, not tabs.
	// cloning other types of input fields
6079.1Use spaces, not tabs.
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
6080.1Use spaces, not tabs.
		dest.defaultValue = src.defaultValue;
6081.1Use spaces, not tabs.
	}
6083.1Use spaces, not tabs.
	// Event data gets referenced instead of copied if the expando
6084.1Use spaces, not tabs.
	// gets copied too
6085.1Use spaces, not tabs.
	dest.removeAttribute( jQuery.expando );
6089.1Use spaces, not tabs.
	var fragment, cacheable, cacheresults, doc,
6090.1Use spaces, not tabs.
	first = args[ 0 ];
6092.1Use spaces, not tabs.
	// nodes may contain either an explicit document object,
6093.1Use spaces, not tabs.
	// a jQuery collection or context object.
6094.1Use spaces, not tabs.
	// If nodes[0] contains a valid object to assign to doc
6095.1Use spaces, not tabs.
	if ( nodes && nodes[0] ) {
6096.1Use spaces, not tabs.
		doc = nodes[0].ownerDocument || nodes[0];
6097.1Use spaces, not tabs.
	}
6099.1Use spaces, not tabs.
	// Ensure that an attr object doesn't incorrectly stand in as a document object
6100.1Use spaces, not tabs.
	// Chrome and Firefox seem to allow this to occur and will throw exception
6101.1Use spaces, not tabs.
	// Fixes #8950
6102.1Use spaces, not tabs.
	if ( !doc.createDocumentFragment ) {
6103.1Use spaces, not tabs.
		doc = document;
6104.1Use spaces, not tabs.
	}
6106.1Use spaces, not tabs.
	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
6107.1Use spaces, not tabs.
	// Cloning options loses the selected state, so don't cache them
6108.1Use spaces, not tabs.
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
6109.1Use spaces, not tabs.
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
6110.1Use spaces, not tabs.
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
6111.1Use spaces, not tabs.
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
6112.1Use spaces, not tabs.
		first.charAt(0) === "<" && !rnocache.test( first ) &&
6113.1Use spaces, not tabs.
		(jQuery.support.checkClone || !rchecked.test( first )) &&
6114.1Use spaces, not tabs.
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {
6116.1Use spaces, not tabs.
		cacheable = true;
6118.1Use spaces, not tabs.
		cacheresults = jQuery.fragments[ first ];
6119.1Use spaces, not tabs.
		if ( cacheresults && cacheresults !== 1 ) {
6120.1Use spaces, not tabs.
			fragment = cacheresults;
6121.1Use spaces, not tabs.
		}
6122.1Use spaces, not tabs.
	}
6124.1Use spaces, not tabs.
	if ( !fragment ) {
6125.1Use spaces, not tabs.
		fragment = doc.createDocumentFragment();
6126.1Use spaces, not tabs.
		jQuery.clean( args, doc, fragment, scripts );
6127.1Use spaces, not tabs.
	}
6129.1Use spaces, not tabs.
	if ( cacheable ) {
6130.1Use spaces, not tabs.
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
6131.1Use spaces, not tabs.
	}
6133.1Use spaces, not tabs.
	return { fragment: fragment, cacheable: cacheable };
6139.1Use spaces, not tabs.
	appendTo: "append",
6140.1Use spaces, not tabs.
	prependTo: "prepend",
6141.1Use spaces, not tabs.
	insertBefore: "before",
6142.1Use spaces, not tabs.
	insertAfter: "after",
6143.1Use spaces, not tabs.
	replaceAll: "replaceWith"
6145.1Use spaces, not tabs.
	jQuery.fn[ name ] = function( selector ) {
6146.1Use spaces, not tabs.
		var ret = [],
6147.1Use spaces, not tabs.
			insert = jQuery( selector ),
6148.1Use spaces, not tabs.
			parent = this.length === 1 && this[0].parentNode;
6150.1Use spaces, not tabs.
		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
6151.1Use spaces, not tabs.
			insert[ original ]( this[0] );
6152.1Use spaces, not tabs.
			return this;
6154.1Use spaces, not tabs.
		} else {
6155.1Use spaces, not tabs.
			for ( var i = 0, l = insert.length; i < l; i++ ) {
6156.1Use spaces, not tabs.
				var elems = ( i > 0 ? this.clone(true) : this ).get();
6157.1Use spaces, not tabs.
				jQuery( insert[i] )[ original ]( elems );
6158.1Use spaces, not tabs.
				ret = ret.concat( elems );
6159.1Use spaces, not tabs.
			}
6161.1Use spaces, not tabs.
			return this.pushStack( ret, name, insert.selector );
6162.1Use spaces, not tabs.
		}
6163.1Use spaces, not tabs.
	};
6167.1Use spaces, not tabs.
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
6168.1Use spaces, not tabs.
		return elem.getElementsByTagName( "*" );
6170.1Use spaces, not tabs.
	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
6171.1Use spaces, not tabs.
		return elem.querySelectorAll( "*" );
6173.1Use spaces, not tabs.
	} else {
6174.1Use spaces, not tabs.
		return [];
6175.1Use spaces, not tabs.
	}
6180.1Use spaces, not tabs.
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
6181.1Use spaces, not tabs.
		elem.defaultChecked = elem.checked;
6182.1Use spaces, not tabs.
	}
6186.1Use spaces, not tabs.
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
6187.1Use spaces, not tabs.
	if ( nodeName === "input" ) {
6188.1Use spaces, not tabs.
		fixDefaultChecked( elem );
6189.1Use spaces, not tabs.
	// Skip scripts, get other children
6190.1Use spaces, not tabs.
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
6191.1Use spaces, not tabs.
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
6192.1Use spaces, not tabs.
	}
6197.1Use spaces, not tabs.
	var div = document.createElement( "div" );
6198.1Use spaces, not tabs.
	safeFragment.appendChild( div );
6200.1Use spaces, not tabs.
	div.innerHTML = elem.outerHTML;
6201.1Use spaces, not tabs.
	return div.firstChild;
6205.1Use spaces, not tabs.
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
6206.1Use spaces, not tabs.
		var srcElements,
6207.1Use spaces, not tabs.
			destElements,
6208.1Use spaces, not tabs.
			i,
6209.1Use spaces, not tabs.
			// IE<=8 does not properly clone detached, unknown element nodes
6210.1Use spaces, not tabs.
			clone = jQuery.support.html5Clone || !rnoshimcache.test( "<" + elem.nodeName ) ?
6211.1Use spaces, not tabs.
				elem.cloneNode( true ) :
6212.1Use spaces, not tabs.
				shimCloneNode( elem );
6214.1Use spaces, not tabs.
		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
6215.1Use spaces, not tabs.
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
6216.1Use spaces, not tabs.
			// IE copies events bound via attachEvent when using cloneNode.
6217.1Use spaces, not tabs.
			// Calling detachEvent on the clone will also remove the events
6218.1Use spaces, not tabs.
			// from the original. In order to get around this, we use some
6219.1Use spaces, not tabs.
			// proprietary methods to clear the events. Thanks to MooTools
6220.1Use spaces, not tabs.
			// guys for this hotness.
6222.1Use spaces, not tabs.
			cloneFixAttributes( elem, clone );
6224.1Use spaces, not tabs.
			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
6225.1Use spaces, not tabs.
			srcElements = getAll( elem );
6226.1Use spaces, not tabs.
			destElements = getAll( clone );
6228.1Use spaces, not tabs.
			// Weird iteration because IE will replace the length property
6229.1Use spaces, not tabs.
			// with an element if you are cloning the body and one of the
6230.1Use spaces, not tabs.
			// elements on the page has a name or id of "length"
6231.1Use spaces, not tabs.
			for ( i = 0; srcElements[i]; ++i ) {
6232.1Use spaces, not tabs.
				// Ensure that the destination node is not null; Fixes #9587
6233.1Use spaces, not tabs.
				if ( destElements[i] ) {
6234.1Use spaces, not tabs.
					cloneFixAttributes( srcElements[i], destElements[i] );
6235.1Use spaces, not tabs.
				}
6236.1Use spaces, not tabs.
			}
6237.1Use spaces, not tabs.
		}
6239.1Use spaces, not tabs.
		// Copy the events from the original to the clone
6240.1Use spaces, not tabs.
		if ( dataAndEvents ) {
6241.1Use spaces, not tabs.
			cloneCopyEvent( elem, clone );
6243.1Use spaces, not tabs.
			if ( deepDataAndEvents ) {
6244.1Use spaces, not tabs.
				srcElements = getAll( elem );
6245.1Use spaces, not tabs.
				destElements = getAll( clone );
6247.1Use spaces, not tabs.
				for ( i = 0; srcElements[i]; ++i ) {
6248.1Use spaces, not tabs.
					cloneCopyEvent( srcElements[i], destElements[i] );
6249.1Use spaces, not tabs.
				}
6250.1Use spaces, not tabs.
			}
6251.1Use spaces, not tabs.
		}
6253.1Use spaces, not tabs.
		srcElements = destElements = null;
6255.1Use spaces, not tabs.
		// Return the cloned set
6256.1Use spaces, not tabs.
		return clone;
6257.1Use spaces, not tabs.
	},
6259.1Use spaces, not tabs.
	clean: function( elems, context, fragment, scripts ) {
6260.1Use spaces, not tabs.
		var checkScriptType;
6262.1Use spaces, not tabs.
		context = context || document;
6264.1Use spaces, not tabs.
		// !context.createElement fails in IE with an error but returns typeof 'object'
6265.1Use spaces, not tabs.
		if ( typeof context.createElement === "undefined" ) {
6266.1Use spaces, not tabs.
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
6267.1Use spaces, not tabs.
		}
6269.1Use spaces, not tabs.
		var ret = [], j;
6271.1Use spaces, not tabs.
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
6272.1Use spaces, not tabs.
			if ( typeof elem === "number" ) {
6273.1Use spaces, not tabs.
				elem += "";
6274.1Use spaces, not tabs.
			}
6276.1Use spaces, not tabs.
			if ( !elem ) {
6277.1Use spaces, not tabs.
				continue;
6278.1Use spaces, not tabs.
			}
6280.1Use spaces, not tabs.
			// Convert html string into DOM nodes
6281.1Use spaces, not tabs.
			if ( typeof elem === "string" ) {
6282.1Use spaces, not tabs.
				if ( !rhtml.test( elem ) ) {
6283.1Use spaces, not tabs.
					elem = context.createTextNode( elem );
6284.1Use spaces, not tabs.
				} else {
6285.1Use spaces, not tabs.
					// Fix "XHTML"-style tags in all browsers
6286.1Use spaces, not tabs.
					elem = elem.replace(rxhtmlTag, "<$1></$2>");
6288.1Use spaces, not tabs.
					// Trim whitespace, otherwise indexOf won't work as expected
6289.1Use spaces, not tabs.
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
6290.1Use spaces, not tabs.
						wrap = wrapMap[ tag ] || wrapMap._default,
6291.1Use spaces, not tabs.
						depth = wrap[0],
6292.1Use spaces, not tabs.
						div = context.createElement("div");
6294.1Use spaces, not tabs.
					// Append wrapper element to unknown element safe doc fragment
6295.1Use spaces, not tabs.
					if ( context === document ) {
6296.1Use spaces, not tabs.
						// Use the fragment we've already created for this document
6297.1Use spaces, not tabs.
						safeFragment.appendChild( div );
6298.1Use spaces, not tabs.
					} else {
6299.1Use spaces, not tabs.
						// Use a fragment created with the owner document
6300.1Use spaces, not tabs.
						createSafeFragment( context ).appendChild( div );
6301.1Use spaces, not tabs.
					}
6303.1Use spaces, not tabs.
					// Go to html and back, then peel off extra wrappers
6304.1Use spaces, not tabs.
					div.innerHTML = wrap[1] + elem + wrap[2];
6306.1Use spaces, not tabs.
					// Move to the right depth
6307.1Use spaces, not tabs.
					while ( depth-- ) {
6308.1Use spaces, not tabs.
						div = div.lastChild;
6309.1Use spaces, not tabs.
					}
6311.1Use spaces, not tabs.
					// Remove IE's autoinserted <tbody> from table fragments
6312.1Use spaces, not tabs.
					if ( !jQuery.support.tbody ) {
6314.1Use spaces, not tabs.
						// String was a <table>, *may* have spurious <tbody>
6315.1Use spaces, not tabs.
						var hasBody = rtbody.test(elem),
6316.1Use spaces, not tabs.
							tbody = tag === "table" && !hasBody ?
6317.1Use spaces, not tabs.
								div.firstChild && div.firstChild.childNodes :
6319.1Use spaces, not tabs.
								// String was a bare <thead> or <tfoot>
6320.1Use spaces, not tabs.
								wrap[1] === "<table>" && !hasBody ?
6321.1Use spaces, not tabs.
									div.childNodes :
6322.1Use spaces, not tabs.
									[];
6324.1Use spaces, not tabs.
						for ( j = tbody.length - 1; j >= 0 ; --j ) {
6325.1Use spaces, not tabs.
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
6326.1Use spaces, not tabs.
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
6327.1Use spaces, not tabs.
							}
6328.1Use spaces, not tabs.
						}
6329.1Use spaces, not tabs.
					}
6331.1Use spaces, not tabs.
					// IE completely kills leading whitespace when innerHTML is used
6332.1Use spaces, not tabs.
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
6333.1Use spaces, not tabs.
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
6334.1Use spaces, not tabs.
					}
6336.1Use spaces, not tabs.
					elem = div.childNodes;
6337.1Use spaces, not tabs.
				}
6338.1Use spaces, not tabs.
			}
6340.1Use spaces, not tabs.
			// Resets defaultChecked for any radios and checkboxes
6341.1Use spaces, not tabs.
			// about to be appended to the DOM in IE 6/7 (#8060)
6342.1Use spaces, not tabs.
			var len;
6343.1Use spaces, not tabs.
			if ( !jQuery.support.appendChecked ) {
6344.1Use spaces, not tabs.
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
6345.1Use spaces, not tabs.
					for ( j = 0; j < len; j++ ) {
6346.1Use spaces, not tabs.
						findInputs( elem[j] );
6347.1Use spaces, not tabs.
					}
6348.1Use spaces, not tabs.
				} else {
6349.1Use spaces, not tabs.
					findInputs( elem );
6350.1Use spaces, not tabs.
				}
6351.1Use spaces, not tabs.
			}
6353.1Use spaces, not tabs.
			if ( elem.nodeType ) {
6354.1Use spaces, not tabs.
				ret.push( elem );
6355.1Use spaces, not tabs.
			} else {
6356.1Use spaces, not tabs.
				ret = jQuery.merge( ret, elem );
6357.1Use spaces, not tabs.
			}
6358.1Use spaces, not tabs.
		}
6360.1Use spaces, not tabs.
		if ( fragment ) {
6361.1Use spaces, not tabs.
			checkScriptType = function( elem ) {
6362.1Use spaces, not tabs.
				return !elem.type || rscriptType.test( elem.type );
6363.1Use spaces, not tabs.
			};
6364.1Use spaces, not tabs.
			for ( i = 0; ret[i]; i++ ) {
6365.1Use spaces, not tabs.
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
6366.1Use spaces, not tabs.
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );
6368.1Use spaces, not tabs.
				} else {
6369.1Use spaces, not tabs.
					if ( ret[i].nodeType === 1 ) {
6370.1Use spaces, not tabs.
						var jsTags = jQuery.grep( ret[i].getElementsByTagName( "script" ), checkScriptType );
6372.1Use spaces, not tabs.
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
6373.1Use spaces, not tabs.
					}
6374.1Use spaces, not tabs.
					fragment.appendChild( ret[i] );
6375.1Use spaces, not tabs.
				}
6376.1Use spaces, not tabs.
			}
6377.1Use spaces, not tabs.
		}
6379.1Use spaces, not tabs.
		return ret;
6380.1Use spaces, not tabs.
	},
6382.1Use spaces, not tabs.
	cleanData: function( elems ) {
6383.1Use spaces, not tabs.
		var data, id,
6384.1Use spaces, not tabs.
			cache = jQuery.cache,
6385.1Use spaces, not tabs.
			special = jQuery.event.special,
6386.1Use spaces, not tabs.
			deleteExpando = jQuery.support.deleteExpando;
6388.1Use spaces, not tabs.
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
6389.1Use spaces, not tabs.
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
6390.1Use spaces, not tabs.
				continue;
6391.1Use spaces, not tabs.
			}
6393.1Use spaces, not tabs.
			id = elem[ jQuery.expando ];
6395.1Use spaces, not tabs.
			if ( id ) {
6396.1Use spaces, not tabs.
				data = cache[ id ];
6398.1Use spaces, not tabs.
				if ( data && data.events ) {
6399.1Use spaces, not tabs.
					for ( var type in data.events ) {
6400.1Use spaces, not tabs.
						if ( special[ type ] ) {
6401.1Use spaces, not tabs.
							jQuery.event.remove( elem, type );
6403.1Use spaces, not tabs.
						// This is a shortcut to avoid jQuery.event.remove's overhead
6404.1Use spaces, not tabs.
						} else {
6405.1Use spaces, not tabs.
							jQuery.removeEvent( elem, type, data.handle );
6406.1Use spaces, not tabs.
						}
6407.1Use spaces, not tabs.
					}
6409.1Use spaces, not tabs.
					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
6410.1Use spaces, not tabs.
					if ( data.handle ) {
6411.1Use spaces, not tabs.
						data.handle.elem = null;
6412.1Use spaces, not tabs.
					}
6413.1Use spaces, not tabs.
				}
6415.1Use spaces, not tabs.
				if ( deleteExpando ) {
6416.1Use spaces, not tabs.
					delete elem[ jQuery.expando ];
6418.1Use spaces, not tabs.
				} else if ( elem.removeAttribute ) {
6419.1Use spaces, not tabs.
					elem.removeAttribute( jQuery.expando );
6420.1Use spaces, not tabs.
				}
6422.1Use spaces, not tabs.
				delete cache[ id ];
6423.1Use spaces, not tabs.
			}
6424.1Use spaces, not tabs.
		}
6425.1Use spaces, not tabs.
	}
6429.1Use spaces, not tabs.
	if ( elem.src ) {
6430.1Use spaces, not tabs.
		jQuery.ajax({
6431.1Use spaces, not tabs.
			url: elem.src,
6432.1Use spaces, not tabs.
			async: false,
6433.1Use spaces, not tabs.
			dataType: "script"
6434.1Use spaces, not tabs.
		});
6435.1Use spaces, not tabs.
	} else {
6436.1Use spaces, not tabs.
		jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
6437.1Use spaces, not tabs.
	}
6439.1Use spaces, not tabs.
	if ( elem.parentNode ) {
6440.1Use spaces, not tabs.
		elem.parentNode.removeChild( elem );
6441.1Use spaces, not tabs.
	}
6448.1Use spaces, not tabs.
	ropacity = /opacity=([^)]*)/,
6449.1Use spaces, not tabs.
	// fixed for IE9, see #8346
6450.1Use spaces, not tabs.
	rupper = /([A-Z]|^ms)/g,
6451.1Use spaces, not tabs.
	rnumpx = /^-?\d+(?:px)?$/i,
6452.1Use spaces, not tabs.
	rnum = /^-?\d/,
6453.1Use spaces, not tabs.
	rrelNum = /^([\-+])=([\-+.\de]+)/,
6455.1Use spaces, not tabs.
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
6456.1Use spaces, not tabs.
	cssWidth = [ "Left", "Right" ],
6457.1Use spaces, not tabs.
	cssHeight = [ "Top", "Bottom" ],
6458.1Use spaces, not tabs.
	curCSS,
6460.1Use spaces, not tabs.
	getComputedStyle,
6461.1Use spaces, not tabs.
	currentStyle;
6464.1Use spaces, not tabs.
	// Setting 'undefined' is a no-op
6465.1Use spaces, not tabs.
	if ( arguments.length === 2 && value === undefined ) {
6466.1Use spaces, not tabs.
		return this;
6467.1Use spaces, not tabs.
	}
6469.1Use spaces, not tabs.
	return jQuery.access( this, name, value, true, function( elem, name, value ) {
6470.1Use spaces, not tabs.
		return value !== undefined ?
6471.1Use spaces, not tabs.
			jQuery.style( elem, name, value ) :
6472.1Use spaces, not tabs.
			jQuery.css( elem, name );
6473.1Use spaces, not tabs.
	});
6477.1Use spaces, not tabs.
	// Add in style property hooks for overriding the default
6478.1Use spaces, not tabs.
	// behavior of getting and setting a style property
6479.1Use spaces, not tabs.
	cssHooks: {
6480.1Use spaces, not tabs.
		opacity: {
6481.1Use spaces, not tabs.
			get: function( elem, computed ) {
6482.1Use spaces, not tabs.
				if ( computed ) {
6483.1Use spaces, not tabs.
					// We should always get a number back from opacity
6484.1Use spaces, not tabs.
					var ret = curCSS( elem, "opacity", "opacity" );
6485.1Use spaces, not tabs.
					return ret === "" ? "1" : ret;
6487.1Use spaces, not tabs.
				} else {
6488.1Use spaces, not tabs.
					return elem.style.opacity;
6489.1Use spaces, not tabs.
				}
6490.1Use spaces, not tabs.
			}
6491.1Use spaces, not tabs.
		}
6492.1Use spaces, not tabs.
	},
6494.1Use spaces, not tabs.
	// Exclude the following css properties to add px
6495.1Use spaces, not tabs.
	cssNumber: {
6496.1Use spaces, not tabs.
		"fillOpacity": true,
6497.1Use spaces, not tabs.
		"fontWeight": true,
6498.1Use spaces, not tabs.
		"lineHeight": true,
6499.1Use spaces, not tabs.
		"opacity": true,
6500.1Use spaces, not tabs.
		"orphans": true,
6501.1Use spaces, not tabs.
		"widows": true,
6502.1Use spaces, not tabs.
		"zIndex": true,
6503.1Use spaces, not tabs.
		"zoom": true
6504.1Use spaces, not tabs.
	},
6506.1Use spaces, not tabs.
	// Add in properties whose names you wish to fix before
6507.1Use spaces, not tabs.
	// setting or getting the value
6508.1Use spaces, not tabs.
	cssProps: {
6509.1Use spaces, not tabs.
		// normalize float css property
6510.1Use spaces, not tabs.
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
6511.1Use spaces, not tabs.
	},
6513.1Use spaces, not tabs.
	// Get and set the style property on a DOM Node
6514.1Use spaces, not tabs.
	style: function( elem, name, value, extra ) {
6515.1Use spaces, not tabs.
		// Don't set styles on text and comment nodes
6516.1Use spaces, not tabs.
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
6517.1Use spaces, not tabs.
			return;
6518.1Use spaces, not tabs.
		}
6520.1Use spaces, not tabs.
		// Make sure that we're working with the right name
6521.1Use spaces, not tabs.
		var ret, type, origName = jQuery.camelCase( name ),
6522.1Use spaces, not tabs.
			style = elem.style, hooks = jQuery.cssHooks[ origName ];
6524.1Use spaces, not tabs.
		name = jQuery.cssProps[ origName ] || origName;
6526.1Use spaces, not tabs.
		// Check if we're setting a value
6527.1Use spaces, not tabs.
		if ( value !== undefined ) {
6528.1Use spaces, not tabs.
			type = typeof value;
6530.1Use spaces, not tabs.
			// convert relative number strings (+= or -=) to relative numbers. #7345
6531.1Use spaces, not tabs.
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
6532.1Use spaces, not tabs.
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
6533.1Use spaces, not tabs.
				// Fixes bug #9237
6534.1Use spaces, not tabs.
				type = "number";
6535.1Use spaces, not tabs.
			}
6537.1Use spaces, not tabs.
			// Make sure that NaN and null values aren't set. See: #7116
6538.1Use spaces, not tabs.
			if ( value == null || type === "number" && isNaN( value ) ) {
6539.1Use spaces, not tabs.
				return;
6540.1Use spaces, not tabs.
			}
6542.1Use spaces, not tabs.
			// If a number was passed in, add 'px' to the (except for certain CSS properties)
6543.1Use spaces, not tabs.
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
6544.1Use spaces, not tabs.
				value += "px";
6545.1Use spaces, not tabs.
			}
6547.1Use spaces, not tabs.
			// If a hook was provided, use that value, otherwise just set the specified value
6548.1Use spaces, not tabs.
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
6549.1Use spaces, not tabs.
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
6550.1Use spaces, not tabs.
				// Fixes bug #5509
6551.1Use spaces, not tabs.
				try {
6552.1Use spaces, not tabs.
					style[ name ] = value;
6553.1Use spaces, not tabs.
				} catch(e) {}
6554.1Use spaces, not tabs.
			}
6556.1Use spaces, not tabs.
		} else {
6557.1Use spaces, not tabs.
			// If a hook was provided get the non-computed value from there
6558.1Use spaces, not tabs.
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
6559.1Use spaces, not tabs.
				return ret;
6560.1Use spaces, not tabs.
			}
6562.1Use spaces, not tabs.
			// Otherwise just get the value from the style object
6563.1Use spaces, not tabs.
			return style[ name ];
6564.1Use spaces, not tabs.
		}
6565.1Use spaces, not tabs.
	},
6567.1Use spaces, not tabs.
	css: function( elem, name, extra ) {
6568.1Use spaces, not tabs.
		var ret, hooks;
6570.1Use spaces, not tabs.
		// Make sure that we're working with the right name
6571.1Use spaces, not tabs.
		name = jQuery.camelCase( name );
6572.1Use spaces, not tabs.
		hooks = jQuery.cssHooks[ name ];
6573.1Use spaces, not tabs.
		name = jQuery.cssProps[ name ] || name;
6575.1Use spaces, not tabs.
		// cssFloat needs a special treatment
6576.1Use spaces, not tabs.
		if ( name === "cssFloat" ) {
6577.1Use spaces, not tabs.
			name = "float";
6578.1Use spaces, not tabs.
		}
6580.1Use spaces, not tabs.
		// If a hook was provided get the computed value from there
6581.1Use spaces, not tabs.
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
6582.1Use spaces, not tabs.
			return ret;
6584.1Use spaces, not tabs.
		// Otherwise, if a way to get the computed value exists, use that
6585.1Use spaces, not tabs.
		} else if ( curCSS ) {
6586.1Use spaces, not tabs.
			return curCSS( elem, name );
6587.1Use spaces, not tabs.
		}
6588.1Use spaces, not tabs.
	},
6590.1Use spaces, not tabs.
	// A method for quickly swapping in/out CSS properties to get correct calculations
6591.1Use spaces, not tabs.
	swap: function( elem, options, callback ) {
6592.1Use spaces, not tabs.
		var old = {};
6594.1Use spaces, not tabs.
		// Remember the old values, and insert the new ones
6595.1Use spaces, not tabs.
		for ( var name in options ) {
6596.1Use spaces, not tabs.
			old[ name ] = elem.style[ name ];
6597.1Use spaces, not tabs.
			elem.style[ name ] = options[ name ];
6598.1Use spaces, not tabs.
		}
6600.1Use spaces, not tabs.
		callback.call( elem );
6602.1Use spaces, not tabs.
		// Revert the old values
6603.1Use spaces, not tabs.
		for ( name in options ) {
6604.1Use spaces, not tabs.
			elem.style[ name ] = old[ name ];
6605.1Use spaces, not tabs.
		}
6606.1Use spaces, not tabs.
	}
6613.1Use spaces, not tabs.
	jQuery.cssHooks[ name ] = {
6614.1Use spaces, not tabs.
		get: function( elem, computed, extra ) {
6615.1Use spaces, not tabs.
			var val;
6617.1Use spaces, not tabs.
			if ( computed ) {
6618.1Use spaces, not tabs.
				if ( elem.offsetWidth !== 0 ) {
6619.1Use spaces, not tabs.
					return getWH( elem, name, extra );
6620.1Use spaces, not tabs.
				} else {
6621.1Use spaces, not tabs.
					jQuery.swap( elem, cssShow, function() {
6622.1Use spaces, not tabs.
						val = getWH( elem, name, extra );
6623.1Use spaces, not tabs.
					});
6624.1Use spaces, not tabs.
				}
6626.1Use spaces, not tabs.
				return val;
6627.1Use spaces, not tabs.
			}
6628.1Use spaces, not tabs.
		},
6630.1Use spaces, not tabs.
		set: function( elem, value ) {
6631.1Use spaces, not tabs.
			if ( rnumpx.test( value ) ) {
6632.1Use spaces, not tabs.
				// ignore negative width and height values #1599
6633.1Use spaces, not tabs.
				value = parseFloat( value );
6635.1Use spaces, not tabs.
				if ( value >= 0 ) {
6636.1Use spaces, not tabs.
					return value + "px";
6637.1Use spaces, not tabs.
				}
6639.1Use spaces, not tabs.
			} else {
6640.1Use spaces, not tabs.
				return value;
6641.1Use spaces, not tabs.
			}
6642.1Use spaces, not tabs.
		}
6643.1Use spaces, not tabs.
	};
6647.1Use spaces, not tabs.
	jQuery.cssHooks.opacity = {
6648.1Use spaces, not tabs.
		get: function( elem, computed ) {
6649.1Use spaces, not tabs.
			// IE uses filters for opacity
6650.1Use spaces, not tabs.
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
6651.1Use spaces, not tabs.
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
6652.1Use spaces, not tabs.
				computed ? "1" : "";
6653.1Use spaces, not tabs.
		},
6655.1Use spaces, not tabs.
		set: function( elem, value ) {
6656.1Use spaces, not tabs.
			var style = elem.style,
6657.1Use spaces, not tabs.
				currentStyle = elem.currentStyle,
6658.1Use spaces, not tabs.
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
6659.1Use spaces, not tabs.
				filter = currentStyle && currentStyle.filter || style.filter || "";
6661.1Use spaces, not tabs.
			// IE has trouble with opacity if it does not have layout
6662.1Use spaces, not tabs.
			// Force it by setting the zoom level
6663.1Use spaces, not tabs.
			style.zoom = 1;
6665.1Use spaces, not tabs.
			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
6666.1Use spaces, not tabs.
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {
6668.1Use spaces, not tabs.
				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
6669.1Use spaces, not tabs.
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
6670.1Use spaces, not tabs.
				// style.removeAttribute is IE Only, but so apparently is this code path...
6671.1Use spaces, not tabs.
				style.removeAttribute( "filter" );
6673.1Use spaces, not tabs.
				// if there there is no filter style applied in a css rule, we are done
6674.1Use spaces, not tabs.
				if ( currentStyle && !currentStyle.filter ) {
6675.1Use spaces, not tabs.
					return;
6676.1Use spaces, not tabs.
				}
6677.1Use spaces, not tabs.
			}
6679.1Use spaces, not tabs.
			// otherwise, set new filter values
6680.1Use spaces, not tabs.
			style.filter = ralpha.test( filter ) ?
6681.1Use spaces, not tabs.
				filter.replace( ralpha, opacity ) :
6682.1Use spaces, not tabs.
				filter + " " + opacity;
6683.1Use spaces, not tabs.
		}
6684.1Use spaces, not tabs.
	};
6688.1Use spaces, not tabs.
	// This hook cannot be added until DOM ready because the support test
6689.1Use spaces, not tabs.
	// for it is not run until after DOM ready
6690.1Use spaces, not tabs.
	if ( !jQuery.support.reliableMarginRight ) {
6691.1Use spaces, not tabs.
		jQuery.cssHooks.marginRight = {
6692.1Use spaces, not tabs.
			get: function( elem, computed ) {
6693.1Use spaces, not tabs.
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
6694.1Use spaces, not tabs.
				// Work around by temporarily setting element display to inline-block
6695.1Use spaces, not tabs.
				var ret;
6696.1Use spaces, not tabs.
				jQuery.swap( elem, { "display": "inline-block" }, function() {
6697.1Use spaces, not tabs.
					if ( computed ) {
6698.1Use spaces, not tabs.
						ret = curCSS( elem, "margin-right", "marginRight" );
6699.1Use spaces, not tabs.
					} else {
6700.1Use spaces, not tabs.
						ret = elem.style.marginRight;
6701.1Use spaces, not tabs.
					}
6702.1Use spaces, not tabs.
				});
6703.1Use spaces, not tabs.
				return ret;
6704.1Use spaces, not tabs.
			}
6705.1Use spaces, not tabs.
		};
6706.1Use spaces, not tabs.
	}
6710.1Use spaces, not tabs.
	getComputedStyle = function( elem, name ) {
6711.1Use spaces, not tabs.
		var ret, defaultView, computedStyle;
6713.1Use spaces, not tabs.
		name = name.replace( rupper, "-$1" ).toLowerCase();
6715.1Use spaces, not tabs.
		if ( (defaultView = elem.ownerDocument.defaultView) &&
6716.1Use spaces, not tabs.
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
6717.1Use spaces, not tabs.
			ret = computedStyle.getPropertyValue( name );
6718.1Use spaces, not tabs.
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
6719.1Use spaces, not tabs.
				ret = jQuery.style( elem, name );
6720.1Use spaces, not tabs.
			}
6721.1Use spaces, not tabs.
		}
6723.1Use spaces, not tabs.
		return ret;
6724.1Use spaces, not tabs.
	};
6728.1Use spaces, not tabs.
	currentStyle = function( elem, name ) {
6729.1Use spaces, not tabs.
		var left, rsLeft, uncomputed,
6730.1Use spaces, not tabs.
			ret = elem.currentStyle && elem.currentStyle[ name ],
6731.1Use spaces, not tabs.
			style = elem.style;
6733.1Use spaces, not tabs.
		// Avoid setting ret to empty string here
6734.1Use spaces, not tabs.
		// so we don't default to auto
6735.1Use spaces, not tabs.
		if ( ret === null && style && (uncomputed = style[ name ]) ) {
6736.1Use spaces, not tabs.
			ret = uncomputed;
6737.1Use spaces, not tabs.
		}
6739.1Use spaces, not tabs.
		// From the awesome hack by Dean Edwards
6740.1Use spaces, not tabs.
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
6742.1Use spaces, not tabs.
		// If we're not dealing with a regular pixel number
6743.1Use spaces, not tabs.
		// but a number that has a weird ending, we need to convert it to pixels
6744.1Use spaces, not tabs.
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {
6746.1Use spaces, not tabs.
			// Remember the original values
6747.1Use spaces, not tabs.
			left = style.left;
6748.1Use spaces, not tabs.
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
6750.1Use spaces, not tabs.
			// Put in the new values to get a computed value out
6751.1Use spaces, not tabs.
			if ( rsLeft ) {
6752.1Use spaces, not tabs.
				elem.runtimeStyle.left = elem.currentStyle.left;
6753.1Use spaces, not tabs.
			}
6754.1Use spaces, not tabs.
			style.left = name === "fontSize" ? "1em" : ( ret || 0 );
6755.1Use spaces, not tabs.
			ret = style.pixelLeft + "px";
6757.1Use spaces, not tabs.
			// Revert the changed values
6758.1Use spaces, not tabs.
			style.left = left;
6759.1Use spaces, not tabs.
			if ( rsLeft ) {
6760.1Use spaces, not tabs.
				elem.runtimeStyle.left = rsLeft;
6761.1Use spaces, not tabs.
			}
6762.1Use spaces, not tabs.
		}
6764.1Use spaces, not tabs.
		return ret === "" ? "auto" : ret;
6765.1Use spaces, not tabs.
	};
6772.1Use spaces, not tabs.
	// Start with offset property
6773.1Use spaces, not tabs.
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
6774.1Use spaces, not tabs.
		which = name === "width" ? cssWidth : cssHeight,
6775.1Use spaces, not tabs.
		i = 0,
6776.1Use spaces, not tabs.
		len = which.length;
6778.1Use spaces, not tabs.
	if ( val > 0 ) {
6779.1Use spaces, not tabs.
		if ( extra !== "border" ) {
6780.1Use spaces, not tabs.
			for ( ; i < len; i++ ) {
6781.1Use spaces, not tabs.
				if ( !extra ) {
6782.1Use spaces, not tabs.
					val -= parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
6783.1Use spaces, not tabs.
				}
6784.1Use spaces, not tabs.
				if ( extra === "margin" ) {
6785.1Use spaces, not tabs.
					val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
6786.1Use spaces, not tabs.
				} else {
6787.1Use spaces, not tabs.
					val -= parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
6788.1Use spaces, not tabs.
				}
6789.1Use spaces, not tabs.
			}
6790.1Use spaces, not tabs.
		}
6792.1Use spaces, not tabs.
		return val + "px";
6793.1Use spaces, not tabs.
	}
6795.1Use spaces, not tabs.
	// Fall back to computed then uncomputed css if necessary
6796.1Use spaces, not tabs.
	val = curCSS( elem, name, name );
6797.1Use spaces, not tabs.
	if ( val < 0 || val == null ) {
6798.1Use spaces, not tabs.
		val = elem.style[ name ] || 0;
6799.1Use spaces, not tabs.
	}
6800.1Use spaces, not tabs.
	// Normalize "", auto, and prepare for extra
6801.1Use spaces, not tabs.
	val = parseFloat( val ) || 0;
6803.1Use spaces, not tabs.
	// Add padding, border, margin
6804.1Use spaces, not tabs.
	if ( extra ) {
6805.1Use spaces, not tabs.
		for ( ; i < len; i++ ) {
6806.1Use spaces, not tabs.
			val += parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
6807.1Use spaces, not tabs.
			if ( extra !== "padding" ) {
6808.1Use spaces, not tabs.
				val += parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
6809.1Use spaces, not tabs.
			}
6810.1Use spaces, not tabs.
			if ( extra === "margin" ) {
6811.1Use spaces, not tabs.
				val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
6812.1Use spaces, not tabs.
			}
6813.1Use spaces, not tabs.
		}
6814.1Use spaces, not tabs.
	}
6816.1Use spaces, not tabs.
	return val + "px";
6820.1Use spaces, not tabs.
	jQuery.expr.filters.hidden = function( elem ) {
6821.1Use spaces, not tabs.
		var width = elem.offsetWidth,
6822.1Use spaces, not tabs.
			height = elem.offsetHeight;
6824.1Use spaces, not tabs.
		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
6825.1Use spaces, not tabs.
	};
6827.1Use spaces, not tabs.
	jQuery.expr.filters.visible = function( elem ) {
6828.1Use spaces, not tabs.
		return !jQuery.expr.filters.hidden( elem );
6829.1Use spaces, not tabs.
	};
6836.1Use spaces, not tabs.
	rbracket = /\[\]$/,
6837.1Use spaces, not tabs.
	rCRLF = /\r?\n/g,
6838.1Use spaces, not tabs.
	rhash = /#.*$/,
6839.1Use spaces, not tabs.
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
6839.22Expected '\' before ' '.
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
6840.1Use spaces, not tabs.
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
6841.1Use spaces, not tabs.
	// #7653, #8125, #8152: local protocol detection
6842.1Use spaces, not tabs.
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
6842.38Unexpected '-' after '\'.
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
6842.50Unexpected '-' after '\'.
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
6843.1Use spaces, not tabs.
	rnoContent = /^(?:GET|HEAD)$/,
6844.1Use spaces, not tabs.
	rprotocol = /^\/\//,
6845.1Use spaces, not tabs.
	rquery = /\?/,
6846.1Use spaces, not tabs.
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
6847.1Use spaces, not tabs.
	rselectTextarea = /^(?:select|textarea)/i,
6848.1Use spaces, not tabs.
	rspacesAjax = /\s+/,
6849.1Use spaces, not tabs.
	rts = /([?&])_=[^&]*/,
6850.1Use spaces, not tabs.
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,
6852.1Use spaces, not tabs.
	// Keep a copy of the old load method
6853.1Use spaces, not tabs.
	_load = jQuery.fn.load,
6855.1Use spaces, not tabs.
	/* Prefilters
6856.1Use spaces, not tabs.
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
6857.1Use spaces, not tabs.
	 * 2) These are called:
6858.1Use spaces, not tabs.
	 *    - BEFORE asking for a transport
6859.1Use spaces, not tabs.
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
6860.1Use spaces, not tabs.
	 * 3) key is the dataType
6861.1Use spaces, not tabs.
	 * 4) the catchall symbol "*" can be used
6862.1Use spaces, not tabs.
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
6863.1Use spaces, not tabs.
	 */
6864.1Use spaces, not tabs.
	prefilters = {},
6866.1Use spaces, not tabs.
	/* Transports bindings
6867.1Use spaces, not tabs.
	 * 1) key is the dataType
6868.1Use spaces, not tabs.
	 * 2) the catchall symbol "*" can be used
6869.1Use spaces, not tabs.
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
6870.1Use spaces, not tabs.
	 */
6871.1Use spaces, not tabs.
	transports = {},
6873.1Use spaces, not tabs.
	// Document location
6874.1Use spaces, not tabs.
	ajaxLocation,
6876.1Use spaces, not tabs.
	// Document location segments
6877.1Use spaces, not tabs.
	ajaxLocParts,
6879.1Use spaces, not tabs.
	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
6880.1Use spaces, not tabs.
	allTypes = ["*/"] + ["*"];
6885.1Use spaces, not tabs.
	ajaxLocation = location.href;
6887.1Use spaces, not tabs.
	// Use the href attribute of an A element
6888.1Use spaces, not tabs.
	// since IE will modify it given document.location
6889.1Use spaces, not tabs.
	ajaxLocation = document.createElement( "a" );
6890.1Use spaces, not tabs.
	ajaxLocation.href = "";
6891.1Use spaces, not tabs.
	ajaxLocation = ajaxLocation.href;
6900.1Use spaces, not tabs.
	// dataTypeExpression is optional and defaults to "*"
6901.1Use spaces, not tabs.
	return function( dataTypeExpression, func ) {
6903.1Use spaces, not tabs.
		if ( typeof dataTypeExpression !== "string" ) {
6904.1Use spaces, not tabs.
			func = dataTypeExpression;
6905.1Use spaces, not tabs.
			dataTypeExpression = "*";
6906.1Use spaces, not tabs.
		}
6908.1Use spaces, not tabs.
		if ( jQuery.isFunction( func ) ) {
6909.1Use spaces, not tabs.
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
6910.1Use spaces, not tabs.
				i = 0,
6911.1Use spaces, not tabs.
				length = dataTypes.length,
6912.1Use spaces, not tabs.
				dataType,
6913.1Use spaces, not tabs.
				list,
6914.1Use spaces, not tabs.
				placeBefore;
6916.1Use spaces, not tabs.
			// For each dataType in the dataTypeExpression
6917.1Use spaces, not tabs.
			for ( ; i < length; i++ ) {
6918.1Use spaces, not tabs.
				dataType = dataTypes[ i ];
6919.1Use spaces, not tabs.
				// We control if we're asked to add before
6920.1Use spaces, not tabs.
				// any existing element
6921.1Use spaces, not tabs.
				placeBefore = /^\+/.test( dataType );
6922.1Use spaces, not tabs.
				if ( placeBefore ) {
6923.1Use spaces, not tabs.
					dataType = dataType.substr( 1 ) || "*";
6924.1Use spaces, not tabs.
				}
6925.1Use spaces, not tabs.
				list = structure[ dataType ] = structure[ dataType ] || [];
6926.1Use spaces, not tabs.
				// then we add to the structure accordingly
6927.1Use spaces, not tabs.
				list[ placeBefore ? "unshift" : "push" ]( func );
6928.1Use spaces, not tabs.
			}
6929.1Use spaces, not tabs.
		}
6930.1Use spaces, not tabs.
	};
6935.1Use spaces, not tabs.
		dataType /* internal */, inspected /* internal */ ) {
6937.1Use spaces, not tabs.
	dataType = dataType || options.dataTypes[ 0 ];
6938.1Use spaces, not tabs.
	inspected = inspected || {};
6940.1Use spaces, not tabs.
	inspected[ dataType ] = true;
6942.1Use spaces, not tabs.
	var list = structure[ dataType ],
6943.1Use spaces, not tabs.
		i = 0,
6944.1Use spaces, not tabs.
		length = list ? list.length : 0,
6945.1Use spaces, not tabs.
		executeOnly = ( structure === prefilters ),
6946.1Use spaces, not tabs.
		selection;
6948.1Use spaces, not tabs.
	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
6949.1Use spaces, not tabs.
		selection = list[ i ]( options, originalOptions, jqXHR );
6950.1Use spaces, not tabs.
		// If we got redirected to another dataType
6951.1Use spaces, not tabs.
		// we try there if executing only and not done already
6952.1Use spaces, not tabs.
		if ( typeof selection === "string" ) {
6953.1Use spaces, not tabs.
			if ( !executeOnly || inspected[ selection ] ) {
6954.1Use spaces, not tabs.
				selection = undefined;
6955.1Use spaces, not tabs.
			} else {
6956.1Use spaces, not tabs.
				options.dataTypes.unshift( selection );
6957.1Use spaces, not tabs.
				selection = inspectPrefiltersOrTransports(
6958.1Use spaces, not tabs.
						structure, options, originalOptions, jqXHR, selection, inspected );
6959.1Use spaces, not tabs.
			}
6960.1Use spaces, not tabs.
		}
6961.1Use spaces, not tabs.
	}
6962.1Use spaces, not tabs.
	// If we're only executing or nothing was selected
6963.1Use spaces, not tabs.
	// we try the catchall dataType if not done already
6964.1Use spaces, not tabs.
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
6965.1Use spaces, not tabs.
		selection = inspectPrefiltersOrTransports(
6966.1Use spaces, not tabs.
				structure, options, originalOptions, jqXHR, "*", inspected );
6967.1Use spaces, not tabs.
	}
6968.1Use spaces, not tabs.
	// unnecessary when only executing (prefilters)
6969.1Use spaces, not tabs.
	// but it'll be ignored by the caller in that case
6970.1Use spaces, not tabs.
	return selection;
6977.1Use spaces, not tabs.
	var key, deep,
6978.1Use spaces, not tabs.
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
6979.1Use spaces, not tabs.
	for ( key in src ) {
6980.1Use spaces, not tabs.
		if ( src[ key ] !== undefined ) {
6981.1Use spaces, not tabs.
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
6982.1Use spaces, not tabs.
		}
6983.1Use spaces, not tabs.
	}
6984.1Use spaces, not tabs.
	if ( deep ) {
6985.1Use spaces, not tabs.
		jQuery.extend( true, target, deep );
6986.1Use spaces, not tabs.
	}
6990.1Use spaces, not tabs.
	load: function( url, params, callback ) {
6991.1Use spaces, not tabs.
		if ( typeof url !== "string" && _load ) {
6992.1Use spaces, not tabs.
			return _load.apply( this, arguments );
6994.1Use spaces, not tabs.
		// Don't do a request if no elements are being requested
6995.1Use spaces, not tabs.
		} else if ( !this.length ) {
6996.1Use spaces, not tabs.
			return this;
6997.1Use spaces, not tabs.
		}
6999.1Use spaces, not tabs.
		var off = url.indexOf( " " );
7000.1Use spaces, not tabs.
		if ( off >= 0 ) {
7001.1Use spaces, not tabs.
			var selector = url.slice( off, url.length );
7002.1Use spaces, not tabs.
			url = url.slice( 0, off );
7003.1Use spaces, not tabs.
		}
7005.1Use spaces, not tabs.
		// Default to a GET request
7006.1Use spaces, not tabs.
		var type = "GET";
7008.1Use spaces, not tabs.
		// If the second parameter was provided
7009.1Use spaces, not tabs.
		if ( params ) {
7010.1Use spaces, not tabs.
			// If it's a function
7011.1Use spaces, not tabs.
			if ( jQuery.isFunction( params ) ) {
7012.1Use spaces, not tabs.
				// We assume that it's the callback
7013.1Use spaces, not tabs.
				callback = params;
7014.1Use spaces, not tabs.
				params = undefined;
7016.1Use spaces, not tabs.
			// Otherwise, build a param string
7017.1Use spaces, not tabs.
			} else if ( typeof params === "object" ) {
7018.1Use spaces, not tabs.
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
7019.1Use spaces, not tabs.
				type = "POST";
7020.1Use spaces, not tabs.
			}
7021.1Use spaces, not tabs.
		}
7023.1Use spaces, not tabs.
		var self = this;
7025.1Use spaces, not tabs.
		// Request the remote document
7026.1Use spaces, not tabs.
		jQuery.ajax({
7027.1Use spaces, not tabs.
			url: url,
7028.1Use spaces, not tabs.
			type: type,
7029.1Use spaces, not tabs.
			dataType: "html",
7030.1Use spaces, not tabs.
			data: params,
7031.1Use spaces, not tabs.
			// Complete callback (responseText is used internally)
7032.1Use spaces, not tabs.
			complete: function( jqXHR, status, responseText ) {
7033.1Use spaces, not tabs.
				// Store the response as specified by the jqXHR object
7034.1Use spaces, not tabs.
				responseText = jqXHR.responseText;
7035.1Use spaces, not tabs.
				// If successful, inject the HTML into all the matched elements
7036.1Use spaces, not tabs.
				if ( jqXHR.isResolved() ) {
7037.1Use spaces, not tabs.
					// #4825: Get the actual response in case
7038.1Use spaces, not tabs.
					// a dataFilter is present in ajaxSettings
7039.1Use spaces, not tabs.
					jqXHR.done(function( r ) {
7040.1Use spaces, not tabs.
						responseText = r;
7041.1Use spaces, not tabs.
					});
7042.1Use spaces, not tabs.
					// See if a selector was specified
7043.1Use spaces, not tabs.
					self.html( selector ?
7044.1Use spaces, not tabs.
						// Create a dummy div to hold the results
7045.1Use spaces, not tabs.
						jQuery("<div>")
7046.1Use spaces, not tabs.
							// inject the contents of the document in, removing the scripts
7047.1Use spaces, not tabs.
							// to avoid any 'Permission Denied' errors in IE
7048.1Use spaces, not tabs.
							.append(responseText.replace(rscript, ""))
7050.1Use spaces, not tabs.
							// Locate the specified elements
7051.1Use spaces, not tabs.
							.find(selector) :
7053.1Use spaces, not tabs.
						// If not, just inject the full result
7054.1Use spaces, not tabs.
						responseText );
7055.1Use spaces, not tabs.
				}
7057.1Use spaces, not tabs.
				if ( callback ) {
7058.1Use spaces, not tabs.
					self.each( callback, [ responseText, status, jqXHR ] );
7059.1Use spaces, not tabs.
				}
7060.1Use spaces, not tabs.
			}
7061.1Use spaces, not tabs.
		});
7063.1Use spaces, not tabs.
		return this;
7064.1Use spaces, not tabs.
	},
7066.1Use spaces, not tabs.
	serialize: function() {
7067.1Use spaces, not tabs.
		return jQuery.param( this.serializeArray() );
7068.1Use spaces, not tabs.
	},
7070.1Use spaces, not tabs.
	serializeArray: function() {
7071.1Use spaces, not tabs.
		return this.map(function(){
7072.1Use spaces, not tabs.
			return this.elements ? jQuery.makeArray( this.elements ) : this;
7073.1Use spaces, not tabs.
		})
7074.1Use spaces, not tabs.
		.filter(function(){
7075.1Use spaces, not tabs.
			return this.name && !this.disabled &&
7076.1Use spaces, not tabs.
				( this.checked || rselectTextarea.test( this.nodeName ) ||
7077.1Use spaces, not tabs.
					rinput.test( this.type ) );
7078.1Use spaces, not tabs.
		})
7079.1Use spaces, not tabs.
		.map(function( i, elem ){
7080.1Use spaces, not tabs.
			var val = jQuery( this ).val();
7082.1Use spaces, not tabs.
			return val == null ?
7083.1Use spaces, not tabs.
				null :
7084.1Use spaces, not tabs.
				jQuery.isArray( val ) ?
7085.1Use spaces, not tabs.
					jQuery.map( val, function( val, i ){
7086.1Use spaces, not tabs.
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
7087.1Use spaces, not tabs.
					}) :
7088.1Use spaces, not tabs.
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
7089.1Use spaces, not tabs.
		}).get();
7090.1Use spaces, not tabs.
	}
7095.1Use spaces, not tabs.
	jQuery.fn[ o ] = function( f ){
7096.1Use spaces, not tabs.
		return this.on( o, f );
7097.1Use spaces, not tabs.
	};
7101.1Use spaces, not tabs.
	jQuery[ method ] = function( url, data, callback, type ) {
7102.1Use spaces, not tabs.
		// shift arguments if data argument was omitted
7103.1Use spaces, not tabs.
		if ( jQuery.isFunction( data ) ) {
7104.1Use spaces, not tabs.
			type = type || callback;
7105.1Use spaces, not tabs.
			callback = data;
7106.1Use spaces, not tabs.
			data = undefined;
7107.1Use spaces, not tabs.
		}
7109.1Use spaces, not tabs.
		return jQuery.ajax({
7110.1Use spaces, not tabs.
			type: method,
7111.1Use spaces, not tabs.
			url: url,
7112.1Use spaces, not tabs.
			data: data,
7113.1Use spaces, not tabs.
			success: callback,
7114.1Use spaces, not tabs.
			dataType: type
7115.1Use spaces, not tabs.
		});
7116.1Use spaces, not tabs.
	};
7121.1Use spaces, not tabs.
	getScript: function( url, callback ) {
7122.1Use spaces, not tabs.
		return jQuery.get( url, undefined, callback, "script" );
7123.1Use spaces, not tabs.
	},
7125.1Use spaces, not tabs.
	getJSON: function( url, data, callback ) {
7126.1Use spaces, not tabs.
		return jQuery.get( url, data, callback, "json" );
7127.1Use spaces, not tabs.
	},
7129.1Use spaces, not tabs.
	// Creates a full fledged settings object into target
7130.1Use spaces, not tabs.
	// with both ajaxSettings and settings fields.
7131.1Use spaces, not tabs.
	// If target is omitted, writes into ajaxSettings.
7132.1Use spaces, not tabs.
	ajaxSetup: function( target, settings ) {
7133.1Use spaces, not tabs.
		if ( settings ) {
7134.1Use spaces, not tabs.
			// Building a settings object
7135.1Use spaces, not tabs.
			ajaxExtend( target, jQuery.ajaxSettings );
7136.1Use spaces, not tabs.
		} else {
7137.1Use spaces, not tabs.
			// Extending ajaxSettings
7138.1Use spaces, not tabs.
			settings = target;
7139.1Use spaces, not tabs.
			target = jQuery.ajaxSettings;
7140.1Use spaces, not tabs.
		}
7141.1Use spaces, not tabs.
		ajaxExtend( target, settings );
7142.1Use spaces, not tabs.
		return target;
7143.1Use spaces, not tabs.
	},
7145.1Use spaces, not tabs.
	ajaxSettings: {
7146.1Use spaces, not tabs.
		url: ajaxLocation,
7147.1Use spaces, not tabs.
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
7148.1Use spaces, not tabs.
		global: true,
7149.1Use spaces, not tabs.
		type: "GET",
7150.1Use spaces, not tabs.
		contentType: "application/x-www-form-urlencoded",
7151.1Use spaces, not tabs.
		processData: true,
7152.1Use spaces, not tabs.
		async: true,
7153.1Use spaces, not tabs.
		/*
7154.1Use spaces, not tabs.
		timeout: 0,
7155.1Use spaces, not tabs.
		data: null,
7156.1Use spaces, not tabs.
		dataType: null,
7157.1Use spaces, not tabs.
		username: null,
7158.1Use spaces, not tabs.
		password: null,
7159.1Use spaces, not tabs.
		cache: null,
7160.1Use spaces, not tabs.
		traditional: false,
7161.1Use spaces, not tabs.
		headers: {},
7162.1Use spaces, not tabs.
		*/
7164.1Use spaces, not tabs.
		accepts: {
7165.1Use spaces, not tabs.
			xml: "application/xml, text/xml",
7166.1Use spaces, not tabs.
			html: "text/html",
7167.1Use spaces, not tabs.
			text: "text/plain",
7168.1Use spaces, not tabs.
			json: "application/json, text/javascript",
7169.1Use spaces, not tabs.
			"*": allTypes
7170.1Use spaces, not tabs.
		},
7172.1Use spaces, not tabs.
		contents: {
7173.1Use spaces, not tabs.
			xml: /xml/,
7174.1Use spaces, not tabs.
			html: /html/,
7175.1Use spaces, not tabs.
			json: /json/
7176.1Use spaces, not tabs.
		},
7178.1Use spaces, not tabs.
		responseFields: {
7179.1Use spaces, not tabs.
			xml: "responseXML",
7180.1Use spaces, not tabs.
			text: "responseText"
7181.1Use spaces, not tabs.
		},
7183.1Use spaces, not tabs.
		// List of data converters
7184.1Use spaces, not tabs.
		// 1) key format is "source_type destination_type" (a single space in-between)
7185.1Use spaces, not tabs.
		// 2) the catchall symbol "*" can be used for source_type
7186.1Use spaces, not tabs.
		converters: {
7188.1Use spaces, not tabs.
			// Convert anything to text
7189.1Use spaces, not tabs.
			"* text": window.String,
7191.1Use spaces, not tabs.
			// Text to html (true = no transformation)
7192.1Use spaces, not tabs.
			"text html": true,
7194.1Use spaces, not tabs.
			// Evaluate text as a json expression
7195.1Use spaces, not tabs.
			"text json": jQuery.parseJSON,
7197.1Use spaces, not tabs.
			// Parse text as xml
7198.1Use spaces, not tabs.
			"text xml": jQuery.parseXML
7199.1Use spaces, not tabs.
		},
7201.1Use spaces, not tabs.
		// For options that shouldn't be deep extended:
7202.1Use spaces, not tabs.
		// you can add your own custom options here if
7203.1Use spaces, not tabs.
		// and when you create one that shouldn't be
7204.1Use spaces, not tabs.
		// deep extended (see ajaxExtend)
7205.1Use spaces, not tabs.
		flatOptions: {
7206.1Use spaces, not tabs.
			context: true,
7207.1Use spaces, not tabs.
			url: true
7208.1Use spaces, not tabs.
		}
7209.1Use spaces, not tabs.
	},
7211.1Use spaces, not tabs.
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
7212.1Use spaces, not tabs.
	ajaxTransport: addToPrefiltersOrTransports( transports ),
7214.1Use spaces, not tabs.
	// Main method
7215.1Use spaces, not tabs.
	ajax: function( url, options ) {
7217.1Use spaces, not tabs.
		// If url is an object, simulate pre-1.5 signature
7218.1Use spaces, not tabs.
		if ( typeof url === "object" ) {
7219.1Use spaces, not tabs.
			options = url;
7220.1Use spaces, not tabs.
			url = undefined;
7221.1Use spaces, not tabs.
		}
7223.1Use spaces, not tabs.
		// Force options to be an object
7224.1Use spaces, not tabs.
		options = options || {};
7226.1Use spaces, not tabs.
		var // Create the final options object
7227.1Use spaces, not tabs.
			s = jQuery.ajaxSetup( {}, options ),
7228.1Use spaces, not tabs.
			// Callbacks context
7229.1Use spaces, not tabs.
			callbackContext = s.context || s,
7230.1Use spaces, not tabs.
			// Context for global events
7231.1Use spaces, not tabs.
			// It's the callbackContext if one was provided in the options
7232.1Use spaces, not tabs.
			// and if it's a DOM node or a jQuery collection
7233.1Use spaces, not tabs.
			globalEventContext = callbackContext !== s &&
7234.1Use spaces, not tabs.
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
7235.1Use spaces, not tabs.
						jQuery( callbackContext ) : jQuery.event,
7236.1Use spaces, not tabs.
			// Deferreds
7237.1Use spaces, not tabs.
			deferred = jQuery.Deferred(),
7238.1Use spaces, not tabs.
			completeDeferred = jQuery.Callbacks( "once memory" ),
7239.1Use spaces, not tabs.
			// Status-dependent callbacks
7240.1Use spaces, not tabs.
			statusCode = s.statusCode || {},
7241.1Use spaces, not tabs.
			// ifModified key
7242.1Use spaces, not tabs.
			ifModifiedKey,
7243.1Use spaces, not tabs.
			// Headers (they are sent all at once)
7244.1Use spaces, not tabs.
			requestHeaders = {},
7245.1Use spaces, not tabs.
			requestHeadersNames = {},
7246.1Use spaces, not tabs.
			// Response headers
7247.1Use spaces, not tabs.
			responseHeadersString,
7248.1Use spaces, not tabs.
			responseHeaders,
7249.1Use spaces, not tabs.
			// transport
7250.1Use spaces, not tabs.
			transport,
7251.1Use spaces, not tabs.
			// timeout handle
7252.1Use spaces, not tabs.
			timeoutTimer,
7253.1Use spaces, not tabs.
			// Cross-domain detection vars
7254.1Use spaces, not tabs.
			parts,
7255.1Use spaces, not tabs.
			// The jqXHR state
7256.1Use spaces, not tabs.
			state = 0,
7257.1Use spaces, not tabs.
			// To know if global events are to be dispatched
7258.1Use spaces, not tabs.
			fireGlobals,
7259.1Use spaces, not tabs.
			// Loop variable
7260.1Use spaces, not tabs.
			i,
7261.1Use spaces, not tabs.
			// Fake xhr
7262.1Use spaces, not tabs.
			jqXHR = {
7264.1Use spaces, not tabs.
				readyState: 0,
7266.1Use spaces, not tabs.
				// Caches the header
7267.1Use spaces, not tabs.
				setRequestHeader: function( name, value ) {
7268.1Use spaces, not tabs.
					if ( !state ) {
7269.1Use spaces, not tabs.
						var lname = name.toLowerCase();
7270.1Use spaces, not tabs.
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
7271.1Use spaces, not tabs.
						requestHeaders[ name ] = value;
7272.1Use spaces, not tabs.
					}
7273.1Use spaces, not tabs.
					return this;
7274.1Use spaces, not tabs.
				},
7276.1Use spaces, not tabs.
				// Raw string
7277.1Use spaces, not tabs.
				getAllResponseHeaders: function() {
7278.1Use spaces, not tabs.
					return state === 2 ? responseHeadersString : null;
7279.1Use spaces, not tabs.
				},
7281.1Use spaces, not tabs.
				// Builds headers hashtable if needed
7282.1Use spaces, not tabs.
				getResponseHeader: function( key ) {
7283.1Use spaces, not tabs.
					var match;
7284.1Use spaces, not tabs.
					if ( state === 2 ) {
7285.1Use spaces, not tabs.
						if ( !responseHeaders ) {
7286.1Use spaces, not tabs.
							responseHeaders = {};
7287.1Use spaces, not tabs.
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
7288.1Use spaces, not tabs.
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
7289.1Use spaces, not tabs.
							}
7290.1Use spaces, not tabs.
						}
7291.1Use spaces, not tabs.
						match = responseHeaders[ key.toLowerCase() ];
7292.1Use spaces, not tabs.
					}
7293.1Use spaces, not tabs.
					return match === undefined ? null : match;
7294.1Use spaces, not tabs.
				},
7296.1Use spaces, not tabs.
				// Overrides response content-type header
7297.1Use spaces, not tabs.
				overrideMimeType: function( type ) {
7298.1Use spaces, not tabs.
					if ( !state ) {
7299.1Use spaces, not tabs.
						s.mimeType = type;
7300.1Use spaces, not tabs.
					}
7301.1Use spaces, not tabs.
					return this;
7302.1Use spaces, not tabs.
				},
7304.1Use spaces, not tabs.
				// Cancel the request
7305.1Use spaces, not tabs.
				abort: function( statusText ) {
7306.1Use spaces, not tabs.
					statusText = statusText || "abort";
7307.1Use spaces, not tabs.
					if ( transport ) {
7308.1Use spaces, not tabs.
						transport.abort( statusText );
7309.1Use spaces, not tabs.
					}
7310.1Use spaces, not tabs.
					done( 0, statusText );
7311.1Use spaces, not tabs.
					return this;
7312.1Use spaces, not tabs.
				}
7313.1Use spaces, not tabs.
			};
7315.1Use spaces, not tabs.
		// Callback for when everything is done
7316.1Use spaces, not tabs.
		// It is defined here because jslint complains if it is declared
7317.1Use spaces, not tabs.
		// at the end of the function (which would be more logical and readable)
7318.1Use spaces, not tabs.
		function done( status, nativeStatusText, responses, headers ) {
7320.1Use spaces, not tabs.
			// Called once
7321.1Use spaces, not tabs.
			if ( state === 2 ) {
7322.1Use spaces, not tabs.
				return;
7323.1Use spaces, not tabs.
			}
7325.1Use spaces, not tabs.
			// State is "done" now
7326.1Use spaces, not tabs.
			state = 2;
7328.1Use spaces, not tabs.
			// Clear timeout if it exists
7329.1Use spaces, not tabs.
			if ( timeoutTimer ) {
7330.1Use spaces, not tabs.
				clearTimeout( timeoutTimer );
7331.1Use spaces, not tabs.
			}
7333.1Use spaces, not tabs.
			// Dereference transport for early garbage collection
7334.1Use spaces, not tabs.
			// (no matter how long the jqXHR object will be used)
7335.1Use spaces, not tabs.
			transport = undefined;
7337.1Use spaces, not tabs.
			// Cache response headers
7338.1Use spaces, not tabs.
			responseHeadersString = headers || "";
7340.1Use spaces, not tabs.
			// Set readyState
7341.1Use spaces, not tabs.
			jqXHR.readyState = status > 0 ? 4 : 0;
7343.1Use spaces, not tabs.
			var isSuccess,
7344.1Use spaces, not tabs.
				success,
7345.1Use spaces, not tabs.
				error,
7346.1Use spaces, not tabs.
				statusText = nativeStatusText,
7347.1Use spaces, not tabs.
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
7348.1Use spaces, not tabs.
				lastModified,
7349.1Use spaces, not tabs.
				etag;
7351.1Use spaces, not tabs.
			// If successful, handle type chaining
7352.1Use spaces, not tabs.
			if ( status >= 200 && status < 300 || status === 304 ) {
7354.1Use spaces, not tabs.
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
7355.1Use spaces, not tabs.
				if ( s.ifModified ) {
7357.1Use spaces, not tabs.
					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
7358.1Use spaces, not tabs.
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
7359.1Use spaces, not tabs.
					}
7360.1Use spaces, not tabs.
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
7361.1Use spaces, not tabs.
						jQuery.etag[ ifModifiedKey ] = etag;
7362.1Use spaces, not tabs.
					}
7363.1Use spaces, not tabs.
				}
7365.1Use spaces, not tabs.
				// If not modified
7366.1Use spaces, not tabs.
				if ( status === 304 ) {
7368.1Use spaces, not tabs.
					statusText = "notmodified";
7369.1Use spaces, not tabs.
					isSuccess = true;
7371.1Use spaces, not tabs.
				// If we have data
7372.1Use spaces, not tabs.
				} else {
7374.1Use spaces, not tabs.
					try {
7375.1Use spaces, not tabs.
						success = ajaxConvert( s, response );
7376.1Use spaces, not tabs.
						statusText = "success";
7377.1Use spaces, not tabs.
						isSuccess = true;
7378.1Use spaces, not tabs.
					} catch(e) {
7379.1Use spaces, not tabs.
						// We have a parsererror
7380.1Use spaces, not tabs.
						statusText = "parsererror";
7381.1Use spaces, not tabs.
						error = e;
7382.1Use spaces, not tabs.
					}
7383.1Use spaces, not tabs.
				}
7384.1Use spaces, not tabs.
			} else {
7385.1Use spaces, not tabs.
				// We extract error from statusText
7386.1Use spaces, not tabs.
				// then normalize statusText and status for non-aborts
7387.1Use spaces, not tabs.
				error = statusText;
7388.1Use spaces, not tabs.
				if ( !statusText || status ) {
7389.1Use spaces, not tabs.
					statusText = "error";
7390.1Use spaces, not tabs.
					if ( status < 0 ) {
7391.1Use spaces, not tabs.
						status = 0;
7392.1Use spaces, not tabs.
					}
7393.1Use spaces, not tabs.
				}
7394.1Use spaces, not tabs.
			}
7396.1Use spaces, not tabs.
			// Set data for the fake xhr object
7397.1Use spaces, not tabs.
			jqXHR.status = status;
7398.1Use spaces, not tabs.
			jqXHR.statusText = "" + ( nativeStatusText || statusText );
7400.1Use spaces, not tabs.
			// Success/Error
7401.1Use spaces, not tabs.
			if ( isSuccess ) {
7402.1Use spaces, not tabs.
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
7403.1Use spaces, not tabs.
			} else {
7404.1Use spaces, not tabs.
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
7405.1Use spaces, not tabs.
			}
7407.1Use spaces, not tabs.
			// Status-dependent callbacks
7408.1Use spaces, not tabs.
			jqXHR.statusCode( statusCode );
7409.1Use spaces, not tabs.
			statusCode = undefined;
7411.1Use spaces, not tabs.
			if ( fireGlobals ) {
7412.1Use spaces, not tabs.
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
7413.1Use spaces, not tabs.
						[ jqXHR, s, isSuccess ? success : error ] );
7414.1Use spaces, not tabs.
			}
7416.1Use spaces, not tabs.
			// Complete
7417.1Use spaces, not tabs.
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
7419.1Use spaces, not tabs.
			if ( fireGlobals ) {
7420.1Use spaces, not tabs.
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
7421.1Use spaces, not tabs.
				// Handle the global AJAX counter
7422.1Use spaces, not tabs.
				if ( !( --jQuery.active ) ) {
7423.1Use spaces, not tabs.
					jQuery.event.trigger( "ajaxStop" );
7424.1Use spaces, not tabs.
				}
7425.1Use spaces, not tabs.
			}
7426.1Use spaces, not tabs.
		}
7428.1Use spaces, not tabs.
		// Attach deferreds
7429.1Use spaces, not tabs.
		deferred.promise( jqXHR );
7430.1Use spaces, not tabs.
		jqXHR.success = jqXHR.done;
7431.1Use spaces, not tabs.
		jqXHR.error = jqXHR.fail;
7432.1Use spaces, not tabs.
		jqXHR.complete = completeDeferred.add;
7434.1Use spaces, not tabs.
		// Status-dependent callbacks
7435.1Use spaces, not tabs.
		jqXHR.statusCode = function( map ) {
7436.1Use spaces, not tabs.
			if ( map ) {
7437.1Use spaces, not tabs.
				var tmp;
7438.1Use spaces, not tabs.
				if ( state < 2 ) {
7439.1Use spaces, not tabs.
					for ( tmp in map ) {
7440.1Use spaces, not tabs.
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
7441.1Use spaces, not tabs.
					}
7442.1Use spaces, not tabs.
				} else {
7443.1Use spaces, not tabs.
					tmp = map[ jqXHR.status ];
7444.1Use spaces, not tabs.
					jqXHR.then( tmp, tmp );
7445.1Use spaces, not tabs.
				}
7446.1Use spaces, not tabs.
			}
7447.1Use spaces, not tabs.
			return this;
7448.1Use spaces, not tabs.
		};
7450.1Use spaces, not tabs.
		// Remove hash character (#7531: and string promotion)
7451.1Use spaces, not tabs.
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
7452.1Use spaces, not tabs.
		// We also use the url parameter if available
7453.1Use spaces, not tabs.
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
7455.1Use spaces, not tabs.
		// Extract dataTypes list
7456.1Use spaces, not tabs.
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );
7458.1Use spaces, not tabs.
		// Determine if a cross-domain request is in order
7459.1Use spaces, not tabs.
		if ( s.crossDomain == null ) {
7460.1Use spaces, not tabs.
			parts = rurl.exec( s.url.toLowerCase() );
7461.1Use spaces, not tabs.
			s.crossDomain = !!( parts &&
7462.1Use spaces, not tabs.
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
7463.1Use spaces, not tabs.
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
7464.1Use spaces, not tabs.
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
7465.1Use spaces, not tabs.
			);
7466.1Use spaces, not tabs.
		}
7468.1Use spaces, not tabs.
		// Convert data if not already a string
7469.1Use spaces, not tabs.
		if ( s.data && s.processData && typeof s.data !== "string" ) {
7470.1Use spaces, not tabs.
			s.data = jQuery.param( s.data, s.traditional );
7471.1Use spaces, not tabs.
		}
7473.1Use spaces, not tabs.
		// Apply prefilters
7474.1Use spaces, not tabs.
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
7476.1Use spaces, not tabs.
		// If request was aborted inside a prefiler, stop there
7477.1Use spaces, not tabs.
		if ( state === 2 ) {
7478.1Use spaces, not tabs.
			return false;
7479.1Use spaces, not tabs.
		}
7481.1Use spaces, not tabs.
		// We can fire global events as of now if asked to
7482.1Use spaces, not tabs.
		fireGlobals = s.global;
7484.1Use spaces, not tabs.
		// Uppercase the type
7485.1Use spaces, not tabs.
		s.type = s.type.toUpperCase();
7487.1Use spaces, not tabs.
		// Determine if request has content
7488.1Use spaces, not tabs.
		s.hasContent = !rnoContent.test( s.type );
7490.1Use spaces, not tabs.
		// Watch for a new set of requests
7491.1Use spaces, not tabs.
		if ( fireGlobals && jQuery.active++ === 0 ) {
7492.1Use spaces, not tabs.
			jQuery.event.trigger( "ajaxStart" );
7493.1Use spaces, not tabs.
		}
7495.1Use spaces, not tabs.
		// More options handling for requests with no content
7496.1Use spaces, not tabs.
		if ( !s.hasContent ) {
7498.1Use spaces, not tabs.
			// If data is available, append data to url
7499.1Use spaces, not tabs.
			if ( s.data ) {
7500.1Use spaces, not tabs.
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
7501.1Use spaces, not tabs.
				// #9682: remove data so that it's not used in an eventual retry
7502.1Use spaces, not tabs.
				delete s.data;
7503.1Use spaces, not tabs.
			}
7505.1Use spaces, not tabs.
			// Get ifModifiedKey before adding the anti-cache parameter
7506.1Use spaces, not tabs.
			ifModifiedKey = s.url;
7508.1Use spaces, not tabs.
			// Add anti-cache in url if needed
7509.1Use spaces, not tabs.
			if ( s.cache === false ) {
7511.1Use spaces, not tabs.
				var ts = jQuery.now(),
7512.1Use spaces, not tabs.
					// try replacing _= if it is there
7513.1Use spaces, not tabs.
					ret = s.url.replace( rts, "$1_=" + ts );
7515.1Use spaces, not tabs.
				// if nothing was replaced, add timestamp to the end
7516.1Use spaces, not tabs.
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
7517.1Use spaces, not tabs.
			}
7518.1Use spaces, not tabs.
		}
7520.1Use spaces, not tabs.
		// Set the correct header, if data is being sent
7521.1Use spaces, not tabs.
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
7522.1Use spaces, not tabs.
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
7523.1Use spaces, not tabs.
		}
7525.1Use spaces, not tabs.
		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
7526.1Use spaces, not tabs.
		if ( s.ifModified ) {
7527.1Use spaces, not tabs.
			ifModifiedKey = ifModifiedKey || s.url;
7528.1Use spaces, not tabs.
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
7529.1Use spaces, not tabs.
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
7530.1Use spaces, not tabs.
			}
7531.1Use spaces, not tabs.
			if ( jQuery.etag[ ifModifiedKey ] ) {
7532.1Use spaces, not tabs.
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
7533.1Use spaces, not tabs.
			}
7534.1Use spaces, not tabs.
		}
7536.1Use spaces, not tabs.
		// Set the Accepts header for the server, depending on the dataType
7537.1Use spaces, not tabs.
		jqXHR.setRequestHeader(
7538.1Use spaces, not tabs.
			"Accept",
7539.1Use spaces, not tabs.
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
7540.1Use spaces, not tabs.
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
7541.1Use spaces, not tabs.
				s.accepts[ "*" ]
7542.1Use spaces, not tabs.
		);
7544.1Use spaces, not tabs.
		// Check for headers option
7545.1Use spaces, not tabs.
		for ( i in s.headers ) {
7546.1Use spaces, not tabs.
			jqXHR.setRequestHeader( i, s.headers[ i ] );
7547.1Use spaces, not tabs.
		}
7549.1Use spaces, not tabs.
		// Allow custom headers/mimetypes and early abort
7550.1Use spaces, not tabs.
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
7551.1Use spaces, not tabs.
				// Abort if not done already
7552.1Use spaces, not tabs.
				jqXHR.abort();
7553.1Use spaces, not tabs.
				return false;
7555.1Use spaces, not tabs.
		}
7557.1Use spaces, not tabs.
		// Install callbacks on deferreds
7558.1Use spaces, not tabs.
		for ( i in { success: 1, error: 1, complete: 1 } ) {
7559.1Use spaces, not tabs.
			jqXHR[ i ]( s[ i ] );
7560.1Use spaces, not tabs.
		}
7562.1Use spaces, not tabs.
		// Get transport
7563.1Use spaces, not tabs.
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
7565.1Use spaces, not tabs.
		// If no transport, we auto-abort
7566.1Use spaces, not tabs.
		if ( !transport ) {
7567.1Use spaces, not tabs.
			done( -1, "No Transport" );
7568.1Use spaces, not tabs.
		} else {
7569.1Use spaces, not tabs.
			jqXHR.readyState = 1;
7570.1Use spaces, not tabs.
			// Send global event
7571.1Use spaces, not tabs.
			if ( fireGlobals ) {
7572.1Use spaces, not tabs.
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
7573.1Use spaces, not tabs.
			}
7574.1Use spaces, not tabs.
			// Timeout
7575.1Use spaces, not tabs.
			if ( s.async && s.timeout > 0 ) {
7576.1Use spaces, not tabs.
				timeoutTimer = setTimeout( function(){
7577.1Use spaces, not tabs.
					jqXHR.abort( "timeout" );
7578.1Use spaces, not tabs.
				}, s.timeout );
7579.1Use spaces, not tabs.
			}
7581.1Use spaces, not tabs.
			try {
7582.1Use spaces, not tabs.
				state = 1;
7583.1Use spaces, not tabs.
				transport.send( requestHeaders, done );
7584.1Use spaces, not tabs.
			} catch (e) {
7585.1Use spaces, not tabs.
				// Propagate exception as error if not done
7586.1Use spaces, not tabs.
				if ( state < 2 ) {
7587.1Use spaces, not tabs.
					done( -1, e );
7588.1Use spaces, not tabs.
				// Simply rethrow otherwise
7589.1Use spaces, not tabs.
				} else {
7590.1Use spaces, not tabs.
					throw e;
7591.1Use spaces, not tabs.
				}
7592.1Use spaces, not tabs.
			}
7593.1Use spaces, not tabs.
		}
7595.1Use spaces, not tabs.
		return jqXHR;
7596.1Use spaces, not tabs.
	},
7598.1Use spaces, not tabs.
	// Serialize an array of form elements or a set of
7599.1Use spaces, not tabs.
	// key/values into a query string
7600.1Use spaces, not tabs.
	param: function( a, traditional ) {
7601.1Use spaces, not tabs.
		var s = [],
7602.1Use spaces, not tabs.
			add = function( key, value ) {
7603.1Use spaces, not tabs.
				// If value is a function, invoke it and return its value
7604.1Use spaces, not tabs.
				value = jQuery.isFunction( value ) ? value() : value;
7605.1Use spaces, not tabs.
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
7606.1Use spaces, not tabs.
			};
7608.1Use spaces, not tabs.
		// Set traditional to true for jQuery <= 1.3.2 behavior.
7609.1Use spaces, not tabs.
		if ( traditional === undefined ) {
7610.1Use spaces, not tabs.
			traditional = jQuery.ajaxSettings.traditional;
7611.1Use spaces, not tabs.
		}
7613.1Use spaces, not tabs.
		// If an array was passed in, assume that it is an array of form elements.
7614.1Use spaces, not tabs.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
7615.1Use spaces, not tabs.
			// Serialize the form elements
7616.1Use spaces, not tabs.
			jQuery.each( a, function() {
7617.1Use spaces, not tabs.
				add( this.name, this.value );
7618.1Use spaces, not tabs.
			});
7620.1Use spaces, not tabs.
		} else {
7621.1Use spaces, not tabs.
			// If traditional, encode the "old" way (the way 1.3.2 or older
7622.1Use spaces, not tabs.
			// did it), otherwise encode params recursively.
7623.1Use spaces, not tabs.
			for ( var prefix in a ) {
7624.1Use spaces, not tabs.
				buildParams( prefix, a[ prefix ], traditional, add );
7625.1Use spaces, not tabs.
			}
7626.1Use spaces, not tabs.
		}
7628.1Use spaces, not tabs.
		// Return the resulting serialization
7629.1Use spaces, not tabs.
		return s.join( "&" ).replace( r20, "+" );
7630.1Use spaces, not tabs.
	}
7634.1Use spaces, not tabs.
	if ( jQuery.isArray( obj ) ) {
7635.1Use spaces, not tabs.
		// Serialize array item.
7636.1Use spaces, not tabs.
		jQuery.each( obj, function( i, v ) {
7637.1Use spaces, not tabs.
			if ( traditional || rbracket.test( prefix ) ) {
7638.1Use spaces, not tabs.
				// Treat each array item as a scalar.
7639.1Use spaces, not tabs.
				add( prefix, v );
7641.1Use spaces, not tabs.
			} else {
7642.1Use spaces, not tabs.
				// If array item is non-scalar (array or object), encode its
7643.1Use spaces, not tabs.
				// numeric index to resolve deserialization ambiguity issues.
7644.1Use spaces, not tabs.
				// Note that rack (as of 1.0.0) can't currently deserialize
7645.1Use spaces, not tabs.
				// nested arrays properly, and attempting to do so may cause
7646.1Use spaces, not tabs.
				// a server error. Possible fixes are to modify rack's
7647.1Use spaces, not tabs.
				// deserialization algorithm or to provide an option or flag
7648.1Use spaces, not tabs.
				// to force array serialization to be shallow.
7649.1Use spaces, not tabs.
				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
7650.1Use spaces, not tabs.
			}
7651.1Use spaces, not tabs.
		});
7653.1Use spaces, not tabs.
	} else if ( !traditional && obj != null && typeof obj === "object" ) {
7654.1Use spaces, not tabs.
		// Serialize object item.
7655.1Use spaces, not tabs.
		for ( var name in obj ) {
7656.1Use spaces, not tabs.
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
7657.1Use spaces, not tabs.
		}
7659.1Use spaces, not tabs.
	} else {
7660.1Use spaces, not tabs.
		// Serialize scalar item.
7661.1Use spaces, not tabs.
		add( prefix, obj );
7662.1Use spaces, not tabs.
	}
7669.1Use spaces, not tabs.
	// Counter for holding the number of active queries
7670.1Use spaces, not tabs.
	active: 0,
7672.1Use spaces, not tabs.
	// Last-Modified header cache for next request
7673.1Use spaces, not tabs.
	lastModified: {},
7674.1Use spaces, not tabs.
	etag: {}
7685.1Use spaces, not tabs.
	var contents = s.contents,
7686.1Use spaces, not tabs.
		dataTypes = s.dataTypes,
7687.1Use spaces, not tabs.
		responseFields = s.responseFields,
7688.1Use spaces, not tabs.
		ct,
7689.1Use spaces, not tabs.
		type,
7690.1Use spaces, not tabs.
		finalDataType,
7691.1Use spaces, not tabs.
		firstDataType;
7693.1Use spaces, not tabs.
	// Fill responseXXX fields
7694.1Use spaces, not tabs.
	for ( type in responseFields ) {
7695.1Use spaces, not tabs.
		if ( type in responses ) {
7696.1Use spaces, not tabs.
			jqXHR[ responseFields[type] ] = responses[ type ];
7697.1Use spaces, not tabs.
		}
7698.1Use spaces, not tabs.
	}
7700.1Use spaces, not tabs.
	// Remove auto dataType and get content-type in the process
7701.1Use spaces, not tabs.
	while( dataTypes[ 0 ] === "*" ) {
7702.1Use spaces, not tabs.
		dataTypes.shift();
7703.1Use spaces, not tabs.
		if ( ct === undefined ) {
7704.1Use spaces, not tabs.
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
7705.1Use spaces, not tabs.
		}
7706.1Use spaces, not tabs.
	}
7708.1Use spaces, not tabs.
	// Check if we're dealing with a known content-type
7709.1Use spaces, not tabs.
	if ( ct ) {
7710.1Use spaces, not tabs.
		for ( type in contents ) {
7711.1Use spaces, not tabs.
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
7712.1Use spaces, not tabs.
				dataTypes.unshift( type );
7713.1Use spaces, not tabs.
				break;
7714.1Use spaces, not tabs.
			}
7715.1Use spaces, not tabs.
		}
7716.1Use spaces, not tabs.
	}
7718.1Use spaces, not tabs.
	// Check to see if we have a response for the expected dataType
7719.1Use spaces, not tabs.
	if ( dataTypes[ 0 ] in responses ) {
7720.1Use spaces, not tabs.
		finalDataType = dataTypes[ 0 ];
7721.1Use spaces, not tabs.
	} else {
7722.1Use spaces, not tabs.
		// Try convertible dataTypes
7723.1Use spaces, not tabs.
		for ( type in responses ) {
7724.1Use spaces, not tabs.
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
7725.1Use spaces, not tabs.
				finalDataType = type;
7726.1Use spaces, not tabs.
				break;
7727.1Use spaces, not tabs.
			}
7728.1Use spaces, not tabs.
			if ( !firstDataType ) {
7729.1Use spaces, not tabs.
				firstDataType = type;
7730.1Use spaces, not tabs.
			}
7731.1Use spaces, not tabs.
		}
7732.1Use spaces, not tabs.
		// Or just use first one
7733.1Use spaces, not tabs.
		finalDataType = finalDataType || firstDataType;
7734.1Use spaces, not tabs.
	}
7736.1Use spaces, not tabs.
	// If we found a dataType
7737.1Use spaces, not tabs.
	// We add the dataType to the list if needed
7738.1Use spaces, not tabs.
	// and return the corresponding response
7739.1Use spaces, not tabs.
	if ( finalDataType ) {
7740.1Use spaces, not tabs.
		if ( finalDataType !== dataTypes[ 0 ] ) {
7741.1Use spaces, not tabs.
			dataTypes.unshift( finalDataType );
7742.1Use spaces, not tabs.
		}
7743.1Use spaces, not tabs.
		return responses[ finalDataType ];
7744.1Use spaces, not tabs.
	}
7750.1Use spaces, not tabs.
	// Apply the dataFilter if provided
7751.1Use spaces, not tabs.
	if ( s.dataFilter ) {
7752.1Use spaces, not tabs.
		response = s.dataFilter( response, s.dataType );
7753.1Use spaces, not tabs.
	}
7755.1Use spaces, not tabs.
	var dataTypes = s.dataTypes,
7756.1Use spaces, not tabs.
		converters = {},
7757.1Use spaces, not tabs.
		i,
7758.1Use spaces, not tabs.
		key,
7759.1Use spaces, not tabs.
		length = dataTypes.length,
7760.1Use spaces, not tabs.
		tmp,
7761.1Use spaces, not tabs.
		// Current and previous dataTypes
7762.1Use spaces, not tabs.
		current = dataTypes[ 0 ],
7763.1Use spaces, not tabs.
		prev,
7764.1Use spaces, not tabs.
		// Conversion expression
7765.1Use spaces, not tabs.
		conversion,
7766.1Use spaces, not tabs.
		// Conversion function
7767.1Use spaces, not tabs.
		conv,
7768.1Use spaces, not tabs.
		// Conversion functions (transitive conversion)
7769.1Use spaces, not tabs.
		conv1,
7770.1Use spaces, not tabs.
		conv2;
7772.1Use spaces, not tabs.
	// For each dataType in the chain
7773.1Use spaces, not tabs.
	for ( i = 1; i < length; i++ ) {
7775.1Use spaces, not tabs.
		// Create converters map
7776.1Use spaces, not tabs.
		// with lowercased keys
7777.1Use spaces, not tabs.
		if ( i === 1 ) {
7778.1Use spaces, not tabs.
			for ( key in s.converters ) {
7779.1Use spaces, not tabs.
				if ( typeof key === "string" ) {
7780.1Use spaces, not tabs.
					converters[ key.toLowerCase() ] = s.converters[ key ];
7781.1Use spaces, not tabs.
				}
7782.1Use spaces, not tabs.
			}
7783.1Use spaces, not tabs.
		}
7785.1Use spaces, not tabs.
		// Get the dataTypes
7786.1Use spaces, not tabs.
		prev = current;
7787.1Use spaces, not tabs.
		current = dataTypes[ i ];
7789.1Use spaces, not tabs.
		// If current is auto dataType, update it to prev
7790.1Use spaces, not tabs.
		if ( current === "*" ) {
7791.1Use spaces, not tabs.
			current = prev;
7792.1Use spaces, not tabs.
		// If no auto and dataTypes are actually different
7793.1Use spaces, not tabs.
		} else if ( prev !== "*" && prev !== current ) {
7795.1Use spaces, not tabs.
			// Get the converter
7796.1Use spaces, not tabs.
			conversion = prev + " " + current;
7797.1Use spaces, not tabs.
			conv = converters[ conversion ] || converters[ "* " + current ];
7799.1Use spaces, not tabs.
			// If there is no direct converter, search transitively
7800.1Use spaces, not tabs.
			if ( !conv ) {
7801.1Use spaces, not tabs.
				conv2 = undefined;
7802.1Use spaces, not tabs.
				for ( conv1 in converters ) {
7803.1Use spaces, not tabs.
					tmp = conv1.split( " " );
7804.1Use spaces, not tabs.
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
7805.1Use spaces, not tabs.
						conv2 = converters[ tmp[1] + " " + current ];
7806.1Use spaces, not tabs.
						if ( conv2 ) {
7807.1Use spaces, not tabs.
							conv1 = converters[ conv1 ];
7808.1Use spaces, not tabs.
							if ( conv1 === true ) {
7809.1Use spaces, not tabs.
								conv = conv2;
7810.1Use spaces, not tabs.
							} else if ( conv2 === true ) {
7811.1Use spaces, not tabs.
								conv = conv1;
7812.1Use spaces, not tabs.
							}
7813.1Use spaces, not tabs.
							break;
7814.1Use spaces, not tabs.
						}
7815.1Use spaces, not tabs.
					}
7816.1Use spaces, not tabs.
				}
7817.1Use spaces, not tabs.
			}
7818.1Use spaces, not tabs.
			// If we found no converter, dispatch an error
7819.1Use spaces, not tabs.
			if ( !( conv || conv2 ) ) {
7820.1Use spaces, not tabs.
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
7821.1Use spaces, not tabs.
			}
7822.1Use spaces, not tabs.
			// If found converter is not an equivalence
7823.1Use spaces, not tabs.
			if ( conv !== true ) {
7824.1Use spaces, not tabs.
				// Convert with 1 or 2 converters accordingly
7825.1Use spaces, not tabs.
				response = conv ? conv( response ) : conv2( conv1(response) );
7826.1Use spaces, not tabs.
			}
7827.1Use spaces, not tabs.
		}
7828.1Use spaces, not tabs.
	}
7829.1Use spaces, not tabs.
	return response;
7836.1Use spaces, not tabs.
	jsre = /(\=)\?(&|$)|\?\?/i;
7840.1Use spaces, not tabs.
	jsonp: "callback",
7841.1Use spaces, not tabs.
	jsonpCallback: function() {
7842.1Use spaces, not tabs.
		return jQuery.expando + "_" + ( jsc++ );
7843.1Use spaces, not tabs.
	}
7849.1Use spaces, not tabs.
	var inspectData = s.contentType === "application/x-www-form-urlencoded" &&
7850.1Use spaces, not tabs.
		( typeof s.data === "string" );
7852.1Use spaces, not tabs.
	if ( s.dataTypes[ 0 ] === "jsonp" ||
7853.1Use spaces, not tabs.
		s.jsonp !== false && ( jsre.test( s.url ) ||
7854.1Use spaces, not tabs.
				inspectData && jsre.test( s.data ) ) ) {
7856.1Use spaces, not tabs.
		var responseContainer,
7857.1Use spaces, not tabs.
			jsonpCallback = s.jsonpCallback =
7858.1Use spaces, not tabs.
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
7859.1Use spaces, not tabs.
			previous = window[ jsonpCallback ],
7860.1Use spaces, not tabs.
			url = s.url,
7861.1Use spaces, not tabs.
			data = s.data,
7862.1Use spaces, not tabs.
			replace = "$1" + jsonpCallback + "$2";
7864.1Use spaces, not tabs.
		if ( s.jsonp !== false ) {
7865.1Use spaces, not tabs.
			url = url.replace( jsre, replace );
7866.1Use spaces, not tabs.
			if ( s.url === url ) {
7867.1Use spaces, not tabs.
				if ( inspectData ) {
7868.1Use spaces, not tabs.
					data = data.replace( jsre, replace );
7869.1Use spaces, not tabs.
				}
7870.1Use spaces, not tabs.
				if ( s.data === data ) {
7871.1Use spaces, not tabs.
					// Add callback manually
7872.1Use spaces, not tabs.
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
7873.1Use spaces, not tabs.
				}
7874.1Use spaces, not tabs.
			}
7875.1Use spaces, not tabs.
		}
7877.1Use spaces, not tabs.
		s.url = url;
7878.1Use spaces, not tabs.
		s.data = data;
7880.1Use spaces, not tabs.
		// Install callback
7881.1Use spaces, not tabs.
		window[ jsonpCallback ] = function( response ) {
7882.1Use spaces, not tabs.
			responseContainer = [ response ];
7883.1Use spaces, not tabs.
		};
7885.1Use spaces, not tabs.
		// Clean-up function
7886.1Use spaces, not tabs.
		jqXHR.always(function() {
7887.1Use spaces, not tabs.
			// Set callback back to previous value
7888.1Use spaces, not tabs.
			window[ jsonpCallback ] = previous;
7889.1Use spaces, not tabs.
			// Call if it was a function and we have a response
7890.1Use spaces, not tabs.
			if ( responseContainer && jQuery.isFunction( previous ) ) {
7891.1Use spaces, not tabs.
				window[ jsonpCallback ]( responseContainer[ 0 ] );
7892.1Use spaces, not tabs.
			}
7893.1Use spaces, not tabs.
		});
7895.1Use spaces, not tabs.
		// Use data converter to retrieve json after script execution
7896.1Use spaces, not tabs.
		s.converters["script json"] = function() {
7897.1Use spaces, not tabs.
			if ( !responseContainer ) {
7898.1Use spaces, not tabs.
				jQuery.error( jsonpCallback + " was not called" );
7899.1Use spaces, not tabs.
			}
7900.1Use spaces, not tabs.
			return responseContainer[ 0 ];
7901.1Use spaces, not tabs.
		};
7903.1Use spaces, not tabs.
		// force json dataType
7904.1Use spaces, not tabs.
		s.dataTypes[ 0 ] = "json";
7906.1Use spaces, not tabs.
		// Delegate to script
7907.1Use spaces, not tabs.
		return "script";
7908.1Use spaces, not tabs.
	}
7916.1Use spaces, not tabs.
	accepts: {
7917.1Use spaces, not tabs.
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
7918.1Use spaces, not tabs.
	},
7919.1Use spaces, not tabs.
	contents: {
7920.1Use spaces, not tabs.
		script: /javascript|ecmascript/
7921.1Use spaces, not tabs.
	},
7922.1Use spaces, not tabs.
	converters: {
7923.1Use spaces, not tabs.
		"text script": function( text ) {
7924.1Use spaces, not tabs.
			jQuery.globalEval( text );
7925.1Use spaces, not tabs.
			return text;
7926.1Use spaces, not tabs.
		}
7927.1Use spaces, not tabs.
	}
7932.1Use spaces, not tabs.
	if ( s.cache === undefined ) {
7933.1Use spaces, not tabs.
		s.cache = false;
7934.1Use spaces, not tabs.
	}
7935.1Use spaces, not tabs.
	if ( s.crossDomain ) {
7936.1Use spaces, not tabs.
		s.type = "GET";
7937.1Use spaces, not tabs.
		s.global = false;
7938.1Use spaces, not tabs.
	}
7944.1Use spaces, not tabs.
	// This transport only deals with cross domain requests
7945.1Use spaces, not tabs.
	if ( s.crossDomain ) {
7947.1Use spaces, not tabs.
		var script,
7948.1Use spaces, not tabs.
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;
7950.1Use spaces, not tabs.
		return {
7952.1Use spaces, not tabs.
			send: function( _, callback ) {
7954.1Use spaces, not tabs.
				script = document.createElement( "script" );
7956.1Use spaces, not tabs.
				script.async = "async";
7958.1Use spaces, not tabs.
				if ( s.scriptCharset ) {
7959.1Use spaces, not tabs.
					script.charset = s.scriptCharset;
7960.1Use spaces, not tabs.
				}
7962.1Use spaces, not tabs.
				script.src = s.url;
7964.1Use spaces, not tabs.
				// Attach handlers for all browsers
7965.1Use spaces, not tabs.
				script.onload = script.onreadystatechange = function( _, isAbort ) {
7967.1Use spaces, not tabs.
					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
7967.43Wrap this regexp in parens to avoid confusion.
					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
7969.1Use spaces, not tabs.
						// Handle memory leak in IE
7970.1Use spaces, not tabs.
						script.onload = script.onreadystatechange = null;
7972.1Use spaces, not tabs.
						// Remove the script
7973.1Use spaces, not tabs.
						if ( head && script.parentNode ) {
7974.1Use spaces, not tabs.
							head.removeChild( script );
7975.1Use spaces, not tabs.
						}
7977.1Use spaces, not tabs.
						// Dereference the script
7978.1Use spaces, not tabs.
						script = undefined;
7980.1Use spaces, not tabs.
						// Callback if not abort
7981.1Use spaces, not tabs.
						if ( !isAbort ) {
7982.1Use spaces, not tabs.
							callback( 200, "success" );
7983.1Use spaces, not tabs.
						}
7984.1Use spaces, not tabs.
					}
7985.1Use spaces, not tabs.
				};
7986.1Use spaces, not tabs.
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
7987.1Use spaces, not tabs.
				// This arises when a base node is used (#2709 and #4378).
7988.1Use spaces, not tabs.
				head.insertBefore( script, head.firstChild );
7989.1Use spaces, not tabs.
			},
7991.1Use spaces, not tabs.
			abort: function() {
7992.1Use spaces, not tabs.
				if ( script ) {
7993.1Use spaces, not tabs.
					script.onload( 0, 1 );
7994.1Use spaces, not tabs.
				}
7995.1Use spaces, not tabs.
			}
7996.1Use spaces, not tabs.
		};
7997.1Use spaces, not tabs.
	}
8004.1Use spaces, not tabs.
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
8005.1Use spaces, not tabs.
		// Abort all pending requests
8006.1Use spaces, not tabs.
		for ( var key in xhrCallbacks ) {
8007.1Use spaces, not tabs.
			xhrCallbacks[ key ]( 0, 1 );
8008.1Use spaces, not tabs.
		}
8009.1Use spaces, not tabs.
	} : false,
8010.1Use spaces, not tabs.
	xhrId = 0,
8011.1Use spaces, not tabs.
	xhrCallbacks;
8015.1Use spaces, not tabs.
	try {
8016.1Use spaces, not tabs.
		return new window.XMLHttpRequest();
8017.1Use spaces, not tabs.
	} catch( e ) {}
8021.1Use spaces, not tabs.
	try {
8022.1Use spaces, not tabs.
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
8023.1Use spaces, not tabs.
	} catch( e ) {}
8029.1Use spaces, not tabs.
	/* Microsoft failed to properly
8030.1Use spaces, not tabs.
	 * implement the XMLHttpRequest in IE7 (can't request local files),
8031.1Use spaces, not tabs.
	 * so we use the ActiveXObject when it is available
8032.1Use spaces, not tabs.
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
8033.1Use spaces, not tabs.
	 * we need a fallback.
8034.1Use spaces, not tabs.
	 */
8035.1Use spaces, not tabs.
	function() {
8036.1Use spaces, not tabs.
		return !this.isLocal && createStandardXHR() || createActiveXHR();
8037.1Use spaces, not tabs.
	} :
8038.1Use spaces, not tabs.
	// For all other browsers, use the standard XMLHttpRequest object
8039.1Use spaces, not tabs.
	createStandardXHR;
8043.1Use spaces, not tabs.
	jQuery.extend( jQuery.support, {
8044.1Use spaces, not tabs.
		ajax: !!xhr,
8045.1Use spaces, not tabs.
		cors: !!xhr && ( "withCredentials" in xhr )
8046.1Use spaces, not tabs.
	});
8052.1Use spaces, not tabs.
	jQuery.ajaxTransport(function( s ) {
8053.1Use spaces, not tabs.
		// Cross domain only allowed if supported through XMLHttpRequest
8054.1Use spaces, not tabs.
		if ( !s.crossDomain || jQuery.support.cors ) {
8056.1Use spaces, not tabs.
			var callback;
8058.1Use spaces, not tabs.
			return {
8059.1Use spaces, not tabs.
				send: function( headers, complete ) {
8061.1Use spaces, not tabs.
					// Get a new xhr
8062.1Use spaces, not tabs.
					var xhr = s.xhr(),
8063.1Use spaces, not tabs.
						handle,
8064.1Use spaces, not tabs.
						i;
8066.1Use spaces, not tabs.
					// Open the socket
8067.1Use spaces, not tabs.
					// Passing null username, generates a login popup on Opera (#2865)
8068.1Use spaces, not tabs.
					if ( s.username ) {
8069.1Use spaces, not tabs.
						xhr.open( s.type, s.url, s.async, s.username, s.password );
8070.1Use spaces, not tabs.
					} else {
8071.1Use spaces, not tabs.
						xhr.open( s.type, s.url, s.async );
8072.1Use spaces, not tabs.
					}
8074.1Use spaces, not tabs.
					// Apply custom fields if provided
8075.1Use spaces, not tabs.
					if ( s.xhrFields ) {
8076.1Use spaces, not tabs.
						for ( i in s.xhrFields ) {
8077.1Use spaces, not tabs.
							xhr[ i ] = s.xhrFields[ i ];
8078.1Use spaces, not tabs.
						}
8079.1Use spaces, not tabs.
					}
8081.1Use spaces, not tabs.
					// Override mime type if needed
8082.1Use spaces, not tabs.
					if ( s.mimeType && xhr.overrideMimeType ) {
8083.1Use spaces, not tabs.
						xhr.overrideMimeType( s.mimeType );
8084.1Use spaces, not tabs.
					}
8086.1Use spaces, not tabs.
					// X-Requested-With header
8087.1Use spaces, not tabs.
					// For cross-domain requests, seeing as conditions for a preflight are
8088.1Use spaces, not tabs.
					// akin to a jigsaw puzzle, we simply never set it to be sure.
8089.1Use spaces, not tabs.
					// (it can always be set on a per-request basis or even using ajaxSetup)
8090.1Use spaces, not tabs.
					// For same-domain requests, won't change header if already provided.
8091.1Use spaces, not tabs.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
8092.1Use spaces, not tabs.
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
8093.1Use spaces, not tabs.
					}
8095.1Use spaces, not tabs.
					// Need an extra try/catch for cross domain requests in Firefox 3
8096.1Use spaces, not tabs.
					try {
8097.1Use spaces, not tabs.
						for ( i in headers ) {
8098.1Use spaces, not tabs.
							xhr.setRequestHeader( i, headers[ i ] );
8099.1Use spaces, not tabs.
						}
8100.1Use spaces, not tabs.
					} catch( _ ) {}
8102.1Use spaces, not tabs.
					// Do send the request
8103.1Use spaces, not tabs.
					// This may raise an exception which is actually
8104.1Use spaces, not tabs.
					// handled in jQuery.ajax (so no try/catch here)
8105.1Use spaces, not tabs.
					xhr.send( ( s.hasContent && s.data ) || null );
8107.1Use spaces, not tabs.
					// Listener
8108.1Use spaces, not tabs.
					callback = function( _, isAbort ) {
8110.1Use spaces, not tabs.
						var status,
8111.1Use spaces, not tabs.
							statusText,
8112.1Use spaces, not tabs.
							responseHeaders,
8113.1Use spaces, not tabs.
							responses,
8114.1Use spaces, not tabs.
							xml;
8116.1Use spaces, not tabs.
						// Firefox throws exceptions when accessing properties
8117.1Use spaces, not tabs.
						// of an xhr when a network error occured
8118.1Use spaces, not tabs.
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
8119.1Use spaces, not tabs.
						try {
8121.1Use spaces, not tabs.
							// Was never called and is aborted or complete
8122.1Use spaces, not tabs.
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
8124.1Use spaces, not tabs.
								// Only called once
8125.1Use spaces, not tabs.
								callback = undefined;
8127.1Use spaces, not tabs.
								// Do not keep as active anymore
8128.1Use spaces, not tabs.
								if ( handle ) {
8129.1Use spaces, not tabs.
									xhr.onreadystatechange = jQuery.noop;
8130.1Use spaces, not tabs.
									if ( xhrOnUnloadAbort ) {
8131.1Use spaces, not tabs.
										delete xhrCallbacks[ handle ];
8132.1Use spaces, not tabs.
									}
8133.1Use spaces, not tabs.
								}
8135.1Use spaces, not tabs.
								// If it's an abort
8136.1Use spaces, not tabs.
								if ( isAbort ) {
8137.1Use spaces, not tabs.
									// Abort it manually if needed
8138.1Use spaces, not tabs.
									if ( xhr.readyState !== 4 ) {
8139.1Use spaces, not tabs.
										xhr.abort();
8140.1Use spaces, not tabs.
									}
8141.1Use spaces, not tabs.
								} else {
8142.1Use spaces, not tabs.
									status = xhr.status;
8143.1Use spaces, not tabs.
									responseHeaders = xhr.getAllResponseHeaders();
8144.1Use spaces, not tabs.
									responses = {};
8145.1Use spaces, not tabs.
									xml = xhr.responseXML;
8147.1Use spaces, not tabs.
									// Construct response list
8148.1Use spaces, not tabs.
									if ( xml && xml.documentElement /* #4958 */ ) {
8149.1Use spaces, not tabs.
										responses.xml = xml;
8150.1Use spaces, not tabs.
									}
8151.1Use spaces, not tabs.
									responses.text = xhr.responseText;
8153.1Use spaces, not tabs.
									// Firefox throws an exception when accessing
8154.1Use spaces, not tabs.
									// statusText for faulty cross-domain requests
8155.1Use spaces, not tabs.
									try {
8156.1Use spaces, not tabs.
										statusText = xhr.statusText;
8157.1Use spaces, not tabs.
									} catch( e ) {
8158.1Use spaces, not tabs.
										// We normalize with Webkit giving an empty statusText
8159.1Use spaces, not tabs.
										statusText = "";
8160.1Use spaces, not tabs.
									}
8162.1Use spaces, not tabs.
									// Filter status for non standard behaviors
8164.1Use spaces, not tabs.
									// If the request is local and we have data: assume a success
8165.1Use spaces, not tabs.
									// (success with no data won't get notified, that's the best we
8166.1Use spaces, not tabs.
									// can do given current implementations)
8167.1Use spaces, not tabs.
									if ( !status && s.isLocal && !s.crossDomain ) {
8168.1Use spaces, not tabs.
										status = responses.text ? 200 : 404;
8169.1Use spaces, not tabs.
									// IE - #1450: sometimes returns 1223 when it should be 204
8170.1Use spaces, not tabs.
									} else if ( status === 1223 ) {
8171.1Use spaces, not tabs.
										status = 204;
8172.1Use spaces, not tabs.
									}
8173.1Use spaces, not tabs.
								}
8174.1Use spaces, not tabs.
							}
8175.1Use spaces, not tabs.
						} catch( firefoxAccessException ) {
8176.1Use spaces, not tabs.
							if ( !isAbort ) {
8177.1Use spaces, not tabs.
								complete( -1, firefoxAccessException );
8178.1Use spaces, not tabs.
							}
8179.1Use spaces, not tabs.
						}
8181.1Use spaces, not tabs.
						// Call complete if needed
8182.1Use spaces, not tabs.
						if ( responses ) {
8183.1Use spaces, not tabs.
							complete( status, statusText, responses, responseHeaders );
8184.1Use spaces, not tabs.
						}
8185.1Use spaces, not tabs.
					};
8187.1Use spaces, not tabs.
					// if we're in sync mode or it's in cache
8188.1Use spaces, not tabs.
					// and has been retrieved directly (IE6 & IE7)
8189.1Use spaces, not tabs.
					// we need to manually fire the callback
8190.1Use spaces, not tabs.
					if ( !s.async || xhr.readyState === 4 ) {
8191.1Use spaces, not tabs.
						callback();
8192.1Use spaces, not tabs.
					} else {
8193.1Use spaces, not tabs.
						handle = ++xhrId;
8194.1Use spaces, not tabs.
						if ( xhrOnUnloadAbort ) {
8195.1Use spaces, not tabs.
							// Create the active xhrs callbacks list if needed
8196.1Use spaces, not tabs.
							// and attach the unload handler
8197.1Use spaces, not tabs.
							if ( !xhrCallbacks ) {
8198.1Use spaces, not tabs.
								xhrCallbacks = {};
8199.1Use spaces, not tabs.
								jQuery( window ).unload( xhrOnUnloadAbort );
8200.1Use spaces, not tabs.
							}
8201.1Use spaces, not tabs.
							// Add to list of active xhrs callbacks
8202.1Use spaces, not tabs.
							xhrCallbacks[ handle ] = callback;
8203.1Use spaces, not tabs.
						}
8204.1Use spaces, not tabs.
						xhr.onreadystatechange = callback;
8205.1Use spaces, not tabs.
					}
8206.1Use spaces, not tabs.
				},
8208.1Use spaces, not tabs.
				abort: function() {
8209.1Use spaces, not tabs.
					if ( callback ) {
8210.1Use spaces, not tabs.
						callback(0,1);
8211.1Use spaces, not tabs.
					}
8212.1Use spaces, not tabs.
				}
8213.1Use spaces, not tabs.
			};
8214.1Use spaces, not tabs.
		}
8215.1Use spaces, not tabs.
	});
8222.1Use spaces, not tabs.
	iframe, iframeDoc,
8223.1Use spaces, not tabs.
	rfxtypes = /^(?:toggle|show|hide)$/,
8224.1Use spaces, not tabs.
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
8225.1Use spaces, not tabs.
	timerId,
8226.1Use spaces, not tabs.
	fxAttrs = [
8227.1Use spaces, not tabs.
		// height animations
8228.1Use spaces, not tabs.
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
8229.1Use spaces, not tabs.
		// width animations
8230.1Use spaces, not tabs.
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
8231.1Use spaces, not tabs.
		// opacity animations
8232.1Use spaces, not tabs.
		[ "opacity" ]
8233.1Use spaces, not tabs.
	],
8234.1Use spaces, not tabs.
	fxNow;
8237.1Use spaces, not tabs.
	show: function( speed, easing, callback ) {
8238.1Use spaces, not tabs.
		var elem, display;
8240.1Use spaces, not tabs.
		if ( speed || speed === 0 ) {
8241.1Use spaces, not tabs.
			return this.animate( genFx("show", 3), speed, easing, callback );
8243.1Use spaces, not tabs.
		} else {
8244.1Use spaces, not tabs.
			for ( var i = 0, j = this.length; i < j; i++ ) {
8245.1Use spaces, not tabs.
				elem = this[ i ];
8247.1Use spaces, not tabs.
				if ( elem.style ) {
8248.1Use spaces, not tabs.
					display = elem.style.display;
8250.1Use spaces, not tabs.
					// Reset the inline display of this element to learn if it is
8251.1Use spaces, not tabs.
					// being hidden by cascaded rules or not
8252.1Use spaces, not tabs.
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
8253.1Use spaces, not tabs.
						display = elem.style.display = "";
8254.1Use spaces, not tabs.
					}
8256.1Use spaces, not tabs.
					// Set elements which have been overridden with display: none
8257.1Use spaces, not tabs.
					// in a stylesheet to whatever the default browser style is
8258.1Use spaces, not tabs.
					// for such an element
8259.1Use spaces, not tabs.
					if ( display === "" && jQuery.css(elem, "display") === "none" ) {
8260.1Use spaces, not tabs.
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
8261.1Use spaces, not tabs.
					}
8262.1Use spaces, not tabs.
				}
8263.1Use spaces, not tabs.
			}
8265.1Use spaces, not tabs.
			// Set the display of most of the elements in a second loop
8266.1Use spaces, not tabs.
			// to avoid the constant reflow
8267.1Use spaces, not tabs.
			for ( i = 0; i < j; i++ ) {
8268.1Use spaces, not tabs.
				elem = this[ i ];
8270.1Use spaces, not tabs.
				if ( elem.style ) {
8271.1Use spaces, not tabs.
					display = elem.style.display;
8273.1Use spaces, not tabs.
					if ( display === "" || display === "none" ) {
8274.1Use spaces, not tabs.
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
8275.1Use spaces, not tabs.
					}
8276.1Use spaces, not tabs.
				}
8277.1Use spaces, not tabs.
			}
8279.1Use spaces, not tabs.
			return this;
8280.1Use spaces, not tabs.
		}
8281.1Use spaces, not tabs.
	},
8283.1Use spaces, not tabs.
	hide: function( speed, easing, callback ) {
8284.1Use spaces, not tabs.
		if ( speed || speed === 0 ) {
8285.1Use spaces, not tabs.
			return this.animate( genFx("hide", 3), speed, easing, callback);
8287.1Use spaces, not tabs.
		} else {
8288.1Use spaces, not tabs.
			var elem, display,
8289.1Use spaces, not tabs.
				i = 0,
8290.1Use spaces, not tabs.
				j = this.length;
8292.1Use spaces, not tabs.
			for ( ; i < j; i++ ) {
8293.1Use spaces, not tabs.
				elem = this[i];
8294.1Use spaces, not tabs.
				if ( elem.style ) {
8295.1Use spaces, not tabs.
					display = jQuery.css( elem, "display" );
8297.1Use spaces, not tabs.
					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
8298.1Use spaces, not tabs.
						jQuery._data( elem, "olddisplay", display );
8299.1Use spaces, not tabs.
					}
8300.1Use spaces, not tabs.
				}
8301.1Use spaces, not tabs.
			}
8303.1Use spaces, not tabs.
			// Set the display of the elements in a second loop
8304.1Use spaces, not tabs.
			// to avoid the constant reflow
8305.1Use spaces, not tabs.
			for ( i = 0; i < j; i++ ) {
8306.1Use spaces, not tabs.
				if ( this[i].style ) {
8307.1Use spaces, not tabs.
					this[i].style.display = "none";
8308.1Use spaces, not tabs.
				}
8309.1Use spaces, not tabs.
			}
8311.1Use spaces, not tabs.
			return this;
8312.1Use spaces, not tabs.
		}
8313.1Use spaces, not tabs.
	},
8315.1Use spaces, not tabs.
	// Save the old toggle function
8316.1Use spaces, not tabs.
	_toggle: jQuery.fn.toggle,
8318.1Use spaces, not tabs.
	toggle: function( fn, fn2, callback ) {
8319.1Use spaces, not tabs.
		var bool = typeof fn === "boolean";
8321.1Use spaces, not tabs.
		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
8322.1Use spaces, not tabs.
			this._toggle.apply( this, arguments );
8324.1Use spaces, not tabs.
		} else if ( fn == null || bool ) {
8325.1Use spaces, not tabs.
			this.each(function() {
8326.1Use spaces, not tabs.
				var state = bool ? fn : jQuery(this).is(":hidden");
8327.1Use spaces, not tabs.
				jQuery(this)[ state ? "show" : "hide" ]();
8328.1Use spaces, not tabs.
			});
8330.1Use spaces, not tabs.
		} else {
8331.1Use spaces, not tabs.
			this.animate(genFx("toggle", 3), fn, fn2, callback);
8332.1Use spaces, not tabs.
		}
8334.1Use spaces, not tabs.
		return this;
8335.1Use spaces, not tabs.
	},
8337.1Use spaces, not tabs.
	fadeTo: function( speed, to, easing, callback ) {
8338.1Use spaces, not tabs.
		return this.filter(":hidden").css("opacity", 0).show().end()
8339.1Use spaces, not tabs.
					.animate({opacity: to}, speed, easing, callback);
8340.1Use spaces, not tabs.
	},
8342.1Use spaces, not tabs.
	animate: function( prop, speed, easing, callback ) {
8343.1Use spaces, not tabs.
		var optall = jQuery.speed( speed, easing, callback );
8345.1Use spaces, not tabs.
		if ( jQuery.isEmptyObject( prop ) ) {
8346.1Use spaces, not tabs.
			return this.each( optall.complete, [ false ] );
8347.1Use spaces, not tabs.
		}
8349.1Use spaces, not tabs.
		// Do not change referenced properties as per-property easing will be lost
8350.1Use spaces, not tabs.
		prop = jQuery.extend( {}, prop );
8352.1Use spaces, not tabs.
		function doAnimation() {
8353.1Use spaces, not tabs.
			// XXX 'this' does not always have a nodeName when running the
8354.1Use spaces, not tabs.
			// test suite
8356.1Use spaces, not tabs.
			if ( optall.queue === false ) {
8357.1Use spaces, not tabs.
				jQuery._mark( this );
8358.1Use spaces, not tabs.
			}
8360.1Use spaces, not tabs.
			var opt = jQuery.extend( {}, optall ),
8361.1Use spaces, not tabs.
				isElement = this.nodeType === 1,
8362.1Use spaces, not tabs.
				hidden = isElement && jQuery(this).is(":hidden"),
8363.1Use spaces, not tabs.
				name, val, p, e,
8364.1Use spaces, not tabs.
				parts, start, end, unit,
8365.1Use spaces, not tabs.
				method;
8367.1Use spaces, not tabs.
			// will store per property easing and be used to determine when an animation is complete
8368.1Use spaces, not tabs.
			opt.animatedProperties = {};
8370.1Use spaces, not tabs.
			for ( p in prop ) {
8372.1Use spaces, not tabs.
				// property name normalization
8373.1Use spaces, not tabs.
				name = jQuery.camelCase( p );
8374.1Use spaces, not tabs.
				if ( p !== name ) {
8375.1Use spaces, not tabs.
					prop[ name ] = prop[ p ];
8376.1Use spaces, not tabs.
					delete prop[ p ];
8377.1Use spaces, not tabs.
				}
8379.1Use spaces, not tabs.
				val = prop[ name ];
8381.1Use spaces, not tabs.
				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
8382.1Use spaces, not tabs.
				if ( jQuery.isArray( val ) ) {
8383.1Use spaces, not tabs.
					opt.animatedProperties[ name ] = val[ 1 ];
8384.1Use spaces, not tabs.
					val = prop[ name ] = val[ 0 ];
8385.1Use spaces, not tabs.
				} else {
8386.1Use spaces, not tabs.
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
8386.103Expected '"' and instead saw '''.
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
8387.1Use spaces, not tabs.
				}
8389.1Use spaces, not tabs.
				if ( val === "hide" && hidden || val === "show" && !hidden ) {
8390.1Use spaces, not tabs.
					return opt.complete.call( this );
8391.1Use spaces, not tabs.
				}
8393.1Use spaces, not tabs.
				if ( isElement && ( name === "height" || name === "width" ) ) {
8394.1Use spaces, not tabs.
					// Make sure that nothing sneaks out
8395.1Use spaces, not tabs.
					// Record all 3 overflow attributes because IE does not
8396.1Use spaces, not tabs.
					// change the overflow attribute when overflowX and
8397.1Use spaces, not tabs.
					// overflowY are set to the same value
8398.1Use spaces, not tabs.
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];
8400.1Use spaces, not tabs.
					// Set display property to inline-block for height/width
8401.1Use spaces, not tabs.
					// animations on inline elements that are having width/height animated
8402.1Use spaces, not tabs.
					if ( jQuery.css( this, "display" ) === "inline" &&
8403.1Use spaces, not tabs.
							jQuery.css( this, "float" ) === "none" ) {
8405.1Use spaces, not tabs.
						// inline-level elements accept inline-block;
8406.1Use spaces, not tabs.
						// block-level elements need to be inline with layout
8407.1Use spaces, not tabs.
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
8408.1Use spaces, not tabs.
							this.style.display = "inline-block";
8410.1Use spaces, not tabs.
						} else {
8411.1Use spaces, not tabs.
							this.style.zoom = 1;
8412.1Use spaces, not tabs.
						}
8413.1Use spaces, not tabs.
					}
8414.1Use spaces, not tabs.
				}
8415.1Use spaces, not tabs.
			}
8417.1Use spaces, not tabs.
			if ( opt.overflow != null ) {
8418.1Use spaces, not tabs.
				this.style.overflow = "hidden";
8419.1Use spaces, not tabs.
			}
8421.1Use spaces, not tabs.
			for ( p in prop ) {
8422.1Use spaces, not tabs.
				e = new jQuery.fx( this, opt, p );
8423.1Use spaces, not tabs.
				val = prop[ p ];
8425.1Use spaces, not tabs.
				if ( rfxtypes.test( val ) ) {
8427.1Use spaces, not tabs.
					// Tracks whether to show or hide based on private
8428.1Use spaces, not tabs.
					// data attached to the element
8429.1Use spaces, not tabs.
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
8430.1Use spaces, not tabs.
					if ( method ) {
8431.1Use spaces, not tabs.
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
8432.1Use spaces, not tabs.
						e[ method ]();
8433.1Use spaces, not tabs.
					} else {
8434.1Use spaces, not tabs.
						e[ val ]();
8435.1Use spaces, not tabs.
					}
8437.1Use spaces, not tabs.
				} else {
8438.1Use spaces, not tabs.
					parts = rfxnum.exec( val );
8439.1Use spaces, not tabs.
					start = e.cur();
8441.1Use spaces, not tabs.
					if ( parts ) {
8442.1Use spaces, not tabs.
						end = parseFloat( parts[2] );
8443.1Use spaces, not tabs.
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );
8445.1Use spaces, not tabs.
						// We need to compute starting value
8446.1Use spaces, not tabs.
						if ( unit !== "px" ) {
8447.1Use spaces, not tabs.
							jQuery.style( this, p, (end || 1) + unit);
8448.1Use spaces, not tabs.
							start = ( (end || 1) / e.cur() ) * start;
8449.1Use spaces, not tabs.
							jQuery.style( this, p, start + unit);
8450.1Use spaces, not tabs.
						}
8452.1Use spaces, not tabs.
						// If a +=/-= token was provided, we're doing a relative animation
8453.1Use spaces, not tabs.
						if ( parts[1] ) {
8454.1Use spaces, not tabs.
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
8455.1Use spaces, not tabs.
						}
8457.1Use spaces, not tabs.
						e.custom( start, end, unit );
8459.1Use spaces, not tabs.
					} else {
8460.1Use spaces, not tabs.
						e.custom( start, val, "" );
8461.1Use spaces, not tabs.
					}
8462.1Use spaces, not tabs.
				}
8463.1Use spaces, not tabs.
			}
8465.1Use spaces, not tabs.
			// For JS strict compliance
8466.1Use spaces, not tabs.
			return true;
8467.1Use spaces, not tabs.
		}
8469.1Use spaces, not tabs.
		return optall.queue === false ?
8470.1Use spaces, not tabs.
			this.each( doAnimation ) :
8471.1Use spaces, not tabs.
			this.queue( optall.queue, doAnimation );
8472.1Use spaces, not tabs.
	},
8474.1Use spaces, not tabs.
	stop: function( type, clearQueue, gotoEnd ) {
8475.1Use spaces, not tabs.
		if ( typeof type !== "string" ) {
8476.1Use spaces, not tabs.
			gotoEnd = clearQueue;
8477.1Use spaces, not tabs.
			clearQueue = type;
8478.1Use spaces, not tabs.
			type = undefined;
8479.1Use spaces, not tabs.
		}
8480.1Use spaces, not tabs.
		if ( clearQueue && type !== false ) {
8481.1Use spaces, not tabs.
			this.queue( type || "fx", [] );
8482.1Use spaces, not tabs.
		}
8484.1Use spaces, not tabs.
		return this.each(function() {
8485.1Use spaces, not tabs.
			var index,
8486.1Use spaces, not tabs.
				hadTimers = false,
8487.1Use spaces, not tabs.
				timers = jQuery.timers,
8488.1Use spaces, not tabs.
				data = jQuery._data( this );
8490.1Use spaces, not tabs.
			// clear marker counters if we know they won't be
8491.1Use spaces, not tabs.
			if ( !gotoEnd ) {
8492.1Use spaces, not tabs.
				jQuery._unmark( true, this );
8493.1Use spaces, not tabs.
			}
8495.1Use spaces, not tabs.
			function stopQueue( elem, data, index ) {
8496.1Use spaces, not tabs.
				var hooks = data[ index ];
8497.1Use spaces, not tabs.
				jQuery.removeData( elem, index, true );
8498.1Use spaces, not tabs.
				hooks.stop( gotoEnd );
8499.1Use spaces, not tabs.
			}
8501.1Use spaces, not tabs.
			if ( type == null ) {
8502.1Use spaces, not tabs.
				for ( index in data ) {
8503.1Use spaces, not tabs.
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
8504.1Use spaces, not tabs.
						stopQueue( this, data, index );
8505.1Use spaces, not tabs.
					}
8506.1Use spaces, not tabs.
				}
8507.1Use spaces, not tabs.
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
8508.1Use spaces, not tabs.
				stopQueue( this, data, index );
8509.1Use spaces, not tabs.
			}
8511.1Use spaces, not tabs.
			for ( index = timers.length; index--; ) {
8512.1Use spaces, not tabs.
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
8513.1Use spaces, not tabs.
					if ( gotoEnd ) {
8515.1Use spaces, not tabs.
						// force the next step to be the last
8516.1Use spaces, not tabs.
						timers[ index ]( true );
8517.1Use spaces, not tabs.
					} else {
8518.1Use spaces, not tabs.
						timers[ index ].saveState();
8519.1Use spaces, not tabs.
					}
8520.1Use spaces, not tabs.
					hadTimers = true;
8521.1Use spaces, not tabs.
					timers.splice( index, 1 );
8522.1Use spaces, not tabs.
				}
8523.1Use spaces, not tabs.
			}
8525.1Use spaces, not tabs.
			// start the next in the queue if the last step wasn't forced
8526.1Use spaces, not tabs.
			// timers currently will call their complete callbacks, which will dequeue
8527.1Use spaces, not tabs.
			// but only if they were gotoEnd
8528.1Use spaces, not tabs.
			if ( !( gotoEnd && hadTimers ) ) {
8529.1Use spaces, not tabs.
				jQuery.dequeue( this, type );
8530.1Use spaces, not tabs.
			}
8531.1Use spaces, not tabs.
		});
8532.1Use spaces, not tabs.
	}
8538.1Use spaces, not tabs.
	setTimeout( clearFxNow, 0 );
8539.1Use spaces, not tabs.
	return ( fxNow = jQuery.now() );
8543.1Use spaces, not tabs.
	fxNow = undefined;
8548.1Use spaces, not tabs.
	var obj = {};
8550.1Use spaces, not tabs.
	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
8551.1Use spaces, not tabs.
		obj[ this ] = type;
8552.1Use spaces, not tabs.
	});
8554.1Use spaces, not tabs.
	return obj;
8559.1Use spaces, not tabs.
	slideDown: genFx( "show", 1 ),
8560.1Use spaces, not tabs.
	slideUp: genFx( "hide", 1 ),
8561.1Use spaces, not tabs.
	slideToggle: genFx( "toggle", 1 ),
8562.1Use spaces, not tabs.
	fadeIn: { opacity: "show" },
8563.1Use spaces, not tabs.
	fadeOut: { opacity: "hide" },
8564.1Use spaces, not tabs.
	fadeToggle: { opacity: "toggle" }
8566.1Use spaces, not tabs.
	jQuery.fn[ name ] = function( speed, easing, callback ) {
8567.1Use spaces, not tabs.
		return this.animate( props, speed, easing, callback );
8568.1Use spaces, not tabs.
	};
8572.1Use spaces, not tabs.
	speed: function( speed, easing, fn ) {
8573.1Use spaces, not tabs.
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
8574.1Use spaces, not tabs.
			complete: fn || !fn && easing ||
8575.1Use spaces, not tabs.
				jQuery.isFunction( speed ) && speed,
8576.1Use spaces, not tabs.
			duration: speed,
8577.1Use spaces, not tabs.
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
8578.1Use spaces, not tabs.
		};
8580.1Use spaces, not tabs.
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
8581.1Use spaces, not tabs.
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
8583.1Use spaces, not tabs.
		// normalize opt.queue - true/undefined/null -> "fx"
8584.1Use spaces, not tabs.
		if ( opt.queue == null || opt.queue === true ) {
8585.1Use spaces, not tabs.
			opt.queue = "fx";
8586.1Use spaces, not tabs.
		}
8588.1Use spaces, not tabs.
		// Queueing
8589.1Use spaces, not tabs.
		opt.old = opt.complete;
8591.1Use spaces, not tabs.
		opt.complete = function( noUnmark ) {
8592.1Use spaces, not tabs.
			if ( jQuery.isFunction( opt.old ) ) {
8593.1Use spaces, not tabs.
				opt.old.call( this );
8594.1Use spaces, not tabs.
			}
8596.1Use spaces, not tabs.
			if ( opt.queue ) {
8597.1Use spaces, not tabs.
				jQuery.dequeue( this, opt.queue );
8598.1Use spaces, not tabs.
			} else if ( noUnmark !== false ) {
8599.1Use spaces, not tabs.
				jQuery._unmark( this );
8600.1Use spaces, not tabs.
			}
8601.1Use spaces, not tabs.
		};
8603.1Use spaces, not tabs.
		return opt;
8604.1Use spaces, not tabs.
	},
8606.1Use spaces, not tabs.
	easing: {
8607.1Use spaces, not tabs.
		linear: function( p, n, firstNum, diff ) {
8608.1Use spaces, not tabs.
			return firstNum + diff * p;
8609.1Use spaces, not tabs.
		},
8610.1Use spaces, not tabs.
		swing: function( p, n, firstNum, diff ) {
8611.1Use spaces, not tabs.
			return ( ( -Math.cos( p*Math.PI ) / 2 ) + 0.5 ) * diff + firstNum;
8612.1Use spaces, not tabs.
		}
8613.1Use spaces, not tabs.
	},
8615.1Use spaces, not tabs.
	timers: [],
8617.1Use spaces, not tabs.
	fx: function( elem, options, prop ) {
8618.1Use spaces, not tabs.
		this.options = options;
8619.1Use spaces, not tabs.
		this.elem = elem;
8620.1Use spaces, not tabs.
		this.prop = prop;
8622.1Use spaces, not tabs.
		options.orig = options.orig || {};
8623.1Use spaces, not tabs.
	}
8628.1Use spaces, not tabs.
	// Simple function for setting a style value
8629.1Use spaces, not tabs.
	update: function() {
8630.1Use spaces, not tabs.
		if ( this.options.step ) {
8631.1Use spaces, not tabs.
			this.options.step.call( this.elem, this.now, this );
8632.1Use spaces, not tabs.
		}
8634.1Use spaces, not tabs.
		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
8635.1Use spaces, not tabs.
	},
8637.1Use spaces, not tabs.
	// Get the current size
8638.1Use spaces, not tabs.
	cur: function() {
8639.1Use spaces, not tabs.
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
8640.1Use spaces, not tabs.
			return this.elem[ this.prop ];
8641.1Use spaces, not tabs.
		}
8643.1Use spaces, not tabs.
		var parsed,
8644.1Use spaces, not tabs.
			r = jQuery.css( this.elem, this.prop );
8645.1Use spaces, not tabs.
		// Empty strings, null, undefined and "auto" are converted to 0,
8646.1Use spaces, not tabs.
		// complex values such as "rotate(1rad)" are returned as is,
8647.1Use spaces, not tabs.
		// simple values such as "10px" are parsed to Float.
8648.1Use spaces, not tabs.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
8649.1Use spaces, not tabs.
	},
8651.1Use spaces, not tabs.
	// Start an animation from one number to another
8652.1Use spaces, not tabs.
	custom: function( from, to, unit ) {
8653.1Use spaces, not tabs.
		var self = this,
8654.1Use spaces, not tabs.
			fx = jQuery.fx;
8656.1Use spaces, not tabs.
		this.startTime = fxNow || createFxNow();
8657.1Use spaces, not tabs.
		this.end = to;
8658.1Use spaces, not tabs.
		this.now = this.start = from;
8659.1Use spaces, not tabs.
		this.pos = this.state = 0;
8660.1Use spaces, not tabs.
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );
8662.1Use spaces, not tabs.
		function t( gotoEnd ) {
8663.1Use spaces, not tabs.
			return self.step( gotoEnd );
8664.1Use spaces, not tabs.
		}
8666.1Use spaces, not tabs.
		t.queue = this.options.queue;
8667.1Use spaces, not tabs.
		t.elem = this.elem;
8668.1Use spaces, not tabs.
		t.saveState = function() {
8669.1Use spaces, not tabs.
			if ( self.options.hide && jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
8670.1Use spaces, not tabs.
				jQuery._data( self.elem, "fxshow" + self.prop, self.start );
8671.1Use spaces, not tabs.
			}
8672.1Use spaces, not tabs.
		};
8674.1Use spaces, not tabs.
		if ( t() && jQuery.timers.push(t) && !timerId ) {
8675.1Use spaces, not tabs.
			timerId = setInterval( fx.tick, fx.interval );
8676.1Use spaces, not tabs.
		}
8677.1Use spaces, not tabs.
	},
8679.1Use spaces, not tabs.
	// Simple 'show' function
8680.1Use spaces, not tabs.
	show: function() {
8681.1Use spaces, not tabs.
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );
8683.1Use spaces, not tabs.
		// Remember where we started, so that we can go back to it later
8684.1Use spaces, not tabs.
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
8685.1Use spaces, not tabs.
		this.options.show = true;
8687.1Use spaces, not tabs.
		// Begin the animation
8688.1Use spaces, not tabs.
		// Make sure that we start at a small width/height to avoid any flash of content
8689.1Use spaces, not tabs.
		if ( dataShow !== undefined ) {
8690.1Use spaces, not tabs.
			// This show is picking up where a previous hide or show left off
8691.1Use spaces, not tabs.
			this.custom( this.cur(), dataShow );
8692.1Use spaces, not tabs.
		} else {
8693.1Use spaces, not tabs.
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
8694.1Use spaces, not tabs.
		}
8696.1Use spaces, not tabs.
		// Start by showing the element
8697.1Use spaces, not tabs.
		jQuery( this.elem ).show();
8698.1Use spaces, not tabs.
	},
8700.1Use spaces, not tabs.
	// Simple 'hide' function
8701.1Use spaces, not tabs.
	hide: function() {
8702.1Use spaces, not tabs.
		// Remember where we started, so that we can go back to it later
8703.1Use spaces, not tabs.
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
8704.1Use spaces, not tabs.
		this.options.hide = true;
8706.1Use spaces, not tabs.
		// Begin the animation
8707.1Use spaces, not tabs.
		this.custom( this.cur(), 0 );
8708.1Use spaces, not tabs.
	},
8710.1Use spaces, not tabs.
	// Each step of an animation
8711.1Use spaces, not tabs.
	step: function( gotoEnd ) {
8712.1Use spaces, not tabs.
		var p, n, complete,
8713.1Use spaces, not tabs.
			t = fxNow || createFxNow(),
8714.1Use spaces, not tabs.
			done = true,
8715.1Use spaces, not tabs.
			elem = this.elem,
8716.1Use spaces, not tabs.
			options = this.options;
8718.1Use spaces, not tabs.
		if ( gotoEnd || t >= options.duration + this.startTime ) {
8719.1Use spaces, not tabs.
			this.now = this.end;
8720.1Use spaces, not tabs.
			this.pos = this.state = 1;
8721.1Use spaces, not tabs.
			this.update();
8723.1Use spaces, not tabs.
			options.animatedProperties[ this.prop ] = true;
8725.1Use spaces, not tabs.
			for ( p in options.animatedProperties ) {
8726.1Use spaces, not tabs.
				if ( options.animatedProperties[ p ] !== true ) {
8727.1Use spaces, not tabs.
					done = false;
8728.1Use spaces, not tabs.
				}
8729.1Use spaces, not tabs.
			}
8731.1Use spaces, not tabs.
			if ( done ) {
8732.1Use spaces, not tabs.
				// Reset the overflow
8733.1Use spaces, not tabs.
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {
8735.1Use spaces, not tabs.
					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
8736.1Use spaces, not tabs.
						elem.style[ "overflow" + value ] = options.overflow[ index ];
8737.1Use spaces, not tabs.
					});
8738.1Use spaces, not tabs.
				}
8740.1Use spaces, not tabs.
				// Hide the element if the "hide" operation was done
8741.1Use spaces, not tabs.
				if ( options.hide ) {
8742.1Use spaces, not tabs.
					jQuery( elem ).hide();
8743.1Use spaces, not tabs.
				}
8745.1Use spaces, not tabs.
				// Reset the properties, if the item has been hidden or shown
8746.1Use spaces, not tabs.
				if ( options.hide || options.show ) {
8747.1Use spaces, not tabs.
					for ( p in options.animatedProperties ) {
8748.1Use spaces, not tabs.
						jQuery.style( elem, p, options.orig[ p ] );
8749.1Use spaces, not tabs.
						jQuery.removeData( elem, "fxshow" + p, true );
8750.1Use spaces, not tabs.
						// Toggle data is no longer needed
8751.1Use spaces, not tabs.
						jQuery.removeData( elem, "toggle" + p, true );
8752.1Use spaces, not tabs.
					}
8753.1Use spaces, not tabs.
				}
8755.1Use spaces, not tabs.
				// Execute the complete function
8756.1Use spaces, not tabs.
				// in the event that the complete function throws an exception
8757.1Use spaces, not tabs.
				// we must ensure it won't be called twice. #5684
8759.1Use spaces, not tabs.
				complete = options.complete;
8760.1Use spaces, not tabs.
				if ( complete ) {
8762.1Use spaces, not tabs.
					options.complete = false;
8763.1Use spaces, not tabs.
					complete.call( elem );
8764.1Use spaces, not tabs.
				}
8765.1Use spaces, not tabs.
			}
8767.1Use spaces, not tabs.
			return false;
8769.1Use spaces, not tabs.
		} else {
8770.1Use spaces, not tabs.
			// classical easing cannot be used with an Infinity duration
8771.1Use spaces, not tabs.
			if ( options.duration == Infinity ) {
8772.1Use spaces, not tabs.
				this.now = t;
8773.1Use spaces, not tabs.
			} else {
8774.1Use spaces, not tabs.
				n = t - this.startTime;
8775.1Use spaces, not tabs.
				this.state = n / options.duration;
8777.1Use spaces, not tabs.
				// Perform the easing function, defaults to swing
8778.1Use spaces, not tabs.
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
8779.1Use spaces, not tabs.
				this.now = this.start + ( (this.end - this.start) * this.pos );
8780.1Use spaces, not tabs.
			}
8781.1Use spaces, not tabs.
			// Perform the next step of the animation
8782.1Use spaces, not tabs.
			this.update();
8783.1Use spaces, not tabs.
		}
8785.1Use spaces, not tabs.
		return true;
8786.1Use spaces, not tabs.
	}
8790.1Use spaces, not tabs.
	tick: function() {
8791.1Use spaces, not tabs.
		var timer,
8792.1Use spaces, not tabs.
			timers = jQuery.timers,
8793.1Use spaces, not tabs.
			i = 0;
8795.1Use spaces, not tabs.
		for ( ; i < timers.length; i++ ) {
8796.1Use spaces, not tabs.
			timer = timers[ i ];
8797.1Use spaces, not tabs.
			// Checks the timer has not already been removed
8798.1Use spaces, not tabs.
			if ( !timer() && timers[ i ] === timer ) {
8799.1Use spaces, not tabs.
				timers.splice( i--, 1 );
8800.1Use spaces, not tabs.
			}
8801.1Use spaces, not tabs.
		}
8803.1Use spaces, not tabs.
		if ( !timers.length ) {
8804.1Use spaces, not tabs.
			jQuery.fx.stop();
8805.1Use spaces, not tabs.
		}
8806.1Use spaces, not tabs.
	},
8808.1Use spaces, not tabs.
	interval: 13,
8810.1Use spaces, not tabs.
	stop: function() {
8811.1Use spaces, not tabs.
		clearInterval( timerId );
8812.1Use spaces, not tabs.
		timerId = null;
8813.1Use spaces, not tabs.
	},
8815.1Use spaces, not tabs.
	speeds: {
8816.1Use spaces, not tabs.
		slow: 600,
8817.1Use spaces, not tabs.
		fast: 200,
8818.1Use spaces, not tabs.
		// Default speed
8819.1Use spaces, not tabs.
		_default: 400
8820.1Use spaces, not tabs.
	},
8822.1Use spaces, not tabs.
	step: {
8823.1Use spaces, not tabs.
		opacity: function( fx ) {
8824.1Use spaces, not tabs.
			jQuery.style( fx.elem, "opacity", fx.now );
8825.1Use spaces, not tabs.
		},
8827.1Use spaces, not tabs.
		_default: function( fx ) {
8828.1Use spaces, not tabs.
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
8829.1Use spaces, not tabs.
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
8830.1Use spaces, not tabs.
			} else {
8831.1Use spaces, not tabs.
				fx.elem[ fx.prop ] = fx.now;
8832.1Use spaces, not tabs.
			}
8833.1Use spaces, not tabs.
		}
8834.1Use spaces, not tabs.
	}
8840.1Use spaces, not tabs.
	jQuery.fx.step[ prop ] = function( fx ) {
8841.1Use spaces, not tabs.
		jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
8842.1Use spaces, not tabs.
	};
8846.1Use spaces, not tabs.
	jQuery.expr.filters.animated = function( elem ) {
8847.1Use spaces, not tabs.
		return jQuery.grep(jQuery.timers, function( fn ) {
8848.1Use spaces, not tabs.
			return elem === fn.elem;
8849.1Use spaces, not tabs.
		}).length;
8850.1Use spaces, not tabs.
	};
8856.1Use spaces, not tabs.
	if ( !elemdisplay[ nodeName ] ) {
8858.1Use spaces, not tabs.
		var body = document.body,
8859.1Use spaces, not tabs.
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
8860.1Use spaces, not tabs.
			display = elem.css( "display" );
8861.1Use spaces, not tabs.
		elem.remove();
8863.1Use spaces, not tabs.
		// If the simple way fails,
8864.1Use spaces, not tabs.
		// get element's real default display by attaching it to a temp iframe
8865.1Use spaces, not tabs.
		if ( display === "none" || display === "" ) {
8866.1Use spaces, not tabs.
			// No iframe to use yet, so create it
8867.1Use spaces, not tabs.
			if ( !iframe ) {
8868.1Use spaces, not tabs.
				iframe = document.createElement( "iframe" );
8869.1Use spaces, not tabs.
				iframe.frameBorder = iframe.width = iframe.height = 0;
8870.1Use spaces, not tabs.
			}
8872.1Use spaces, not tabs.
			body.appendChild( iframe );
8874.1Use spaces, not tabs.
			// Create a cacheable copy of the iframe document on first call.
8875.1Use spaces, not tabs.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
8876.1Use spaces, not tabs.
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
8877.1Use spaces, not tabs.
			if ( !iframeDoc || !iframe.createElement ) {
8878.1Use spaces, not tabs.
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
8879.1Use spaces, not tabs.
				iframeDoc.write( ( document.compatMode === "CSS1Compat" ? "<!doctype html>" : "" ) + "<html><body>" );
8880.1Use spaces, not tabs.
				iframeDoc.close();
8881.1Use spaces, not tabs.
			}
8883.1Use spaces, not tabs.
			elem = iframeDoc.createElement( nodeName );
8885.1Use spaces, not tabs.
			iframeDoc.body.appendChild( elem );
8887.1Use spaces, not tabs.
			display = jQuery.css( elem, "display" );
8888.1Use spaces, not tabs.
			body.removeChild( iframe );
8889.1Use spaces, not tabs.
		}
8891.1Use spaces, not tabs.
		// Store the correct default display
8892.1Use spaces, not tabs.
		elemdisplay[ nodeName ] = display;
8893.1Use spaces, not tabs.
	}
8895.1Use spaces, not tabs.
	return elemdisplay[ nodeName ];
8902.1Use spaces, not tabs.
	rroot = /^(?:body|html)$/i;
8905.1Use spaces, not tabs.
	jQuery.fn.offset = function( options ) {
8906.1Use spaces, not tabs.
		var elem = this[0], box;
8908.1Use spaces, not tabs.
		if ( options ) {
8909.1Use spaces, not tabs.
			return this.each(function( i ) {
8910.1Use spaces, not tabs.
				jQuery.offset.setOffset( this, options, i );
8911.1Use spaces, not tabs.
			});
8912.1Use spaces, not tabs.
		}
8914.1Use spaces, not tabs.
		if ( !elem || !elem.ownerDocument ) {
8915.1Use spaces, not tabs.
			return null;
8916.1Use spaces, not tabs.
		}
8918.1Use spaces, not tabs.
		if ( elem === elem.ownerDocument.body ) {
8919.1Use spaces, not tabs.
			return jQuery.offset.bodyOffset( elem );
8920.1Use spaces, not tabs.
		}
8922.1Use spaces, not tabs.
		try {
8923.1Use spaces, not tabs.
			box = elem.getBoundingClientRect();
8924.1Use spaces, not tabs.
		} catch(e) {}
8926.1Use spaces, not tabs.
		var doc = elem.ownerDocument,
8927.1Use spaces, not tabs.
			docElem = doc.documentElement;
8929.1Use spaces, not tabs.
		// Make sure we're not dealing with a disconnected DOM node
8930.1Use spaces, not tabs.
		if ( !box || !jQuery.contains( docElem, elem ) ) {
8931.1Use spaces, not tabs.
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
8932.1Use spaces, not tabs.
		}
8934.1Use spaces, not tabs.
		var body = doc.body,
8935.1Use spaces, not tabs.
			win = getWindow(doc),
8936.1Use spaces, not tabs.
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
8937.1Use spaces, not tabs.
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
8938.1Use spaces, not tabs.
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
8939.1Use spaces, not tabs.
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
8940.1Use spaces, not tabs.
			top  = box.top  + scrollTop  - clientTop,
8941.1Use spaces, not tabs.
			left = box.left + scrollLeft - clientLeft;
8943.1Use spaces, not tabs.
		return { top: top, left: left };
8944.1Use spaces, not tabs.
	};
8947.1Use spaces, not tabs.
	jQuery.fn.offset = function( options ) {
8948.1Use spaces, not tabs.
		var elem = this[0];
8950.1Use spaces, not tabs.
		if ( options ) {
8951.1Use spaces, not tabs.
			return this.each(function( i ) {
8952.1Use spaces, not tabs.
				jQuery.offset.setOffset( this, options, i );
8953.1Use spaces, not tabs.
			});
8954.1Use spaces, not tabs.
		}
8956.1Use spaces, not tabs.
		if ( !elem || !elem.ownerDocument ) {
8957.1Use spaces, not tabs.
			return null;
8958.1Use spaces, not tabs.
		}
8960.1Use spaces, not tabs.
		if ( elem === elem.ownerDocument.body ) {
8961.1Use spaces, not tabs.
			return jQuery.offset.bodyOffset( elem );
8962.1Use spaces, not tabs.
		}
8964.1Use spaces, not tabs.
		var computedStyle,
8965.1Use spaces, not tabs.
			offsetParent = elem.offsetParent,
8966.1Use spaces, not tabs.
			prevOffsetParent = elem,
8967.1Use spaces, not tabs.
			doc = elem.ownerDocument,
8968.1Use spaces, not tabs.
			docElem = doc.documentElement,
8969.1Use spaces, not tabs.
			body = doc.body,
8970.1Use spaces, not tabs.
			defaultView = doc.defaultView,
8971.1Use spaces, not tabs.
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
8972.1Use spaces, not tabs.
			top = elem.offsetTop,
8973.1Use spaces, not tabs.
			left = elem.offsetLeft;
8975.1Use spaces, not tabs.
		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
8976.1Use spaces, not tabs.
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
8977.1Use spaces, not tabs.
				break;
8978.1Use spaces, not tabs.
			}
8980.1Use spaces, not tabs.
			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
8981.1Use spaces, not tabs.
			top  -= elem.scrollTop;
8982.1Use spaces, not tabs.
			left -= elem.scrollLeft;
8984.1Use spaces, not tabs.
			if ( elem === offsetParent ) {
8985.1Use spaces, not tabs.
				top  += elem.offsetTop;
8986.1Use spaces, not tabs.
				left += elem.offsetLeft;
8988.1Use spaces, not tabs.
				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
8989.1Use spaces, not tabs.
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
8990.1Use spaces, not tabs.
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
8991.1Use spaces, not tabs.
				}
8993.1Use spaces, not tabs.
				prevOffsetParent = offsetParent;
8994.1Use spaces, not tabs.
				offsetParent = elem.offsetParent;
8995.1Use spaces, not tabs.
			}
8997.1Use spaces, not tabs.
			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
8998.1Use spaces, not tabs.
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
8999.1Use spaces, not tabs.
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
9000.1Use spaces, not tabs.
			}
9002.1Use spaces, not tabs.
			prevComputedStyle = computedStyle;
9003.1Use spaces, not tabs.
		}
9005.1Use spaces, not tabs.
		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
9006.1Use spaces, not tabs.
			top  += body.offsetTop;
9007.1Use spaces, not tabs.
			left += body.offsetLeft;
9008.1Use spaces, not tabs.
		}
9010.1Use spaces, not tabs.
		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
9011.1Use spaces, not tabs.
			top  += Math.max( docElem.scrollTop, body.scrollTop );
9012.1Use spaces, not tabs.
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
9013.1Use spaces, not tabs.
		}
9015.1Use spaces, not tabs.
		return { top: top, left: left };
9016.1Use spaces, not tabs.
	};
9021.1Use spaces, not tabs.
	bodyOffset: function( body ) {
9022.1Use spaces, not tabs.
		var top = body.offsetTop,
9023.1Use spaces, not tabs.
			left = body.offsetLeft;
9025.1Use spaces, not tabs.
		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
9026.1Use spaces, not tabs.
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
9027.1Use spaces, not tabs.
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
9028.1Use spaces, not tabs.
		}
9030.1Use spaces, not tabs.
		return { top: top, left: left };
9031.1Use spaces, not tabs.
	},
9033.1Use spaces, not tabs.
	setOffset: function( elem, options, i ) {
9034.1Use spaces, not tabs.
		var position = jQuery.css( elem, "position" );
9036.1Use spaces, not tabs.
		// set position first, in-case top/left are set even on static elem
9037.1Use spaces, not tabs.
		if ( position === "static" ) {
9038.1Use spaces, not tabs.
			elem.style.position = "relative";
9039.1Use spaces, not tabs.
		}
9041.1Use spaces, not tabs.
		var curElem = jQuery( elem ),
9042.1Use spaces, not tabs.
			curOffset = curElem.offset(),
9043.1Use spaces, not tabs.
			curCSSTop = jQuery.css( elem, "top" ),
9044.1Use spaces, not tabs.
			curCSSLeft = jQuery.css( elem, "left" ),
9045.1Use spaces, not tabs.
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
9046.1Use spaces, not tabs.
			props = {}, curPosition = {}, curTop, curLeft;
9048.1Use spaces, not tabs.
		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
9049.1Use spaces, not tabs.
		if ( calculatePosition ) {
9050.1Use spaces, not tabs.
			curPosition = curElem.position();
9051.1Use spaces, not tabs.
			curTop = curPosition.top;
9052.1Use spaces, not tabs.
			curLeft = curPosition.left;
9053.1Use spaces, not tabs.
		} else {
9054.1Use spaces, not tabs.
			curTop = parseFloat( curCSSTop ) || 0;
9055.1Use spaces, not tabs.
			curLeft = parseFloat( curCSSLeft ) || 0;
9056.1Use spaces, not tabs.
		}
9058.1Use spaces, not tabs.
		if ( jQuery.isFunction( options ) ) {
9059.1Use spaces, not tabs.
			options = options.call( elem, i, curOffset );
9060.1Use spaces, not tabs.
		}
9062.1Use spaces, not tabs.
		if ( options.top != null ) {
9063.1Use spaces, not tabs.
			props.top = ( options.top - curOffset.top ) + curTop;
9064.1Use spaces, not tabs.
		}
9065.1Use spaces, not tabs.
		if ( options.left != null ) {
9066.1Use spaces, not tabs.
			props.left = ( options.left - curOffset.left ) + curLeft;
9067.1Use spaces, not tabs.
		}
9069.1Use spaces, not tabs.
		if ( "using" in options ) {
9070.1Use spaces, not tabs.
			options.using.call( elem, props );
9071.1Use spaces, not tabs.
		} else {
9072.1Use spaces, not tabs.
			curElem.css( props );
9073.1Use spaces, not tabs.
		}
9074.1Use spaces, not tabs.
	}
9080.1Use spaces, not tabs.
	position: function() {
9081.1Use spaces, not tabs.
		if ( !this[0] ) {
9082.1Use spaces, not tabs.
			return null;
9083.1Use spaces, not tabs.
		}
9085.1Use spaces, not tabs.
		var elem = this[0],
9087.1Use spaces, not tabs.
		// Get *real* offsetParent
9088.1Use spaces, not tabs.
		offsetParent = this.offsetParent(),
9090.1Use spaces, not tabs.
		// Get correct offsets
9091.1Use spaces, not tabs.
		offset       = this.offset(),
9092.1Use spaces, not tabs.
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
9094.1Use spaces, not tabs.
		// Subtract element margins
9095.1Use spaces, not tabs.
		// note: when an element has margin: auto the offsetLeft and marginLeft
9096.1Use spaces, not tabs.
		// are the same in Safari causing offset.left to incorrectly be 0
9097.1Use spaces, not tabs.
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
9098.1Use spaces, not tabs.
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;
9100.1Use spaces, not tabs.
		// Add offsetParent borders
9101.1Use spaces, not tabs.
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
9102.1Use spaces, not tabs.
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;
9104.1Use spaces, not tabs.
		// Subtract the two offsets
9105.1Use spaces, not tabs.
		return {
9106.1Use spaces, not tabs.
			top:  offset.top  - parentOffset.top,
9107.1Use spaces, not tabs.
			left: offset.left - parentOffset.left
9108.1Use spaces, not tabs.
		};
9109.1Use spaces, not tabs.
	},
9111.1Use spaces, not tabs.
	offsetParent: function() {
9112.1Use spaces, not tabs.
		return this.map(function() {
9113.1Use spaces, not tabs.
			var offsetParent = this.offsetParent || document.body;
9114.1Use spaces, not tabs.
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
9115.1Use spaces, not tabs.
				offsetParent = offsetParent.offsetParent;
9116.1Use spaces, not tabs.
			}
9117.1Use spaces, not tabs.
			return offsetParent;
9118.1Use spaces, not tabs.
		});
9119.1Use spaces, not tabs.
	}
9125.1Use spaces, not tabs.
	var method = "scroll" + name;
9127.1Use spaces, not tabs.
	jQuery.fn[ method ] = function( val ) {
9128.1Use spaces, not tabs.
		var elem, win;
9130.1Use spaces, not tabs.
		if ( val === undefined ) {
9131.1Use spaces, not tabs.
			elem = this[ 0 ];
9133.1Use spaces, not tabs.
			if ( !elem ) {
9134.1Use spaces, not tabs.
				return null;
9135.1Use spaces, not tabs.
			}
9137.1Use spaces, not tabs.
			win = getWindow( elem );
9139.1Use spaces, not tabs.
			// Return the scroll offset
9140.1Use spaces, not tabs.
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
9141.1Use spaces, not tabs.
				jQuery.support.boxModel && win.document.documentElement[ method ] ||
9142.1Use spaces, not tabs.
					win.document.body[ method ] :
9143.1Use spaces, not tabs.
				elem[ method ];
9144.1Use spaces, not tabs.
		}
9146.1Use spaces, not tabs.
		// Set the scroll offset
9147.1Use spaces, not tabs.
		return this.each(function() {
9148.1Use spaces, not tabs.
			win = getWindow( this );
9150.1Use spaces, not tabs.
			if ( win ) {
9151.1Use spaces, not tabs.
				win.scrollTo(
9152.1Use spaces, not tabs.
					!i ? val : jQuery( win ).scrollLeft(),
9153.1Use spaces, not tabs.
					 i ? val : jQuery( win ).scrollTop()
9154.1Use spaces, not tabs.
				);
9156.1Use spaces, not tabs.
			} else {
9157.1Use spaces, not tabs.
				this[ method ] = val;
9158.1Use spaces, not tabs.
			}
9159.1Use spaces, not tabs.
		});
9160.1Use spaces, not tabs.
	};
9164.1Use spaces, not tabs.
	return jQuery.isWindow( elem ) ?
9165.1Use spaces, not tabs.
		elem :
9166.1Use spaces, not tabs.
		elem.nodeType === 9 ?
9167.1Use spaces, not tabs.
			elem.defaultView || elem.parentWindow :
9168.1Use spaces, not tabs.
			false;
9177.1Use spaces, not tabs.
	var type = name.toLowerCase();
9179.1Use spaces, not tabs.
	// innerHeight and innerWidth
9180.1Use spaces, not tabs.
	jQuery.fn[ "inner" + name ] = function() {
9181.1Use spaces, not tabs.
		var elem = this[0];
9182.1Use spaces, not tabs.
		return elem ?
9183.1Use spaces, not tabs.
			elem.style ?
9184.1Use spaces, not tabs.
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
9185.1Use spaces, not tabs.
			this[ type ]() :
9186.1Use spaces, not tabs.
			null;
9187.1Use spaces, not tabs.
	};
9189.1Use spaces, not tabs.
	// outerHeight and outerWidth
9190.1Use spaces, not tabs.
	jQuery.fn[ "outer" + name ] = function( margin ) {
9191.1Use spaces, not tabs.
		var elem = this[0];
9192.1Use spaces, not tabs.
		return elem ?
9193.1Use spaces, not tabs.
			elem.style ?
9194.1Use spaces, not tabs.
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
9195.1Use spaces, not tabs.
			this[ type ]() :
9196.1Use spaces, not tabs.
			null;
9197.1Use spaces, not tabs.
	};
9199.1Use spaces, not tabs.
	jQuery.fn[ type ] = function( size ) {
9200.1Use spaces, not tabs.
		// Get window width or height
9201.1Use spaces, not tabs.
		var elem = this[0];
9202.1Use spaces, not tabs.
		if ( !elem ) {
9203.1Use spaces, not tabs.
			return size == null ? null : this;
9204.1Use spaces, not tabs.
		}
9206.1Use spaces, not tabs.
		if ( jQuery.isFunction( size ) ) {
9207.1Use spaces, not tabs.
			return this.each(function( i ) {
9208.1Use spaces, not tabs.
				var self = jQuery( this );
9209.1Use spaces, not tabs.
				self[ type ]( size.call( this, i, self[ type ]() ) );
9210.1Use spaces, not tabs.
			});
9211.1Use spaces, not tabs.
		}
9213.1Use spaces, not tabs.
		if ( jQuery.isWindow( elem ) ) {
9214.1Use spaces, not tabs.
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
9215.1Use spaces, not tabs.
			// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
9216.1Use spaces, not tabs.
			var docElemProp = elem.document.documentElement[ "client" + name ],
9217.1Use spaces, not tabs.
				body = elem.document.body;
9218.1Use spaces, not tabs.
			return elem.document.compatMode === "CSS1Compat" && docElemProp ||
9219.1Use spaces, not tabs.
				body && body[ "client" + name ] || docElemProp;
9221.1Use spaces, not tabs.
		// Get document width or height
9222.1Use spaces, not tabs.
		} else if ( elem.nodeType === 9 ) {
9223.1Use spaces, not tabs.
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
9224.1Use spaces, not tabs.
			return Math.max(
9225.1Use spaces, not tabs.
				elem.documentElement["client" + name],
9226.1Use spaces, not tabs.
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
9227.1Use spaces, not tabs.
				elem.body["offset" + name], elem.documentElement["offset" + name]
9228.1Use spaces, not tabs.
			);
9230.1Use spaces, not tabs.
		// Get or set width or height on the element
9231.1Use spaces, not tabs.
		} else if ( size === undefined ) {
9232.1Use spaces, not tabs.
			var orig = jQuery.css( elem, type ),
9233.1Use spaces, not tabs.
				ret = parseFloat( orig );
9235.1Use spaces, not tabs.
			return jQuery.isNumeric( ret ) ? ret : orig;
9237.1Use spaces, not tabs.
		// Set the width or height on the element (default to pixels if value is unitless)
9238.1Use spaces, not tabs.
		} else {
9239.1Use spaces, not tabs.
			return this.css( type, typeof size === "string" ? size : size + "px" );
9240.1Use spaces, not tabs.
		}
9241.1Use spaces, not tabs.
	};
9264.1Use spaces, not tabs.
	define( "jquery", [], function () { return jQuery; } );
Function Report
19
«anonymous»(window, undefined)
parameter
undefined, window
variable
document, jQuery, location, navigator
25
«jQuery»()
variable
DOMContentLoaded, _$, _jQuery, browserMatch, class2type, fcamelCase, hasOwn, indexOf, jQuery, push, quickExpr, rdashAlpha, readyList, rmozilla, rmsPrefix, rmsie, rnotwhite, rootjQuery, ropera, rsingleTag, rvalidbraces, rvalidchars, rvalidescape, rvalidtokens, rwebkit, slice, toString, trim, trimLeft, trimRight, userAgent
28
«jQuery»(selector, context)
parameter
context, selector
73
«fcamelCase»(all, letter)
parameter
all, letter
102
«init»(selector, context, rootjQuery)
parameter
context, rootjQuery, selector
variable
doc, elem, match, ret
222
«size»()
226
«toArray»()
232
«get»(num)
parameter
num
244
«pushStack»(elems, name, selector)
parameter
elems, name, selector
variable
ret
273
«each»(callback, args)
parameter
args, callback
277
«ready»(fn)
parameter
fn
287
«eq»(i)
parameter
i
294
«first»()
298
«last»()
302
«slice»()
307
«map»(callback)
parameter
callback
308
«this»(elem, i)
parameter
elem, i
313
«end»()
327
«extend»()
variable
clone, copy, copyIsArray, deep, i, length, name, options, src, target
JSLint edition 2016-08-12
Property Directive

/*property
    $, add, apply, attr, bindReady, body, buildFragment, cacheable, call,
    charAt, childNodes, clone, constructor, context, createElement, document,
    each, end, eq, exec, extend, find, first, fn, fragment, get,
    getElementById, hasOwnProperty, id, indexOf, init, isArray, isFunction,
    isPlainObject, jQuery, join, jquery, last, length, location, makeArray,
    map, merge, navigator, nodeType, ownerDocument, parentNode, prevObject,
    prototype, push, pushStack, ready, selector, size, slice, sort, splice,
    toArray, toString, toUpperCase, trim, userAgent
*/

select propertyJSLintclearclear options
Options
Assume...
in development
ES6
a browser
CouchDB
Node.js

Fudge...
First line number is 1
Tolerate...
bitwise operators
eval
for statement
multiple vars
single quote strings
this
whitespace mess
Number...

Maximum line length

Maximum warnings
Global variables...
imported globals here

