
Administrator@TXXC520ZA99FVXM MINGW32 ~
$ git --help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

Administrator@TXXC520ZA99FVXM MINGW32 ~
$

-git bisect:

Administrator@TXXC520ZA99FVXM MINGW32 ~ (master)
$ git bisect
usage: git bisect [help|start|bad|good|new|old|terms|skip|next|reset|visualize|replay|log|run]

-git bisect help:

Administrator@TXXC520ZA99FVXM MINGW32 ~ (master)
$ git bisect help
usage: git bisect [help|start|bad|good|new|old|terms|skip|next|reset|visualize|replay|log|run]

git bisect help
        print this long help message.
git bisect start [--term-{old,good}=<term> --term-{new,bad}=<term>]
                 [--no-checkout] [<bad> [<good>...]] [--] [<pathspec>...]
        reset bisect state and start bisection.
git bisect (bad|new) [<rev>]
        mark <rev> a known-bad revision/
                a revision after change in a given property.
git bisect (good|old) [<rev>...]
        mark <rev>... known-good revisions/
                revisions before change in a given property.
git bisect terms [--term-good | --term-bad]
        show the terms used for old and new commits (default: bad, good)
git bisect skip [(<rev>|<range>)...]
        mark <rev>... untestable revisions.
git bisect next
        find next bisection to test and check it out.
git bisect reset [<commit>]
        finish bisection search and go back to commit.
git bisect visualize
        show bisect status in gitk.
git bisect replay <logfile>
        replay bisection log.
git bisect log
        show bisect log.
git bisect run <cmd>...
        use <cmd>... to automatically bisect.

Please use "git help bisect" to get the full man page.

Administrator@TXXC520ZA99FVXM MINGW32 ~ (master)
$

-instal git help config
-Returned: copy and paste to search engine:

file:///C:/Program%20Files/Git/mingw32/share/doc/git-doc/git-config.html

-git status

Administrator@TXXC520ZA99FVXM MINGW32 ~ (master|BISECTING)
$ git status
On branch master
You are currently bisecting, started from branch 'master'.
  (use "git bisect reset" to get back to the original branch)


Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        .babelrc
        .bash_history
        .config/
        .gitconfig
        .node_repl_history
        .ssh/
        .viminfo
        3D Objects/
        AppData/
        Contacts/
        Desktop/
        Documents/
        Downloads/
        Favorites/
        KLN INFEED-dream-co-id
        Links/
        MicrosoftEdgeBackups/
        Music/
        NTUSER.DAT
        NTUSER.DAT{0ed1b5f8-3d86-11e8-a9df-7cfe90913f20}.TM.blf
        NTUSER.DAT{0ed1b5f8-3d86-11e8-a9df-7cfe90913f20}.TMContainer00000000000000000001.regtrans-ms
        NTUSER.DAT{0ed1b5f8-3d86-11e8-a9df-7cfe90913f20}.TMContainer00000000000000000002.regtrans-ms
        OneDrive/
        Pictures/
        Saved Games/
        Searches/
        Tracing/
        UsersAdministratorDocumentscircleciconfig.yml
        Videos/
        YandexDisk/
        demos/
        jsfiddle-api@0.0.1
        jsfiddler
        mesa/
        node
        node_modules/
        ntuser.dat.LOG1
        ntuser.dat.LOG2
        ntuser.ini
        package-lock.json
        tmrowapp-contrib/


It took 3.15 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing added to commit but untracked files present (use "git add" to track)

Administrator@TXXC520ZA99FVXM MINGW32 ~ (master|BISECTING)
$

-A99FVXM MINGW32 ~ (master|BISECTING)
$ vim README

-Returned:
-README [unix] {06:59 01/01/1970} 0.0-1 A
--VISUAL--

-vim benchmarks.rb

-Returned:

-/benchmarks.rb [unix] {06:59 01/01/1970} A
benchmarks.rb [New File]

